[{"categories":["Android"],"content":"基于广播和服务功能的音乐播放器","date":"2021-05-11","objectID":"/music_box/","tags":["Android","BroadcastReceivers","Java"],"title":"基于广播和服务功能的音乐播放器","uri":"/music_box/"},{"categories":["Android"],"content":"基于广播和服务功能的音乐播放器 ","date":"2021-05-11","objectID":"/music_box/:0:0","tags":["Android","BroadcastReceivers","Java"],"title":"基于广播和服务功能的音乐播放器","uri":"/music_box/"},{"categories":["Android"],"content":"1、应用知识点 ","date":"2021-05-11","objectID":"/music_box/:1:0","tags":["Android","BroadcastReceivers","Java"],"title":"基于广播和服务功能的音乐播放器","uri":"/music_box/"},{"categories":["Android"],"content":"1.1、Android 广播接收器(Broadcast Receivers) 广播接收器用于响应来自其他应用程序或者系统的广播消息。这些消息有时被称为事件或者意图。例如，应用程序可以初始化广播来让其他的应用程序知道一些数据已经被下载到设备，并可以为他们所用。这样广播接收器可以定义适当的动作来拦截这些通信。 有以下两个重要的步骤来使系统的广播意图配合广播接收器工作。 创建广播接收器 注册广播接收器 还有一个附加的步骤，要实现自定义的意图，你必须创建并广播这些意图。 ","date":"2021-05-11","objectID":"/music_box/:1:1","tags":["Android","BroadcastReceivers","Java"],"title":"基于广播和服务功能的音乐播放器","uri":"/music_box/"},{"categories":["Android"],"content":"1.2、服务（Service） 服务是一个后台运行的组件，执行长时间运行且不需要用户交互的任务。即使应用被销毁也依然可以工作。服务基本上包含两种状态 状态 描述 Started Android的应用程序组件，如活动，通过startService()启动了服务，则服务是Started状态。一旦启动，服务可以在后台无限期运行，即使启动它的组件已经被销毁。 Bound 当Android的应用程序组件通过bindService()绑定了服务，则服务是Bound状态。Bound状态的服务提供了一个客户服务器接口来允许组件与服务进行交互，如发送请求，获取结果，甚至通过IPC来进行跨进程通信。 ","date":"2021-05-11","objectID":"/music_box/:1:2","tags":["Android","BroadcastReceivers","Java"],"title":"基于广播和服务功能的音乐播放器","uri":"/music_box/"},{"categories":["Android"],"content":"2、原型图 老师要求的原型图仅包括四个按钮和两个文本。 四个按钮分别为上一曲、播放暂停、停止、下一曲；两个文本为曲名和歌手。 我在老师要求的基础上，结合上次实验RecyclerView进行更新，目的如图所示，实现一个类似常规音乐播放器的界面。 左侧包括歌曲的图片，上方时每首歌的列表。 ","date":"2021-05-11","objectID":"/music_box/:2:0","tags":["Android","BroadcastReceivers","Java"],"title":"基于广播和服务功能的音乐播放器","uri":"/music_box/"},{"categories":["Android"],"content":"2、需求 编写音乐盒代码，参考群文件-源码-Musicbox，掌握源码后在其基础上添加音乐播放的 上一首 和 下一首 控制，也可以增加更多的功能。 ","date":"2021-05-11","objectID":"/music_box/:3:0","tags":["Android","BroadcastReceivers","Java"],"title":"基于广播和服务功能的音乐播放器","uri":"/music_box/"},{"categories":["Android"],"content":"3、思路 在真正的代码撰写中，广播就是内嵌于activity和service的。在界面中绘制四个按钮、一个图片和两个文本，填入数据。监听不同按钮点击事件，绑定对应的广播函数或服务。 ","date":"2021-05-11","objectID":"/music_box/:4:0","tags":["Android","BroadcastReceivers","Java"],"title":"基于广播和服务功能的音乐播放器","uri":"/music_box/"},{"categories":["Android"],"content":"4、代码 ","date":"2021-05-11","objectID":"/music_box/:5:0","tags":["Android","BroadcastReceivers","Java"],"title":"基于广播和服务功能的音乐播放器","uri":"/music_box/"},{"categories":["Android"],"content":"4.1、fragment_mes.xml（在原基础上添加即可） \u003candroidx.constraintlayout.widget.ConstraintLayout android:id=\"@+id/constraintLayout_mes_mp\" android:layout_width=\"match_parent\" android:layout_height=\"70dp\" android:layout_gravity=\"bottom\" android:background=\"#99BB86FC\" android:orientation=\"horizontal\"\u003e \u003cImageButton android:id=\"@+id/iB_ablum\" android:layout_width=\"70dp\" android:layout_height=\"wrap_content\" android:scaleType=\"centerCrop\" android:src=\"@drawable/flower1\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintEnd_toEndOf=\"parent\" app:layout_constraintHorizontal_bias=\"0.0\" app:layout_constraintStart_toStartOf=\"parent\" app:layout_constraintTop_toTopOf=\"parent\" app:layout_constraintVertical_bias=\"0.0\" /\u003e \u003cTextView android:id=\"@+id/tV_musicName\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_marginStart=\"5dp\" android:layout_marginBottom=\"15dp\" android:text=\"Inside the Lines\" android:textColor=\"#FFFFFFFF\" android:textSize=\"16sp\" android:textStyle=\"bold\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintStart_toEndOf=\"@+id/iB_ablum\" app:layout_constraintTop_toTopOf=\"parent\" app:layout_constraintVertical_bias=\"0.333\" /\u003e \u003cTextView android:id=\"@+id/tV_singerName\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_marginStart=\"5dp\" android:layout_marginBottom=\"5dp\" android:text=\"Mike Perry\" android:textColor=\"#DDFFFFFF\" android:textSize=\"14sp\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintStart_toEndOf=\"@+id/iB_ablum\" app:layout_constraintTop_toBottomOf=\"@+id/tV_musicName\" /\u003e \u003cImageButton android:id=\"@+id/iB_lastPiece\" android:layout_width=\"60dp\" android:layout_height=\"60dp\" android:background=\"#00BB86FC\" android:src=\"@drawable/arrow_left_thin_circle_outline\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintEnd_toStartOf=\"@+id/iB_playPause\" app:layout_constraintTop_toTopOf=\"parent\" /\u003e \u003cImageButton android:id=\"@+id/iB_playPause\" android:layout_width=\"60dp\" android:layout_height=\"60dp\" android:background=\"#00BB86FC\" android:src=\"@drawable/arrow_right_drop_circle_outline\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintEnd_toStartOf=\"@+id/iB_stop\" app:layout_constraintTop_toTopOf=\"parent\" /\u003e \u003cImageButton android:id=\"@+id/iB_stop\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:background=\"#00BB86FC\" android:src=\"@drawable/stop_circle_outline\" app:layout_constraintBottom_toBottomOf=\"@+id/iB_lastPiece\" app:layout_constraintEnd_toStartOf=\"@+id/iB_nextPlay\" app:layout_constraintTop_toTopOf=\"@+id/iB_lastPiece\" /\u003e \u003cImageButton android:id=\"@+id/iB_nextPlay\" android:layout_width=\"60dp\" android:layout_height=\"60dp\" android:background=\"#00BB86FC\" android:src=\"@drawable/arrow_right_thin_circle_outline\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintEnd_toEndOf=\"parent\" app:layout_constraintTop_toTopOf=\"parent\" /\u003e \u003c/androidx.constraintlayout.widget.ConstraintLayout\u003e ","date":"2021-05-11","objectID":"/music_box/:5:1","tags":["Android","BroadcastReceivers","Java"],"title":"基于广播和服务功能的音乐播放器","uri":"/music_box/"},{"categories":["Android"],"content":"4.2、MesFragment.java（仅展示在原来recyclerView之后的内容） public class MesFragment extends Fragment implements View.OnClickListener { // 获取界面中显示歌曲标题、作者文本框 TextView title, author; // 播放/暂停、停止按钮、上一曲按钮，下一曲按钮 ImageButton play, stop, next, last; ActivityReceiver activityReceiver; public static final String CTL_ACTION = \"org.xr.action.CTL_ACTION\"; public static final String UPDATE_ACTION = \"org.xr.action.UPDATE_ACTION\"; // 定义音乐的播放状态，0x11代表没有播放；0x12代表正在播放；0x13代表暂停 int status = 0x11; String[] titleStrs = new String[]{\"Inside the Lines\", \"Landslide\", \"Life\", \"Symphony\", \"The Spectre\"}; String[] authorStrs = new String[]{\"Mike Perry\", \"Headhunterz\", \"Tobu\", \"Clean Bandit\", \"Alan Walker\"}; // 获取程序界面界面中的两个按钮 play = (ImageButton) view.findViewById(R.id.iB_playPause); stop = (ImageButton) view.findViewById(R.id.iB_stop); title = (TextView) view.findViewById(R.id.tV_musicName); author = (TextView) view.findViewById(R.id.tV_singerName); //获取上一首、下一首按钮 last = (ImageButton) view.findViewById(R.id.iB_lastPiece); next = (ImageButton) view.findViewById(R.id.iB_nextPlay); // 为两个按钮的单击事件添加监听器 play.setOnClickListener(this); stop.setOnClickListener(this); //为上一首、下一首按钮添加监听器 last.setOnClickListener(this); next.setOnClickListener(this); activityReceiver = new ActivityReceiver(); // 创建IntentFilter IntentFilter filter = new IntentFilter(); // 指定BroadcastReceiver监听的Action filter.addAction(UPDATE_ACTION); // 注册BroadcastReceiver getActivity().registerReceiver(activityReceiver, filter); Intent intent = new Intent(getActivity(), MusicService.class); // 启动后台Service getActivity().startService(intent); return view; } // 自定义的BroadcastReceiver，负责监听从Service传回来的广播 public class ActivityReceiver extends BroadcastReceiver { @Override public void onReceive(Context context, Intent intent) { // 获取Intent中的update消息，update代表播放状态 int update = intent.getIntExtra(\"update\", -1); // 获取Intent中的current消息，current代表当前正在播放的歌曲 int current = intent.getIntExtra(\"current\", -1); if (current \u003e= 0) { title.setText(titleStrs[current]); author.setText(authorStrs[current]); } switch (update) { case 0x11: play.setImageResource(R.drawable.arrow_right_drop_circle_outline); status = 0x11; break; //控制系统进入播放状态 case 0x12: // 播放状态下设置使用暂停图标 play.setImageResource(R.drawable.pause_circle_outline); // 设置当前状态 status = 0x12; break; // 控制系统进入暂停状态 case 0x13: // 暂停状态下设置使用播放图标 play.setImageResource(R.drawable.arrow_right_drop_circle_outline); // 设置当前状态 status = 0x13; break; } } } @Override public void onClick(View source) { // 创建Intent Intent intent = new Intent(\"org.xr.action.CTL_ACTION\"); switch (source.getId()) { // 按下播放/暂停按钮 case R.id.iB_playPause: intent.putExtra(\"control\", 1); break; // // 按下停止按钮 case R.id.iB_stop: intent.putExtra(\"control\", 2); break; // 按下上一曲按钮 case R.id.iB_lastPiece: intent.putExtra(\"control\", 3); break; // 按下下一曲按钮 case R.id.iB_nextPlay: intent.putExtra(\"control\", 4); break; } // 发送广播，将被Service组件中的BroadcastReceiver接收到 getActivity().sendBroadcast(intent); } } ","date":"2021-05-11","objectID":"/music_box/:5:2","tags":["Android","BroadcastReceivers","Java"],"title":"基于广播和服务功能的音乐播放器","uri":"/music_box/"},{"categories":["Android"],"content":"4.3、MusicService.java（播放音乐服务） public class MusicService extends Service { MyReceiver serviceReceiver; AssetManager am; String[] musics = new String[]{\"insidethelines.mp3\", \"landslide.mp3\", \"life.mp3\", \"symphony.mp3\", \"thespectre.mp3\"}; // String[] musics = new String[] {\"liangliang.mp3\", \"wuhangya.mp3\",\"three.mp3\" ,\"four.mp3\",\"fif.mp3\"}; MediaPlayer mPlayer; // 当前的状态，0x11代表没有播放；0x12代表正在播放；0x13代表暂停 int status = 0x11; // 记录当前正在播放的音乐 int current = 0; @Override public IBinder onBind(Intent intent) { return null; } @Override public void onCreate() { super.onCreate(); am = getAssets(); // 创建BroadcastReceiver serviceReceiver = new MyReceiver(); // 创建IntentFilter IntentFilter filter = new IntentFilter(); filter.addAction(MesFragment.CTL_ACTION); registerReceiver(serviceReceiver, filter); // 创建MediaPlayer mPlayer = new MediaPlayer(); // 为MediaPlayer播放完成事件绑定监听器 mPlayer.setOnCompletionListener(new OnCompletionListener() // ① { @Override public void onCompletion(MediaPlayer mp) { current++; if (current \u003e= 5) { current = 0; } //发送广播通知Activity更改文本框 Intent sendIntent = new Intent(MesFragment.UPDATE_ACTION); sendIntent.putExtra(\"current\", current); // 发送广播，将被Activity组件中的BroadcastReceiver接收到 sendBroadcast(sendIntent); // 准备并播放音乐 prepareAndPlay(musics[current]); } }); } public class MyReceiver extends BroadcastReceiver { @Override public void onReceive(final Context context, Intent intent) { int control = intent.getIntExtra(\"control\", -1); switch (control) { // 播放或暂停 case 1: // 原来处于没有播放状态 if (status == 0x11) { // 准备并播放音乐 prepareAndPlay(musics[current]); status = 0x12; } // 原来处于播放状态 else if (status == 0x12) { // 暂停 mPlayer.pause(); // 改变为暂停状态 status = 0x13; } // 原来处于暂停状态 else if (status == 0x13) { // 播放 mPlayer.start(); // 改变状态 status = 0x12; } break; // 停止声音 case 2: // 如果原来正在播放或暂停 if (status == 0x12 || status == 0x13) { // 停止播放 current++; mPlayer.stop(); status = 0x11; } case 3: current--; if (current \u003c 0) { current = 4; } if (status == 0x11 || status == 0x13) { prepareAndPlay(musics[current]); mPlayer.stop(); status = 0x11; } else { prepareAndPlay(musics[current]); status = 0x12; } break; case 4: current++; if (current \u003e 4) { current = 0; } if (status == 0x11 || status == 0x13) { prepareAndPlay(musics[current]); mPlayer.stop(); status = 0x11; } else { prepareAndPlay(musics[current]); status = 0x12; } break; } // 广播通知Activity更改图标、文本框 Intent sendIntent = new Intent(MesFragment.UPDATE_ACTION); sendIntent.putExtra(\"update\", status); sendIntent.putExtra(\"current\", current); // 发送广播，将被Activity组件中的BroadcastReceiver接收到 sendBroadcast(sendIntent); } } private void prepareAndPlay(String music) { try { // 打开指定音乐文件 AssetFileDescriptor afd = am.openFd(music); mPlayer.reset(); // 使用MediaPlayer加载指定的声音文件。 mPlayer.setDataSource(afd.getFileDescriptor(), afd.getStartOffset(), afd.getLength()); // 准备声音 mPlayer.prepare(); // 播放 mPlayer.start(); } catch (IOException e) { e.printStackTrace(); } } } ","date":"2021-05-11","objectID":"/music_box/:5:3","tags":["Android","BroadcastReceivers","Java"],"title":"基于广播和服务功能的音乐播放器","uri":"/music_box/"},{"categories":["Android"],"content":"5、最终效果 ","date":"2021-05-11","objectID":"/music_box/:6:0","tags":["Android","BroadcastReceivers","Java"],"title":"基于广播和服务功能的音乐播放器","uri":"/music_box/"},{"categories":["Android"],"content":"5.1、初始状态，暂停未进行播放 ","date":"2021-05-11","objectID":"/music_box/:6:1","tags":["Android","BroadcastReceivers","Java"],"title":"基于广播和服务功能的音乐播放器","uri":"/music_box/"},{"categories":["Android"],"content":"5.2、点击播放按钮，按钮变为等待暂停状态，音乐播放 ","date":"2021-05-11","objectID":"/music_box/:6:2","tags":["Android","BroadcastReceivers","Java"],"title":"基于广播和服务功能的音乐播放器","uri":"/music_box/"},{"categories":["Android"],"content":"5.3、点击上一曲按钮，保存当前状态（播放或暂停）切换到上一曲 ","date":"2021-05-11","objectID":"/music_box/:6:3","tags":["Android","BroadcastReceivers","Java"],"title":"基于广播和服务功能的音乐播放器","uri":"/music_box/"},{"categories":["Android"],"content":"5.4、点击下一曲按钮，保存当前状态（播放或暂停）切换到下一曲 ","date":"2021-05-11","objectID":"/music_box/:6:4","tags":["Android","BroadcastReceivers","Java"],"title":"基于广播和服务功能的音乐播放器","uri":"/music_box/"},{"categories":["Android"],"content":"5.5、点击暂停则停止播放，点击继续则从刚才的位置继续播放，点击停止按钮停止播放 ","date":"2021-05-11","objectID":"/music_box/:6:5","tags":["Android","BroadcastReceivers","Java"],"title":"基于广播和服务功能的音乐播放器","uri":"/music_box/"},{"categories":["Android"],"content":"6、结语 本次实验感想颇多，在不同的学习渠道，加上百度搜索，请教同学最终仅仅完成了一个初步的成果。后续需要改进和维护的东西还有很多很多。音乐的图标需要更换，切换歌曲应该随之切换图片，recyclerView的数据并没有与歌曲一同绑定。本人水平一般，能力有限，精力也有限，随着时间的推移慢慢完善吧。 ","date":"2021-05-11","objectID":"/music_box/:7:0","tags":["Android","BroadcastReceivers","Java"],"title":"基于广播和服务功能的音乐播放器","uri":"/music_box/"},{"categories":["Android"],"content":"7、Github源码 https://github.com/KKKPJSKEY/Weixin_Meterial_Design 注： 源码中为了实现某些功能，减少大面积重命名文件的情况，信息和朋友页面进行对调（id），朋友改为音乐（title和icon），请读者注意！ 在下次实验完成前，master分支和本次实验分支（Music_Box）会有一样的本次实验代码，下次实验完成后会新创建分支，保存新实验的代码啊，更新master分支代码 ","date":"2021-05-11","objectID":"/music_box/:8:0","tags":["Android","BroadcastReceivers","Java"],"title":"基于广播和服务功能的音乐播放器","uri":"/music_box/"},{"categories":["Android"],"content":"使用Meterial_Design的BottomNavigationView组件构建底类似微信的四个底部导航栏的切换","date":"2021-04-04","objectID":"/bottom_navigation/","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Android"],"content":"类微信界面设计 使用Meterial_Design的BottomNavigationView组件构建底类似微信的四个底部导航栏的切换 ","date":"2021-04-04","objectID":"/bottom_navigation/:0:0","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Android"],"content":"1、原型图 顶部一个导航栏，，加号按钮的下拉菜单，下面是四个Tab页面，点击下方按钮，每个页面的上下两个导航栏之间的内容会随之发生变化，同时点击状态下的图标样式也随之变化。 ","date":"2021-04-04","objectID":"/bottom_navigation/:1:0","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Android"],"content":"2、需求 请根据课堂展示结果设计APP门户界面，包含4个tab切换效果。 ","date":"2021-04-04","objectID":"/bottom_navigation/:2:0","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Android"],"content":"3、思路 为了使用上课讲到的Material Design设计模式，我们分别使用了TopAppBar，一个ButtomNavigationMenu以及四个Fragment。同时采用了java语言作为点击按钮后界面内容的改变控制 ","date":"2021-04-04","objectID":"/bottom_navigation/:3:0","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Android"],"content":"4、代码 ","date":"2021-04-04","objectID":"/bottom_navigation/:4:0","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Android"],"content":"4.1、创建一个Empty项目 ","date":"2021-04-04","objectID":"/bottom_navigation/:4:1","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Android"],"content":"4.2、页面-activity_main.xml-四个界面的主（公共）组件 根据官方文档，导航栏有四种模式，auto、labeled、selected、unlabeled,对应关系如下 参数 解释 auto 当有3个或更少的项目时，标签的行为为“labeled”；当有4个或更多的项目时，标签的行为为“selected”。 labeled 标签显示在所有导航项目上 selected（default） 标签显示在所选的导航项目上。（默认） unlabeled 标签未显示在任何导航项目上。 \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003candroidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:visibility=\"visible\" tools:context=\".MainActivity\"\u003e \u003cLinearLayout android:id=\"@+id/linearLayout\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:orientation=\"vertical\" app:layout_constraintBottom_toTopOf=\"@+id/bottom_navigation_menu\" app:layout_constraintEnd_toEndOf=\"parent\" app:layout_constraintStart_toStartOf=\"parent\" app:layout_constraintTop_toTopOf=\"parent\"\u003e \u003cFrameLayout android:id=\"@+id/frameLayout\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"\u003e \u003c/FrameLayout\u003e \u003c/LinearLayout\u003e \u003ccom.google.android.material.bottomnavigation.BottomNavigationView android:id=\"@+id/bottom_navigation_menu\" style=\"@style/Widget.MaterialComponents.BottomNavigationView.Colored\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" app:labelVisibilityMode=\"labeled\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintEnd_toEndOf=\"parent\" app:layout_constraintHorizontal_bias=\"1.0\" app:layout_constraintStart_toStartOf=\"parent\" app:menu=\"@menu/bottom_navigation_menu\" /\u003e \u003c/androidx.constraintlayout.widget.ConstraintLayout\u003e ","date":"2021-04-04","objectID":"/bottom_navigation/:4:2","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Android"],"content":"4.3、页面-fragment_ctt.xml-联系人组件（朋友、信息、设置都差不多，不再过多展示，GitHub源码地址在本文最后） \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cFrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" tools:context=\".MesFragment\"\u003e \u003cTextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:text=\"@string/cttText\" /\u003e \u003c/FrameLayout\u003e ","date":"2021-04-04","objectID":"/bottom_navigation/:4:3","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Android"],"content":"4.4、页面-bottom_navigation_menu.xml-底部导航栏组件 \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cmenu xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\"\u003e \u003citem android:id=\"@+id/page_Mes\" android:enabled=\"true\" android:icon=\"@drawable/tab_weixin_normal\" android:title=\"@string/message\" /\u003e \u003citem android:id=\"@+id/page_Fri\" android:enabled=\"true\" android:icon=\"@drawable/tab_find_frd_normal\" android:title=\"@string/friends\" /\u003e \u003citem android:id=\"@+id/page_Ctt\" android:enabled=\"true\" android:icon=\"@drawable/tab_address_normal\" android:title=\"@string/contacts\" /\u003e \u003citem android:id=\"@+id/page_Set\" android:enabled=\"true\" android:icon=\"@drawable/tab_settings_normal\" android:title=\"@string/settings\" /\u003e \u003c/menu\u003e ","date":"2021-04-04","objectID":"/bottom_navigation/:4:4","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Android"],"content":"4.5、页面-color.xml-颜色配置文件 \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003cresources\u003e \u003ccolor name=\"purple_200\"\u003e#FFBB86FC\u003c/color\u003e \u003ccolor name=\"purple_500\"\u003e#FF6200EE\u003c/color\u003e \u003ccolor name=\"purple_700\"\u003e#FF3700B3\u003c/color\u003e \u003ccolor name=\"teal_200\"\u003e#FF03DAC5\u003c/color\u003e \u003ccolor name=\"teal_700\"\u003e#FF018786\u003c/color\u003e \u003ccolor name=\"black\"\u003e#FF000000\u003c/color\u003e \u003ccolor name=\"white\"\u003e#FFFFFFFF\u003c/color\u003e \u003c/resources\u003e ","date":"2021-04-04","objectID":"/bottom_navigation/:4:5","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Android"],"content":"4.6、页面-strings.xml-文字字符串配置文件 \u003cresources\u003e \u003c!-- app标题--\u003e \u003cstring name=\"app_name\"\u003e微信80.0\u003c/string\u003e \u003c!-- 导航栏标题--\u003e \u003cstring name=\"message\"\u003e信息\u003c/string\u003e \u003cstring name=\"friends\"\u003e朋友\u003c/string\u003e \u003cstring name=\"contacts\"\u003e联系人\u003c/string\u003e \u003cstring name=\"settings\"\u003e设置\u003c/string\u003e \u003c!-- 界面二级标题--\u003e \u003cstring name=\"mesText\"\u003e这是信息页面！\u003c/string\u003e \u003cstring name=\"friText\"\u003e这是朋友页面！\u003c/string\u003e \u003cstring name=\"cttText\"\u003e这是联系人页面！\u003c/string\u003e \u003cstring name=\"setText\"\u003e这是设置页面！\u003c/string\u003e \u003c!-- TODO: Remove or change this placeholder text --\u003e \u003cstring name=\"hello_blank_fragment\"\u003eHello blank fragment\u003c/string\u003e \u003c/resources\u003e ","date":"2021-04-04","objectID":"/bottom_navigation/:4:6","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Android"],"content":"4.7、页面-theme.xml-主题配置文件 \u003cresources xmlns:tools=\"http://schemas.android.com/tools\"\u003e \u003c!-- Base application theme. --\u003e \u003cstyle name=\"Theme.Bottom_Navigation\" parent=\"Theme.MaterialComponents.DayNight.DarkActionBar\"\u003e \u003c!-- Primary brand color. --\u003e \u003citem name=\"colorPrimary\"\u003e@color/purple_500\u003c/item\u003e \u003citem name=\"colorPrimaryVariant\"\u003e@color/purple_700\u003c/item\u003e \u003citem name=\"colorOnPrimary\"\u003e@color/white\u003c/item\u003e \u003c!-- Secondary brand color. --\u003e \u003citem name=\"colorSecondary\"\u003e@color/teal_200\u003c/item\u003e \u003citem name=\"colorSecondaryVariant\"\u003e@color/teal_700\u003c/item\u003e \u003citem name=\"colorOnSecondary\"\u003e@color/black\u003c/item\u003e \u003c!-- Status bar color. --\u003e \u003citem name=\"android:statusBarColor\" tools:targetApi=\"l\"\u003e?attr/colorPrimaryVariant\u003c/item\u003e \u003c!-- Customize your theme here. --\u003e \u003c/style\u003e \u003c/resources\u003e ","date":"2021-04-04","objectID":"/bottom_navigation/:4:7","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Android"],"content":"4.8后台-MainActivity.java-控制逻辑代码 package cn.edu.hubu.lhy.bottom_navigation; import androidx.annotation.NonNull; import androidx.appcompat.app.AppCompatActivity; import androidx.fragment.app.Fragment; import androidx.fragment.app.FragmentManager; import androidx.fragment.app.FragmentTransaction; import android.os.Bundle; import android.view.Menu; import android.view.MenuInflater; import android.view.MenuItem; import android.widget.Toast; import com.google.android.material.bottomnavigation.BottomNavigationView; public class MainActivity extends AppCompatActivity { private MesFragment mesFragment = null; private FriFragment friFragment = null; private CttFragment cttFragment = null; private SetFragment setFragment = null; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); BottomNavigationView bottom_navigation_menu = (BottomNavigationView) findViewById(R.id.bottom_navigation_menu); bottom_navigation_menu.setOnNavigationItemSelectedListener(mOnNavigationItemSelectedListener); mesFragment = new MesFragment(); changeFrameLayout(\"您好\", mesFragment); } private BottomNavigationView.OnNavigationItemSelectedListener mOnNavigationItemSelectedListener = new BottomNavigationView.OnNavigationItemSelectedListener() { @Override public boolean onNavigationItemSelected(@NonNull MenuItem item) { switch (item.getItemId()) { case R.id.page_Mes: if (mesFragment == null) { mesFragment = new MesFragment(); } changeFrameLayout(\"信息\", mesFragment); return true; case R.id.page_Fri: if (friFragment == null) { friFragment = new FriFragment(); } changeFrameLayout(\"朋友\", friFragment); return true; case R.id.page_Ctt: if (cttFragment == null) { cttFragment = new CttFragment(); } changeFrameLayout(\"联系人\", cttFragment); return true; case R.id.page_Set: if (setFragment == null) { setFragment = new SetFragment(); } changeFrameLayout(\"设置\", setFragment); return true; } return false; } }; /** * 使用Fragment组件替换原界面上的FragLayout * * @param string 提示信息 * @param fraGment 要替换成的fragment */ private void changeFrameLayout(String string, Fragment fraGment) { //弹窗 Toast.makeText(MainActivity.this, string, Toast.LENGTH_SHORT).show(); //每一次都要重新创建事务和管理工具 FragmentManager fagmentManager = getSupportFragmentManager(); FragmentTransaction fragmentTransaction = fagmentManager.beginTransaction(); //替换操作 fragmentTransaction.replace(R.id.frameLayout, fraGment); //事务具有原子性，类似数据库，每一次操作完成需要提交操作 fragmentTransaction.commit(); } } ","date":"2021-04-04","objectID":"/bottom_navigation/:4:8","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Android"],"content":"4.9、后台-CttFragment.java-联系人组件代码 创建Fragment自动生成的构造方法、newInstance()、onCreate()方法啊需要禁掉不然会产生一些问题 package cn.edu.hubu.lhy.bottom_navigation; import android.os.Bundle; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import androidx.fragment.app.Fragment; /** * A simple {@link Fragment} subclass. * Use the {@link FriFragment#newInstance} factory method to * create an instance of this fragment. */ public class FriFragment extends Fragment { @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { // Inflate the layout for this fragment return inflater.inflate(R.layout.fragment_fri, container, false); } } ","date":"2021-04-04","objectID":"/bottom_navigation/:4:9","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Android"],"content":"5、最终效果 ","date":"2021-04-04","objectID":"/bottom_navigation/:5:0","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Android"],"content":"5.1、信息页面 ","date":"2021-04-04","objectID":"/bottom_navigation/:5:1","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Android"],"content":"5.2、朋友界面 ","date":"2021-04-04","objectID":"/bottom_navigation/:5:2","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Android"],"content":"5.3、联系人界面 ","date":"2021-04-04","objectID":"/bottom_navigation/:5:3","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Android"],"content":"5.4、设置界面 ","date":"2021-04-04","objectID":"/bottom_navigation/:5:4","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Android"],"content":"6、Github源码 https://github.com/KKKPJSKEY/Weixin_Meterial_Design ","date":"2021-04-04","objectID":"/bottom_navigation/:6:0","tags":["Android","Material-Design","BottomNavigation"],"title":"类微信界面设计","uri":"/bottom_navigation/"},{"categories":["Back"],"content":"详细介绍Mybatis中用到的设计模式","date":"2021-05-09","objectID":"/mybatis-designmode/","tags":["Back","Mybatis","DesignMode"],"title":"Mybatis中用到的设计模式","uri":"/mybatis-designmode/"},{"categories":["Back"],"content":"Mybatis中用到的设计模式 Builder模式，例如SqlSessionFactoryBuilder、XMLConfigBuilder、XMLMapperBuilder、XMLStatementBuilder、CacheBuilder； 工厂模式，例如SqlSessionFactory、ObjectFactory、MapperProxyFactory； 单例模式，例如ErrorContext和LogFactory； 代理模式，Mybatis实现的核心，比如MapperProxy、ConnectionLogger，用的jdk的动态代理；还有executor.loader包使用了cglib或者javassist达到延迟加载的效果； 组合模式，例如SqlNode和各个子类ChooseSqlNode等； 模板方法模式，例如BaseExecutor和SimpleExecutor，还有BaseTypeHandler和所有的子类例如IntegerTypeHandler； 适配器模式，例如Log的Mybatis接口和它对jdbc、log4j等各种日志框架的适配实现； 装饰者模式，例如Cache包中的cache.decorators子包中等各个装饰者的实现； 迭代器模式，例如迭代器模式PropertyTokenizer； ","date":"2021-05-09","objectID":"/mybatis-designmode/:0:0","tags":["Back","Mybatis","DesignMode"],"title":"Mybatis中用到的设计模式","uri":"/mybatis-designmode/"},{"categories":["Android","note"],"content":"记录Android开发笔记","date":"2021-05-01","objectID":"/android-note/","tags":["Android","note"],"title":"Android开发笔记","uri":"/android-note/"},{"categories":["Android","note"],"content":"Android开发笔记 ","date":"2021-05-01","objectID":"/android-note/:0:0","tags":["Android","note"],"title":"Android开发笔记","uri":"/android-note/"},{"categories":["Android","note"],"content":"Android5.0常用颜色属性说明 在使用Eclipse的时代，我们很少去在style文件给整个应用或者Activity去设定颜色，那是因为即使设置也不会提升用户的视觉效果。但是材料设计号称让没有设计功底的人也能做出漂亮的App，那我们今天就来看看在Androi5.0中常用的颜色属性。 我们可以先定义一个style，然后在这个style中设定每一个Activity或者整个App的颜色，最后在清单文件中来给某个Activity设置主题即可。代码如下： \u003cstyle name=\"AppTheme.NoActionBar\"\u003e \u003c!--状态栏颜色--\u003e \u003citem name=\"colorPrimaryDark\"\u003e@color/colorPrimaryDark\u003c/item\u003e \u003c!--控制各个控件被选中时的颜色--\u003e \u003citem name=\"colorAccent\"\u003e@color/colorAccent\u003c/item\u003e \u003c!--页面背景色--\u003e \u003citem name=\"android:windowBackground\"\u003e@color/windowBackg\u003c/item\u003e \u003c!--底部导航栏颜色--\u003e \u003citem name=\"android:navigationBarColor\"\u003e@color/navigationColor\u003c/item\u003e \u003c!--Appbar背景色--\u003e \u003citem name=\"android:colorPrimary\"\u003e@color/colorPrimary\u003c/item\u003e \u003c!--ToolBar上的Title颜色--\u003e \u003citem name=\"android:textColorPrimary\"\u003e@color/textColorPrimary\u003c/item\u003e \u003c!--各个控制控件的默认颜色--\u003e \u003citem name=\"android:colorControlNormal\"\u003e@color/colorControlNormal\u003c/ item\u003e \u003c/style\u003e 最后再来一张图详细说明每个item设定的到底是哪里的颜色： ","date":"2021-05-01","objectID":"/android-note/:1:0","tags":["Android","note"],"title":"Android开发笔记","uri":"/android-note/"},{"categories":["Android","note"],"content":"ConstraintLayout基本使用之toLeftOf 、toTopOf、toRightOf、toBottomOf 关于ConstraintLayout的博客、文章想必大家已经见过很多了，都是很全面的，今天这篇博客主要将ConstraintLayout的 layout_constraintLeft_toLeftOf layout_constraintLeft_toRightOf layout_constraintTop_toTopOf ... 以上到底怎么理解呢？下面我将通过图片+文字来解释。 现在假设屏幕中间有个长宽为100dp的红色正方形，屏幕左上方有个宽高为50dp的黑色正方形，如下: 接下来我们一个一个试试这些参数吧! 1、layout_constraintLeft_toLeftOf(可以看出黑色正方形左边和红色正方形左边对齐) 2、layout_constraintLeft_toRightOf(黑色正方形的左边和红色正方形的右边对齐) 3、layout_constraintRight_toLeftOf(黑右对齐红左) 4、layout_constraintRight_toRightOf(黑右对齐红右) 剩余四个: layout_constraintTop_toTopOf layout_constraintTop_toBottomOf layout_constraintBottom_toTopOf layout_constraintBottom_toBottomOf 也是同理。 让我们看一下这个参数的统一命名:layout_constraintA_toBOf， 也即代表当前布局的A方向，对齐目标布局的B方向 ","date":"2021-05-01","objectID":"/android-note/:2:0","tags":["Android","note"],"title":"Android开发笔记","uri":"/android-note/"},{"categories":["Android","note"],"content":"Android 沉浸式标题栏设置，顶部view到状态栏 Android 沉浸式标题栏设置，顶部view到状态栏 布局xml文件： \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e \u003candroid.support.constraint.ConstraintLayout xmlns:android=“http://schemas.android.com/apk/res/android\" xmlns:app=“http://schemas.android.com/apk/res-auto\" android:layout_width=“match_parent” android:layout_height=“match_parent”\u003e … \u003c/android.support.constraint.ConstraintLayout\u003e activity AndroidManifest设置 \u003cactivity android:name=\"....xxActivity\" android:screenOrientation=\"portrait\" android:theme=\"@style/AppTheme.imgFullScreen\" android:windowSoftInputMode=\"adjustPan\"/\u003e stayles.xml 添加style \u003cstyle name=\"AppTheme.imgFullScreen\"\u003e \u003citem name=\"android:windowTranslucentStatus\"\u003efalse\u003c/item\u003e \u003citem name=\"android:windowTranslucentNavigation\"\u003efalse\u003c/item\u003e \u003citem name=\"android:statusBarColor\"\u003e@android:color/transparent\u003c/item\u003e \u003c/style\u003e xxActivity添加 val decorView = window.decorView ​ val option = (View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN ​ or View.SYSTEM_UI_FLAG_LAYOUT_STABLE) ​ decorView.systemUiVisibility = option ​ window.statusBarColor = Color.TRANSPARENT 效果： ","date":"2021-05-01","objectID":"/android-note/:3:0","tags":["Android","note"],"title":"Android开发笔记","uri":"/android-note/"},{"categories":["Android","note"],"content":"Android去除顶部默认的标题栏 当我们在Android Studio中创建一个新的Android项目时，会发现顶部有一个标题栏。我们有的时候并不需要这个标题栏，因此我们就需要把它去掉。 在Android Studio中展开Project模块，会看到里面是一个由文件和文件夹构成的树形图。打开里面的app-\u003emanifests-\u003eAndroidManifest.xml文件，然后找到application标签的android:theme属性，把它的值改为”@style/Theme.AppCompat.NoActionBar”，这样就可以解决问题了。 ","date":"2021-05-01","objectID":"/android-note/:4:0","tags":["Android","note"],"title":"Android开发笔记","uri":"/android-note/"},{"categories":["Android","note"],"content":"Android注册服务 broadcastReceiver使用时需要在AndroidManifest.xml注册格式为 package=\"com\"\u003e \u003cactivity android:name=\".MainActivity\"\u003e …… \u003c/activity\u003e \u003cservice android:name=\".XXX\" /\u003e 此处.目录取决于上面package导入的目录 ","date":"2021-05-01","objectID":"/android-note/:5:0","tags":["Android","note"],"title":"Android开发笔记","uri":"/android-note/"},{"categories":["Android","note"],"content":"end ","date":"2021-05-01","objectID":"/android-note/:6:0","tags":["Android","note"],"title":"Android开发笔记","uri":"/android-note/"},{"categories":["Android"],"content":"详细解释Android中drawable和drawable-v24的区别","date":"2021-04-30","objectID":"/android-diff-drawable-v24/","tags":["Android","drawable","drawable-v24"],"title":"关于drawable和drawable-v24","uri":"/android-diff-drawable-v24/"},{"categories":["Android"],"content":"关于drawable和drawable-v24 今天调试一个软件，老是找不到资源 android.content.res.Resources$NotFoundException: Resource 断点调试可以看到是有的，当然项目的目录里面也有该资源， 最后找到原因是我将图片资源放到drawable-v24里面，导致7.0以下不能找到图片 不同的drawable文件夹用于为设备兼容性和不同的Android版本提供不同的屏幕密度。 断点调试可以看到是有的，当然项目的目录里面也有该资源， 最后找到原因是我将图片资源放到drawable-v24里面，导致7.0以下不能找到图片 不同的drawable文件夹用于为设备兼容性和不同的Android版本提供不同的屏幕密度。 7.0的关于图片资源的改变 从Android API 24（安卓7.0）开始，自定义Drawables类可以最终在XML中使用（仅在您的包中）。 8.0的关于图片资源的改变 API 26（安卓8.0）中添加了VectorDrawable自适应图标 更多解释 ","date":"2021-04-30","objectID":"/android-diff-drawable-v24/:0:0","tags":["Android","drawable","drawable-v24"],"title":"关于drawable和drawable-v24","uri":"/android-diff-drawable-v24/"},{"categories":["Android"],"content":"Android应用使用Kolin开发，解决Kolin：A problem occurred evaluating project ':app'.","date":"2021-04-20","objectID":"/android-kolin/","tags":["Android","Kolin","AndroidStudio"],"title":"Kolin：A problem occurred evaluating project ':app'.","uri":"/android-kolin/"},{"categories":["Android"],"content":"Kolin：A problem occurred evaluating project ‘:app’. 报错 Build file 'C:\\All_Code\\AS_Code\\Bottom-Navigation\\Material-BottomNavigation\\app\\build.gradle' line: 2 A problem occurred evaluating project ':app'. \u003e java.lang.ExceptionInInitializerError (no error message) 在项目根目录下的app目录（可能被改为项目名）下的build.gradle文件中发现原来的Kolin插件使用了$，我并未配置Kolin环境，因此找不到 dependencies { classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\" } 访问Gradle官网仓库，我修改为最新版本 dependencies { classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.0-M2\" } 编译运行OK ","date":"2021-04-20","objectID":"/android-kolin/:0:0","tags":["Android","Kolin","AndroidStudio"],"title":"Kolin：A problem occurred evaluating project ':app'.","uri":"/android-kolin/"},{"categories":["Android"],"content":"解决Android App界面与顶部状态栏重叠遮盖问题的方法","date":"2021-03-22","objectID":"/android-topbar-cover/","tags":["Android","LinearLayout","XML"],"title":"Android App界面与顶部状态栏重叠遮盖问题","uri":"/android-topbar-cover/"},{"categories":["Android"],"content":"Android App界面与顶部状态栏重叠遮盖问题 问题情况截图如下： 觉得toolbar默认高度太高，给toolbar设了一个固定值。测试时发现在4.4系统上会出现与状态栏重叠的现象。给toolbar设了个margin，但是在7.0的系统上又会出现间隙。最后发现只需要在父view里加上下面两行就解决了。 android:clipToPadding=“true” android:fitsSystemWindows=“true” 解释一下上面两个布局属性的意思： android:clipToPadding 定义布局间是否有间距 android:fitsSystemWindows=“true” 意思就是设置应用布局时是否考虑系统窗口布局；如果为true，将调整系统窗口布局以适应你自定义的布局。比如系统有状态栏，应用也有状态栏时。实际就是通过在 View 上设置和系统窗口一样高度的边框（padding）来确保你的内容不会出现到系统窗口下面。 或只 在layout的主布局中加入 android:fitsSystemWindows=“true” 如下： \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\" android:fitsSystemWindows=\"true\" tools:context=\".MainActivity\"\u003e \u003c!-- 布局内容...... --\u003e \u003c/LinearLayout\u003e ","date":"2021-03-22","objectID":"/android-topbar-cover/:0:0","tags":["Android","LinearLayout","XML"],"title":"Android App界面与顶部状态栏重叠遮盖问题","uri":"/android-topbar-cover/"},{"categories":["Android"],"content":"解决AndroidStudio开发Android-Java应用的网络问题","date":"2021-03-15","objectID":"/android-net/","tags":["Android","AndroidStudio","Java","Net"],"title":"AndroidStudio网络问题","uri":"/android-net/"},{"categories":["Android"],"content":"AndroidStudio网络问题 ","date":"2021-03-15","objectID":"/android-net/:0:0","tags":["Android","AndroidStudio","Java","Net"],"title":"AndroidStudio网络问题","uri":"/android-net/"},{"categories":["Android"],"content":"android studio 教你修改Maven仓库地址为国内镜像 android studio 默认国外maven 这我们更改为阿里的maven 打开build.gradle 添加或者修改 allprojects { repositories { maven { url 'https://maven.aliyun.com/repository/google' } maven{ url 'https://maven.aliyun.com/repository/jcenter'} } }修改buildscript { repositories { maven { url 'https://maven.aliyun.com/repository/google' } maven{ url 'https://maven.aliyun.com/repository/jcenter'} } dependencies { classpath 'com.android.tools.build:gradle:3.2.1' } } 这里有阿里的仓库http://maven.aliyun.com/mvn/view`可以自行查看和替换，速度都比国外快 如图所示 ","date":"2021-03-15","objectID":"/android-net/:1:0","tags":["Android","AndroidStudio","Java","Net"],"title":"AndroidStudio网络问题","uri":"/android-net/"},{"categories":["Android"],"content":"Android Studio released aar to Jcenter, plug-in could not be found 导入项目控制台报错 Unknown host ‘raw.githubusercontent.com’. You may need to adjust the proxy settings in Gradle. 似乎raw.githubusercontent.com被dns污染了，使用站长工具ping改host做前置代理也无法访问，使用站长工具查ip改host也识别不到，甚至用了魔法，可能AS自己有网络通讯，使用代理依然无效。被迫使用下面的办法（其实可以直接删除，不影响项目运行，据说是文档文件）,该方法适用所有此域名导包问题 获取源码 有大佬上传到GitHub：installv1.gradle、bintrayv1.gradle，或者使用魔法，浏览器访问（我只使用了这一种办法成功访问了）网址获取 bintrayv1.gradle apply plugin: 'com.jfrog.bintray' version = libraryVersion if (project.hasProperty(\"android\")) { // Android libraries task sourcesJar(type: Jar) { classifier = 'sources' from android.sourceSets.main.java.srcDirs } task javadoc(type: Javadoc) { source = android.sourceSets.main.java.srcDirs classpath += project.files(android.getBootClasspath().join(File.pathSeparator)) } } else { // Java libraries task sourcesJar(type: Jar, dependsOn: classes) { classifier = 'sources' from sourceSets.main.allSource } } task javadocJar(type: Jar, dependsOn: javadoc) { classifier = 'javadoc' from javadoc.destinationDir } artifacts { archives javadocJar archives sourcesJar } // Bintray Properties properties = new Properties() properties.load(project.rootProject.file('local.properties').newDataInputStream()) bintray { user = properties.getProperty(\"bintray.user\") key = properties.getProperty(\"bintray.apikey\") configurations = ['archives'] pkg { repo = bintrayRepo name = bintrayName desc = libraryDescription websiteUrl = siteUrl vcsUrl = gitUrl licenses = allLicenses publish = true publicDownloadNumbers = true version { desc = libraryDescription gpg { sign = true //Determines whether to GPG sign the files. The default is false passphrase = properties.getProperty(\"bintray.gpg.password\") //Optional. The passphrase for GPG signing' } } } } installv1.gradle apply plugin: 'com.github.dcendents.android-maven' group = publishedGroupId // Maven Group ID for the artifact install { repositories.mavenInstaller { // This generates POM.xml with proper parameters pom { project { packaging 'aar' groupId publishedGroupId artifactId artifact // Changed case // Add your description here name libraryName description libraryDescription url siteUrl // Set your license licenses { license { name licenseName url licenseUrl } } developers { developer { id developerId name developerName email developerEmail } } scm { connection gitUrl developerConnection gitUrl url siteUrl } } } } } 在项目中手动创建installv1.gradle、bintrayv1.gradle文件，我把他们放在项目目录下的library文件夹中，手动拷贝相关的源码 在项目根目录下的app目录（可能被改为项目名）下的build.gradle文件中修改原来的引用（注释或者删除） //apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle' //apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle' apply from: \"../library/installv1.gradle\" apply from: \"../library/bintrayv1.gradle\" 重新build即可 ","date":"2021-03-15","objectID":"/android-net/:2:0","tags":["Android","AndroidStudio","Java","Net"],"title":"AndroidStudio网络问题","uri":"/android-net/"},{"categories":["Android"],"content":"end ","date":"2021-03-15","objectID":"/android-net/:3:0","tags":["Android","AndroidStudio","Java","Net"],"title":"AndroidStudio网络问题","uri":"/android-net/"},{"categories":["Android"],"content":"在AndroidStudio中使用Java开发Android应用-版本更替不兼容报各种错误的修正","date":"2021-03-03","objectID":"/android-incompatible-version/","tags":["Android","AndroidStudio","Version","Error"],"title":"Android-版本更替不兼容修正","uri":"/android-incompatible-version/"},{"categories":["Android"],"content":"Android-版本更替不兼容修正 ","date":"2021-03-03","objectID":"/android-incompatible-version/:0:0","tags":["Android","AndroidStudio","Version","Error"],"title":"Android-版本更替不兼容修正","uri":"/android-incompatible-version/"},{"categories":["Android"],"content":"CardView、RecyclerView在buildTools28-\u003e30用法改变 Android开发 CardView卡片视图、RecyclerView回收视图 注意开发工具从28变为30以后即src目录下的bulid.grade文件中的buildTools版本改变 android { compileSdkVersion 28 buildToolsVersion \"28.0.0\" } android { compileSdkVersion 30 buildToolsVersion \"30.0.3\" } CardView、RecyclerView都发生了使用变化 引用： app目录下的bulid.grade文件中依赖dependencies改变 只要将implementation ‘com.android.support:cardview-v7:28.0.0’换成implementation ‘androidx.cardview:cardview’就行了（recyclerview类似改变）； 原因：版本28（面向android pie及以下版本）是遗留支持库的最后一个版本，因此我们建议您在使用android q并继续前进时迁移到androidx库。IDE可以帮助您：重构\u003e迁移到AndroidX…， dependencies { implementation 'com.android.support:cardview-v7:28.0.0' implementation 'com.android.support:recyclerview-v7:28.0.0' } dependencies { implementation \"androidx.cardview:cardview:1.0.0\" implementation \"androidx.recyclerview:recyclerview:1.1.0\" // For control over item selection of both touch and mouse driven selection implementation \"androidx.recyclerview:recyclerview-selection:1.1.0\" } 依赖请看官方文档Cardview、RecyclerView XML文件 主要是CardView、RecyclerView的标题 原来CardView \u003candroid.support.v7.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_marginLeft=\"5dp\" android:layout_marginRight=\"5dp\" android:layout_marginTop=\"5dp\" android:elevation=\"5dp\" app:cardCornerRadius=\"5dp\"\u003e \u003c/android.support.v7.widget.CardView\u003e RecyclerView \u003candroid.support.v7.widget.RecyclerView android:id=\"@+id/recyclerView\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"\u003e \u003c/android.support.v7.widget.RecyclerView\u003e 变为CardView‘ \u003candroidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" tools:context=\".MainActivity\"\u003e \u003candroidx.cardview.widget.CardView android:id=\"@+id/card_view\" android:layout_width=\"100dp\" android:layout_height=\"100dp\" app:layout_constraintTop_toTopOf=\"parent\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintLeft_toLeftOf=\"parent\" app:layout_constraintRight_toRightOf=\"parent\"\u003e \u003cTextView android:id=\"@+id/content1\" android:text=\"内容\" android:gravity=\"center\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"/\u003e \u003c/androidx.cardview.widget.CardView\u003e \u003c/androidx.constraintlayout.widget.ConstraintLayout\u003e RecyclerView’ \u003c!-- 你的可能是这样的--\u003e \u003candroid.support.v7.widget.RecyclerView \u003c!-- 这才是对的--\u003e \u003candroidx.recyclerview.widget.RecyclerView \u003c!-- xxx--\u003e \u003c!-- xxx--\u003e .../\u003e ","date":"2021-03-03","objectID":"/android-incompatible-version/:1:0","tags":["Android","AndroidStudio","Version","Error"],"title":"Android-版本更替不兼容修正","uri":"/android-incompatible-version/"},{"categories":["Android"],"content":"Failed to find Build Tools revision 26.0.1 Error:A problem occurred configuring project ':app'. \\\u003e Failed to find Build Tools revision 26.0.1 在build.gradle 中buildToolsVersion 如何修改。看本地安装了哪些版本的 进入文件夹Android SDK 目录下build-tools，修改为里面有的版本 ","date":"2021-03-03","objectID":"/android-incompatible-version/:2:0","tags":["Android","AndroidStudio","Version","Error"],"title":"Android-版本更替不兼容修正","uri":"/android-incompatible-version/"},{"categories":["Android"],"content":"Could not find method google() for arguments [] on repository container. 问题： 在react native中安装realm数据库后运行react-native run-android 时报如下错： 开发环境： react-native:^0.55.4 reaml:^2.27.0 解决方案： 1、打开项目根目录下android/gradle/wrapper/gradle-wrapper.properties 将distributionUrl=https://services.gradle.org/distributions/gradle-2.14.1-all.zip中的2.14.1改成4.1 2、打开项目根目录下的android/build.gradle 1）、在buildscript和allprojects下的repositories分别添加google() 2）、将dependencies中的classpath ‘com.android.tools.build:gradle:2.2.3’中的2.2.3【具体看自己的是多少】改成3.0.1 重新运行编译项目命令，要下载新的gradle，这个过程有点慢。至此，问题已解决！ ","date":"2021-03-03","objectID":"/android-incompatible-version/:3:0","tags":["Android","AndroidStudio","Version","Error"],"title":"Android-版本更替不兼容修正","uri":"/android-incompatible-version/"},{"categories":["Android"],"content":"Could not find com.android.support:appcompat-v7:25.0.0 老的Android工程导入as报错如下： 10:36 Gradle sync failed: Could not find com.android.support:appcompat-v7:25.0.0. Required by: FuNongTong:app:unspecified (18 s 207 ms) 如果是gradle4.0及以下，增加maven { url “https://maven.google.com” }，如下： buildscript { repositories { jcenter() maven { url \"https://maven.google.com\" } } dependencies { classpath 'com.android.tools.build:gradle:2.2.3' // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files } } allprojects { repositories { jcenter() maven { url \"https://maven.google.com\" } } } 如果是gradle4.0及以上，maven { url “https://maven.google.com” }替换为google() 如下： buildscript { repositories { jcenter() google() } } allprojects { repositories { jcenter() google() } } ","date":"2021-03-03","objectID":"/android-incompatible-version/:4:0","tags":["Android","AndroidStudio","Version","Error"],"title":"Android-版本更替不兼容修正","uri":"/android-incompatible-version/"},{"categories":["Android"],"content":"Cannot set the value of read-only property ‘outputFile’ for ApkVariantOutputImpl_Decorated{apkData=M android studio升级到3.1.4之后gradle里的很多配置也相应发生了一些改变。在打包的时候我就遇到了这样的问题。 报错为：Cannot set the value of read-only property ‘outputFile’ for ApkVariantOutputImpl_Decorated{apkData=Main{type=MAIN, fullName=debug, filters=[]}} of type com.android.build.gradle.internal.api.ApkVariantOutputImpl. 截图如下： 大家可以注意看一下，AS升级到3.0以上版本后，截图上的红框处的代码都要改动，否则是无法正常打包的。那要改成什么样呢，如下图所示： 改成上图所示的样子就可以正常打包了，另外我也把代码贴出来方便大家复制。 //打包后应用名称 applicationVariants.all { variant -\u003e variant.outputs.all { output -\u003e def outputFile = output.outputFile def fileName if (outputFile != null \u0026\u0026 outputFile.name.endsWith('.apk')) { if (variant.buildType.name.equals('release')) {//如果是release包 fileName = \"anjian_release_v${defaultConfig.versionName}.apk\" } else if (variant.buildType.name.equals('debug')) {//如果是debug包 fileName = \"anjian_debug_v${defaultConfig.versionName}.apk\" } outputFileName = fileName } } } ","date":"2021-03-03","objectID":"/android-incompatible-version/:6:0","tags":["Android","AndroidStudio","Version","Error"],"title":"Android-版本更替不兼容修正","uri":"/android-incompatible-version/"},{"categories":["Android"],"content":"build.grade.dependence随版本引用关键字改变 // testCompile-\u003etestImplementation // compile-\u003eimplementation // provided-\u003ecompileOnly ","date":"2021-03-03","objectID":"/android-incompatible-version/:7:0","tags":["Android","AndroidStudio","Version","Error"],"title":"Android-版本更替不兼容修正","uri":"/android-incompatible-version/"},{"categories":["Android"],"content":"Error:android-apt plugin is incompatible with the Android Gradle plugin. Please use ‘annotationProce AS从2.3.3升级到3.0后，项目没有任何改动就出现了这个错误，解决步骤如下： 一、把module/build.gradle下的apt插件应用全部注释掉 二、把dependencies下的apt全部改为annotationProcessor annotationProcessor 在as最新版本也失效，要如下操作 annotationProcessor ‘org.projectlombok:lombok:1.18.6’ 修改为 compile ‘org.projectlombok:lombok:1.18.6’ 即可 三、把project/build.gradle中的apt插件声明注释 ","date":"2021-03-03","objectID":"/android-incompatible-version/:8:0","tags":["Android","AndroidStudio","Version","Error"],"title":"Android-版本更替不兼容修正","uri":"/android-incompatible-version/"},{"categories":["Android"],"content":"更新Gradle项目时报错Gradle sync failed: Unsupported method: BaseConfig.getApplicationIdSuffix 查看Android Gradle 插件版本说明。 https://developer.android.google.cn/studio/releases/gradle-plugin.html#updating-plugin 修改对应的项目根目录下的build.gradle的依赖（dependencies）下的gradle的build工具版本 dependencies {classpath \"com.android.tools.build:gradle:4.1.3\"} 和项目根目录下的gradle文件夹中的wrapper文件夹中的build.gradle文件中的gradle版本 distributionUrl=https\\://services.gradle.org/distributions/gradle-6.5-bin.zip 注意：第一个文件要在原来jcenter（）位置加上google（） repositories{ google() jcenter()} ","date":"2021-03-03","objectID":"/android-incompatible-version/:9:0","tags":["Android","AndroidStudio","Version","Error"],"title":"Android-版本更替不兼容修正","uri":"/android-incompatible-version/"},{"categories":["Android"],"content":"Could not resolve all files for configuration ‘:app:debugRuntimeClasspath’. Could not find com.android.support:appcompat-v7:23.2.1. Searched in the following locations: repositories { google() maven{ url 'https://maven.aliyun.com/nexus/content/groups/public/'}//加上这行 //jcenter() } ","date":"2021-03-03","objectID":"/android-incompatible-version/:10:0","tags":["Android","AndroidStudio","Version","Error"],"title":"Android-版本更替不兼容修正","uri":"/android-incompatible-version/"},{"categories":["Android"],"content":"end ","date":"2021-03-03","objectID":"/android-incompatible-version/:11:0","tags":["Android","AndroidStudio","Version","Error"],"title":"Android-版本更替不兼容修正","uri":"/android-incompatible-version/"},{"categories":["Android"],"content":"Android Studio 开发Android App时需要修改项目名称和包名方法","date":"2021-02-28","objectID":"/androidstudio-rename/","tags":["Android","AndroidStudio","Rename"],"title":"Android Studio 修改项目名称和包名方法","uri":"/androidstudio-rename/"},{"categories":["Android"],"content":"Android Studio 修改项目名称和包名方法 Android Studio修改项目名称和包名方法 平时项目开发中，有时候维护项目多，有的项目结构需要改变，这就需要我们去修改项目名称或者修改包名。下面介绍一下怎样修改项目名称和包名。 ","date":"2021-02-28","objectID":"/androidstudio-rename/:0:0","tags":["Android","AndroidStudio","Rename"],"title":"Android Studio 修改项目名称和包名方法","uri":"/androidstudio-rename/"},{"categories":["Android"],"content":"1. 修改项目名称 1）打开项目根目录下的setting.gradle文件，修改该文件中的rootProject.name='新项目名'； 2）点击 Sync Now 重新编译项目； ★ 如果只是简单修改至此，会发现项目名称后依然备注着旧项目名，并没有彻底更换新的项目名。紧接着下面操作： 3）关闭 Android Studio； 4）修改项目所在路径的文件名为新的项目名； 5）打开AS，重新导入修改后的项目即可； ★ 如果是 AS 4.0之后 的版本，修改至此就算修改完成；如果是 AS 4.0之前 的版本，会出现一些配置文件信息还是引用原来的项目名，并没有更换为新的项目名。紧接着下面操作： 6）找到项目根目录下的xx.iml文件，右键 Refactor —— Rename 打开修改编辑框； 7）输入新的项目名，点击 Refactor 修改； 8）打开项目根目录下的xx.iml文件，修改该文件中的project.id字段：external.linked.project.id=\"新项目名\" 9）打开项目下.idea/modules.xml文件，修改该文件中的fileurl和filepath字段：\u003cmodule fileurl=\"file://$PROJECT_DIR$/新项目名.iml\" filepath=\"$PROJECT_DIR$/新项目名.iml\" /\u003e 10）点击 Rebuild Project 重构项目，即可修改完成项目名称。 ","date":"2021-02-28","objectID":"/androidstudio-rename/:1:0","tags":["Android","AndroidStudio","Rename"],"title":"Android Studio 修改项目名称和包名方法","uri":"/androidstudio-rename/"},{"categories":["Android"],"content":"2. 修改项目包名 1）选中项目中药修改的包名； 2）更改项目结构显示方式，取消 Compact Middle Packages 选项； 3）右键要修改的包名，选择 Refactor —— Rename 打开修改编辑框； 4）点击 Rename package 修改包名； 5）输入新的包名，点击 Refactor 修改； 6）点击 Do Refactor 确定修改； 7）打开项目 app/main 目录下的AndroidManifest.xml文件，修改该文件中的package=\"新包名\"字段； 8）修改项目 app 下的 build.gradle 中的applicationId \"新包名\"字段； 9）点击 Sync Now 同步，即可修改完成项目包名。 注意： 修改完包名，项目出现错误无法运行，解决方法请移步 —— 《Android Studio修改包名导致引用R文件报错问题》 ","date":"2021-02-28","objectID":"/androidstudio-rename/:2:0","tags":["Android","AndroidStudio","Rename"],"title":"Android Studio 修改项目名称和包名方法","uri":"/androidstudio-rename/"},{"categories":["Android"],"content":"Android Studio 导入图片标红,记录图片文件命名规则","date":"2021-02-09","objectID":"/androidstudio-picture-error/","tags":["AndroidStudio","File","Picture"],"title":"Android Studio 导入图片标红","uri":"/androidstudio-picture-error/"},{"categories":["Android"],"content":"Android Studio 导入图片标红 as图片不能使用\"-\"，只能使用\"_“代替 ","date":"2021-02-09","objectID":"/androidstudio-picture-error/:0:0","tags":["AndroidStudio","File","Picture"],"title":"Android Studio 导入图片标红","uri":"/androidstudio-picture-error/"},{"categories":["Android"],"content":"情况一 直接修改会直接提示不能带有”-\" ","date":"2021-02-09","objectID":"/androidstudio-picture-error/:1:0","tags":["AndroidStudio","File","Picture"],"title":"Android Studio 导入图片标红","uri":"/androidstudio-picture-error/"},{"categories":["Android"],"content":"情况二 在系统资源管理器中拷贝进带\"-“的文件名的图片，标红报错 ","date":"2021-02-09","objectID":"/androidstudio-picture-error/:2:0","tags":["AndroidStudio","File","Picture"],"title":"Android Studio 导入图片标红","uri":"/androidstudio-picture-error/"},{"categories":["Android"],"content":"记录findViewById返回null的常见原因和解决办法","date":"2021-02-01","objectID":"/android-findviewbyid-null/","tags":["Android","findViewById"],"title":"findViewById返回null的常见原因","uri":"/android-findviewbyid-null/"},{"categories":["Android"],"content":"findViewById返回null的常见原因 1.在另一个view的元素应该用baseView.findViewById()来拿 findViewById()是要指定view的，也就是说你要找的view 必须是包含在baseView里面的布局（控件） 如果在该父控件下找不到，就会报null。 2.findViewById在setContentView(R.layout.main);之前.即在setContentView调用之前，view要从父类布局里面找，父类布局还没有加载之前找，必然会返回空。 3.写的该布局（控件） ，还没有保存，导致工具不能加载到。自然也是null； 4.工具出现异常，这就是很偶然的情况，一般clean、重启 ","date":"2021-02-01","objectID":"/android-findviewbyid-null/:0:0","tags":["Android","findViewById"],"title":"findViewById返回null的常见原因","uri":"/android-findviewbyid-null/"},{"categories":["Blog"],"content":"Hogo使用CodeIT主题并配置Algolia作为站内搜索","date":"2021-01-10","objectID":"/hogo-algolia/","tags":["Blog","Hogo","Search","Algolia","CodeIT"],"title":"Hogo配置Algolia","uri":"/hogo-algolia/"},{"categories":["Blog"],"content":"Hogo配置Algolia ","date":"2021-01-10","objectID":"/hogo-algolia/:0:0","tags":["Blog","Hogo","Search","Algolia","CodeIT"],"title":"Hogo配置Algolia","uri":"/hogo-algolia/"},{"categories":["Blog"],"content":"1 config.toml 配置 首先我们配置好 config.toml 的 algolia 的配置，以中文配置作为示例 [languages.zh-cn.params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"algolia\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [languages.zh-cn.params.search.algolia] index = \"KKKPJSKEY's-Case-Archives\" appID = \"algolia.com.API Keys.Application ID\" searchKey = \"algolia.com.API Keys.Admin API Key\" ","date":"2021-01-10","objectID":"/hogo-algolia/:1:0","tags":["Blog","Hogo","Search","Algolia","CodeIT"],"title":"Hogo配置Algolia","uri":"/hogo-algolia/"},{"categories":["Blog"],"content":"2 Algolia 配置 ","date":"2021-01-10","objectID":"/hogo-algolia/:2:0","tags":["Blog","Hogo","Search","Algolia","CodeIT"],"title":"Hogo配置Algolia","uri":"/hogo-algolia/"},{"categories":["Blog"],"content":"2.1 登录 Algolia 官网 ，注册账号，创建 Application 名为 “example”作为举例，默认选择 “FREE” 即可，这里自定义名称 ","date":"2021-01-10","objectID":"/hogo-algolia/:2:1","tags":["Blog","Hogo","Search","Algolia","CodeIT"],"title":"Hogo配置Algolia","uri":"/hogo-algolia/"},{"categories":["Blog"],"content":"2.2 我这里选择香港作为存储地区 查看自己的网速 选择网速较快的地区 点击下一步 勾选 勾选 点击创建 我就跳过新手教程了 ","date":"2021-01-10","objectID":"/hogo-algolia/:2:2","tags":["Blog","Hogo","Search","Algolia","CodeIT"],"title":"Hogo配置Algolia","uri":"/hogo-algolia/"},{"categories":["Blog"],"content":"2.3 创建index，要与config.toml 的配置 index 一样 ","date":"2021-01-10","objectID":"/hogo-algolia/:2:3","tags":["Blog","Hogo","Search","Algolia","CodeIT"],"title":"Hogo配置Algolia","uri":"/hogo-algolia/"},{"categories":["Blog"],"content":"2.4 将 API Keys 里面补充到 config.toml 里面（见2.1） ","date":"2021-01-10","objectID":"/hogo-algolia/:2:4","tags":["Blog","Hogo","Search","Algolia","CodeIT"],"title":"Hogo配置Algolia","uri":"/hogo-algolia/"},{"categories":["Blog"],"content":"3 使用 atomic-algolia 来完成自动更新索引 ","date":"2021-01-10","objectID":"/hogo-algolia/:3:0","tags":["Blog","Hogo","Search","Algolia","CodeIT"],"title":"Hogo配置Algolia","uri":"/hogo-algolia/"},{"categories":["Blog"],"content":"3.1 首先安装 npm，这里不介绍 ","date":"2021-01-10","objectID":"/hogo-algolia/:3:1","tags":["Blog","Hogo","Search","Algolia","CodeIT"],"title":"Hogo配置Algolia","uri":"/hogo-algolia/"},{"categories":["Blog"],"content":"3.2 安装 atomic-algolia（在任意目录下） npm -g install atomic-algolia --save ","date":"2021-01-10","objectID":"/hogo-algolia/:3:2","tags":["Blog","Hogo","Search","Algolia","CodeIT"],"title":"Hogo配置Algolia","uri":"/hogo-algolia/"},{"categories":["Blog"],"content":"3.3 创建 .env 文件存放 algolia 配置（在网站根目录下） ALGOLIA_APP_ID=\"algolia.com.API Keys.Application ID\" ALGOLIA_ADMIN_KEY=\"algolia.com.API Keys.Admin API Key\" ALGOLIA_INDEX_NAME=\"example\" ALGOLIA_INDEX_FILE=\"public/index.json\" ","date":"2021-01-10","objectID":"/hogo-algolia/:3:3","tags":["Blog","Hogo","Search","Algolia","CodeIT"],"title":"Hogo配置Algolia","uri":"/hogo-algolia/"},{"categories":["Blog"],"content":"3.4 修改网站根目录下的 package.json 文件（没有就新建），在 scripts 下添加 \"algolia\": \"atomic-algolia\" { \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\", \"algolia\": \"atomic-algolia\" } } ","date":"2021-01-10","objectID":"/hogo-algolia/:3:4","tags":["Blog","Hogo","Search","Algolia","CodeIT"],"title":"Hogo配置Algolia","uri":"/hogo-algolia/"},{"categories":["Blog"],"content":"3.5 上传索引的命令 你可以本地执行 npm run algolia 查看运行效果 ","date":"2021-01-10","objectID":"/hogo-algolia/:3:5","tags":["Blog","Hogo","Search","Algolia","CodeIT"],"title":"Hogo配置Algolia","uri":"/hogo-algolia/"},{"categories":["Blog"],"content":"4 .1定制化脚本 #!/bin/sh # If a command fails then the deploy stops set -e start_local_hugo_server(){ hugo server --disableFastRender } update_algolia(){ pwd npm run algolia printf \"\\033[0;32m已经更新到 algolia ！！！\\033[0m\\n\" sleep 10 } pushMyBlogHugo(){ printf \"\\033[0;32mDeploying updates to GitHub \"https://github.com/KKKPJSKEY/KKKPJSKEY.github.io\"\\033[0m\\n\" git pull # Add changes to git. git add . # Commit changes. msg=\"change MyBlogHugo site $(date)\" if [ \"$#\" -gt 1 ]; then msg=\"$2\" fi git commit -m \"$msg\" # Push source and build repos. git push origin master sleep 10 } push_public(){ printf \"\\033[0;32mDeploying updates to GitHub \"https://github.com/KKKPJSKEY/KKKPJSKEY.github.io\"\\033[0m\\n\" # Build the project. hugo # if using a theme, replace with `hugo -t \u003cYOURTHEME\u003e` # Go To Public folder cd public pwd git pull # Add changes to git. git add . # Commit changes. msg=\"rebuilding site $(date)\" if [ \"$#\" -gt 1 ]; then msg=\"$2\" fi git commit -m \"$msg\" # Push source and build repos. git push sleep 10 } case $1 in 1) start_local_hugo_server ;; 2) pushMyBlogHugo $* ;; 3) push_public $* ;; 4) update_algolia ;; 5) hugo serve -e production ;; 6) hugo server --source=themes/LoveIt/exampleSite ;; esac 脚本解析： sh deploy.sh 1：启动 hugo 作为本地调试使用，实时将文章的内容更新到站点，不需要重启也能边修改边观看效果。 sh deploy.sh 2：将 MyHugoBlog 上传到 Github 存储库。 sh deploy.sh 3：将 public 静态文件站点上传到Github Pages 存储库。 sh deploy.sh 4：更新 algolia 的索引. sh deploy.sh 5：主要是用来调试 cdn，评论系统等，所以要用 production 变量来启动。 sh deploy.sh 6：查看官方例子，方便调试。 ","date":"2021-01-10","objectID":"/hogo-algolia/:4:0","tags":["Blog","Hogo","Search","Algolia","CodeIT"],"title":"Hogo配置Algolia","uri":"/hogo-algolia/"},{"categories":["Blog"],"content":"4 .2我的脚本 分析可知仅上传流程中需要两步顺序操作，其他调试普通指令一步基本可以解决，故略去其他脚本，仅使用生成索引并上传，将GitHub Pages上传至Github仓库两步操作脚本 update.sh #!/bin/sh # If a command fails then the deploy stops set -e update_algolia(){ pwd npm run algolia printf \"\\033[0;32m已经更新到 algolia ！！！\\033[0m\\n\" sleep 10 } push_public(){ printf \"\\033[0;32mDeploying updates to GitHub \"https://github.com/KKKPJSKEY/KKKPJSKEY.github.io/\"\\033[0m\\n\" # Build the project. hugo # if using a theme, replace with `hugo -t \u003cYOURTHEME\u003e` # Go To Public folder cd public pwd git pull origin master # Add changes to git. git add . # Commit changes. msg=\"rebuilding site $(date)\" #param num \u003e 1 if [ \"$#\" -gt 1 ]; then printf \"参数个数错误,只能传一个参数为提交的信息！\" exit 0 else git commit -m \"$1\" # Push source and build repos. git push origin master fi } update_algolia push_public $* ","date":"2021-01-10","objectID":"/hogo-algolia/:5:0","tags":["Blog","Hogo","Search","Algolia","CodeIT"],"title":"Hogo配置Algolia","uri":"/hogo-algolia/"},{"categories":["Blog"],"content":"5结果 仓库代码检验： algolia 的索引: ","date":"2021-01-10","objectID":"/hogo-algolia/:6:0","tags":["Blog","Hogo","Search","Algolia","CodeIT"],"title":"Hogo配置Algolia","uri":"/hogo-algolia/"},{"categories":["Blog"],"content":"部署Hugo，并使用其创建静态网站，推送到Github，配置GitHub Pages","date":"2021-01-01","objectID":"/hugo-github/","tags":["Hugo","Markdown","GitHub","CodeIt","Blog"],"title":"Hogo创建GitHub Pages","uri":"/hugo-github/"},{"categories":["Blog"],"content":"Hogo创建GitHub Pages 近些年GoLang语言逐渐火爆起来，Golang语言所做的静态博客固然也映入眼帘。相比于动态博客，静态博客的好处不言而喻，开发难度极低，不需要后台和数据库，更不需要昂贵的服务器成本和花费运维成本去维护。应老师要求以及个人未来发展，故学习静态博客的部署。本文因此介绍hugo和GitHub.io的初次使用搭建个人博客 ","date":"2021-01-01","objectID":"/hugo-github/:0:0","tags":["Hugo","Markdown","GitHub","CodeIt","Blog"],"title":"Hogo创建GitHub Pages","uri":"/hugo-github/"},{"categories":["Blog"],"content":"1 本地部署blog ","date":"2021-01-01","objectID":"/hugo-github/:1:0","tags":["Hugo","Markdown","GitHub","CodeIt","Blog"],"title":"Hogo创建GitHub Pages","uri":"/hugo-github/"},{"categories":["Blog"],"content":"1.1 快速开始 1.1.1、安装方法介绍 hugo_GitHub:https://github.com/gohugoio/hugo Official_Website:https://gohugo.io/ 不同的操作系统有着不同的安装方式，官方推荐Linux或者Mac下可以使用brew或者port 进行安装Windows推荐使用Chocolatey或者Scoop进行安装，或者使用GitHub中的源码进行安装，我选择GitHub的Relaeases包进行安装，因为它不需要其他包管理工具进行安装。其他安装方式请参阅官方安装文档 https://gohugo.io/getting-started/installing 可以使用Git工具进行下载源码，或者使用GitHub自带的Donwload Zip进行下载速度慢的话考虑码云转移仓库加速或csdn相关加速服务~~，甚至孙悟空的魔法~~ git clone [ssh address][http address] #示例 git clone git@github.com:gohugoio/hugo.git #SSH #或者 git clone https://github.com/gohugoio/hugo.git #HTTP 1.1.2、我的办法 https://github.com/gohugoio/hugo/releases此链接选择最新版，选择对应系统版本下载即可（我的是windows） 下载后进行解压只有三个文件，个人将hugo.exe文件放入bin目录，将网站问建放入sites目录，其他文件放在根目录 在当前目录执行（未配置环境变量） 任意处执行（配置环境变量） cd bin hugo version 单击环境变量（1），创建HOGO_HOME（2），填写路径（3），在原来Path下（4）添加bin目录（5） 执行命令后有类似返回结果（6）说明安装hugo成功（在系统环境变量中（Windows可以在Cotana直接搜索环境变量）） ","date":"2021-01-01","objectID":"/hugo-github/:1:1","tags":["Hugo","Markdown","GitHub","CodeIt","Blog"],"title":"Hogo创建GitHub Pages","uri":"/hugo-github/"},{"categories":["Blog"],"content":"1.2 创建网站 #返回上一级目录下的网站目录 cd ../sites hugo new site [site nme] #示例 hugo new site KKKPJSKEY's-Case-Archives ","date":"2021-01-01","objectID":"/hugo-github/:1:2","tags":["Hugo","Markdown","GitHub","CodeIt","Blog"],"title":"Hogo创建GitHub Pages","uri":"/hugo-github/"},{"categories":["Blog"],"content":"1.3 选择主题 在https://themes.gohugo.io/这个网址选择你喜欢的主题 https://themes.gohugo.io/material-design/这是我的选择 点击download进入对应的GitHub页面，可以使用Git工具进行下载源码，或者使用GitHub自带的Donwload Zip进行下载速度慢的话考虑码云转移仓库加速或Csdn相关加速服务~~，甚至孙悟空的魔法~~ #切换到新建的网站目录下 cd KKKPJSKEY's-Case-Archives git clone [ssh address][http address] #示例 git clone git@github.com:pdevty/material-design.git themes/material-design #SSH #或者 git clone https://github.com/pdevty/material-design.git themes/material-design #HTTP （自行下载的压缩请手动解压到theme目录） ","date":"2021-01-01","objectID":"/hugo-github/:1:3","tags":["Hugo","Markdown","GitHub","CodeIt","Blog"],"title":"Hogo创建GitHub Pages","uri":"/hugo-github/"},{"categories":["Blog"],"content":"1.4 配置主题 1.4.1、metadata 请将主题目录（1）下的默认配置文件（2）中的内容（3）与网站目录（4）下的默认配置文件（5）中的内容（6）进行整合，以网站目录下的默认配置文件为准，最终成河成（7）的样子即可 1.4.2、其他配置 将根目录（1）下的config.toml文件（2）中的内容改为自己网站的内容（3） 我个人主题配置如上图所示，其他配置请自行参照主题文档进行配置 ","date":"2021-01-01","objectID":"/hugo-github/:1:4","tags":["Hugo","Markdown","GitHub","CodeIt","Blog"],"title":"Hogo创建GitHub Pages","uri":"/hugo-github/"},{"categories":["Blog"],"content":"1.5 生成模板MarkDown（带有metadata） hugo new [类别]/[文件名] #示例 hugo new blog/使用hugo、GitHub.io搭建个人静态博客.md 执行以上指令即可在以下路径生成对应的文件content/类别/文件名（生成一次后也可手动在content/类别/文件名创建文件，手动拷贝对应的metadata）（这里没有切换路径，但必须在网站根目录下进行） ","date":"2021-01-01","objectID":"/hugo-github/:1:5","tags":["Hugo","Markdown","GitHub","CodeIt","Blog"],"title":"Hogo创建GitHub Pages","uri":"/hugo-github/"},{"categories":["Blog"],"content":"1.6编写MarkDown 项目中其他请参照MarkDown语法规范，其中图片需要注意：图片应放到网站根目录下的static中。我为了国立不同静态资源，创建了imags和文章名两级文件夹，图片在MarkDown中应使用，同时使用顺斜杠替换原来反斜杠， /[分类名]/[项目名]/图片名.格式 #个人分类法，非强制要求 #示例 ./1.png 同时使用顺斜杠替换原来反斜杠， ","date":"2021-01-01","objectID":"/hugo-github/:1:6","tags":["Hugo","Markdown","GitHub","CodeIt","Blog"],"title":"Hogo创建GitHub Pages","uri":"/hugo-github/"},{"categories":["Blog"],"content":"1.7 本地预览与部署 1.7.1、本地预览 hugo server [-D]（这里没有切换路径，但必须在网站根目录下进行） Start building sites … | EN -------------------+----- Pages | 22 Paginator pages | 0 Non-page files | 9 Static files | 33 Processed images | 0 Aliases | 8 Sitemaps | 1 Cleaned | 0 Built in 52 ms Watching for changes in C:\\Program_Green\\hugo_extended_0.82.0_Windows-64bit\\sites\\KKKPJSKEY's-Case-Archives\\{archetypes,content,data,layouts,static,themes} Watching for config changes in C:\\Program_Green\\hugo_extended_0.82.0_Windows-64bit\\sites\\KKKPJSKEY's-Case-Archives\\config.toml Environment: \"development\" Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 执行后在http://localhost:1313/可以进行访问（-D参数表示无论metadata（1.4.1）是否为true都进行发布，不加参数则只发布为false的项目，下面huge生成静态文件相同） 1.7.2、生成静态文件用于发布 使用hugo [-D]生成静态文件，-D参数在1.6.1介绍的功能相同（这里没有切换路径，但必须在网站根目录下进行） Start building sites … | EN -------------------+----- Pages | 15 Paginator pages | 0 Non-page files | 9 Static files | 33 Processed images | 0 Aliases | 5s Sitemaps | 1 Cleaned | 0 Total in 167 ms 以上结果会在网站根目录下的public下生成静态页面 ","date":"2021-01-01","objectID":"/hugo-github/:1:7","tags":["Hugo","Markdown","GitHub","CodeIt","Blog"],"title":"Hogo创建GitHub Pages","uri":"/hugo-github/"},{"categories":["Blog"],"content":"2 GitHub创建仓库 来到GitHub主页https://github.com/（自行注册登录） 点击左上角新建仓库 输入自己的仓库名（1，我已经创建过不能使用相同的名字因此报错，仓库名没有格式限制，请自行发挥），设置仓库分类（2，公有是所有人能看到，私有是只有项目内成员能看到），点击创建即可（3） ","date":"2021-01-01","objectID":"/hugo-github/:2:0","tags":["Hugo","Markdown","GitHub","CodeIt","Blog"],"title":"Hogo创建GitHub Pages","uri":"/hugo-github/"},{"categories":["Blog"],"content":"3 使用Git提交生成的静态页面（1.6.2） #切换到网站名字下的public下 cd public #以下为git指令 ##git 初始化 git init ##添加当前目录下的所有文件到暂存区 git add [.][-u][-A][-all] ##提交暂存区的指定文件到仓库区 -m是添加标签（Tag）信息 git commit [-m \"{message}\"] ##从将本地的分支版本上传到远程并合并。 git push 详细Git教程、参数解释在Git笔记（挖坑）中，请移步 ","date":"2021-01-01","objectID":"/hugo-github/:3:0","tags":["Hugo","Markdown","GitHub","CodeIt","Blog"],"title":"Hogo创建GitHub Pages","uri":"/hugo-github/"},{"categories":["Blog"],"content":"4在GitHub中进行页面展示设置 在你的仓库页面点击Settings（1），在新的页面向下滑动找到GitHub Pages下的Branch（2），选择master（3，或自己的分支），在对应的网址即可访问（4） ","date":"2021-01-01","objectID":"/hugo-github/:4:0","tags":["Hugo","Markdown","GitHub","CodeIt","Blog"],"title":"Hogo创建GitHub Pages","uri":"/hugo-github/"},{"categories":["Blog"],"content":"5 结语 至此使用hugo、Github.io搭建个人静态博客彻底完成 ","date":"2021-01-01","objectID":"/hugo-github/:5:0","tags":["Hugo","Markdown","GitHub","CodeIt","Blog"],"title":"Hogo创建GitHub Pages","uri":"/hugo-github/"},{"categories":["Docker"],"content":"记录Docker常用指令的笔记","date":"2020-12-21","objectID":"/docker-command-note/","tags":["Docker","Note","Command"],"title":"Docker常用指令","uri":"/docker-command-note/"},{"categories":["Docker"],"content":"Docker常用指令 ","date":"2020-12-21","objectID":"/docker-command-note/:0:0","tags":["Docker","Note","Command"],"title":"Docker常用指令","uri":"/docker-command-note/"},{"categories":["Docker"],"content":"容器管理指令 # 进入docker容器内部 docker exec -it id /bash/bin # 退出容器 exit # 启动docker容器 sudo systemctl start docker # 设置docker容器开机启动 sudo systemctl enable docker ","date":"2020-12-21","objectID":"/docker-command-note/:1:0","tags":["Docker","Note","Command"],"title":"Docker常用指令","uri":"/docker-command-note/"},{"categories":["CentOS7","Operation"],"content":"记录CentOS7 查询的几种方式和区别解释","date":"2020-12-12","objectID":"/cnetos7-shell-search/","tags":["CentOS7","Operation","Search"],"title":"CentOS7 查询的几种方式","uri":"/cnetos7-shell-search/"},{"categories":["CentOS7","Operation"],"content":"CentOS7 查询的几种方式 ","date":"2020-12-12","objectID":"/cnetos7-shell-search/:0:0","tags":["CentOS7","Operation","Search"],"title":"CentOS7 查询的几种方式","uri":"/cnetos7-shell-search/"},{"categories":["CentOS7","Operation"],"content":"1. find 　Java代码 　find是最常见和最强大的查找命令，你可以用它找到任何你想找的文件。与查询数据库（/var/lib/locatedb）文件不同，find查找磁盘空间 　find的使用格式如下： $ find \u003c指定目录\u003e \u003c指定条件\u003e \u003c指定动作\u003e 　- \u003c指定目录\u003e: 所要搜索的目录及其所有子目录。默认为当前目录。 　- \u003c指定条件\u003e: 所要搜索的文件的特征。 　- \u003c指定动作\u003e: 对搜索结果进行特定的处理。 　如果什么参数也不加，find默认搜索当前目录及其子目录，并且不过滤任何结果（也就是返回所有文件），将它们全都显示在屏幕上。 　find的使用实例： $ find . -name 'my*' 　搜索当前目录（含子目录，以下同）中，所有文件名以my开头的文件。 $ find . -name 'my*' -ls 　搜索当前目录中，所有文件名以my开头的文件，并显示它们的详细信息。 $ find . -type f -mmin -10 　搜索当前目录中，所有过去10分钟中更新过的普通文件。如果不加-type f参数，则搜索普通文件+特殊文件+目录。 根据文件名查询 find -name [文件名] 根据文件夹名查询 find [文件夹名] ","date":"2020-12-12","objectID":"/cnetos7-shell-search/:1:0","tags":["CentOS7","Operation","Search"],"title":"CentOS7 查询的几种方式","uri":"/cnetos7-shell-search/"},{"categories":["CentOS7","Operation"],"content":"2. locate 　Java代码 　locate命令其实是\"find -name\"的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录，而是搜索一个数据库（/var/lib/locatedb），这个数据库中含有本地所有文件信息。Linux系统自动创建这个数据库，并且每天自动更新一次，所以使用locate命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库。 　locate命令的使用实例： $ locate /etc/sh 　搜索etc目录下所有以sh开头的文件。 $ locate ~/m 　搜索用户主目录下，所有以m开头的文件。 $ locate -i ~/m 　搜索用户主目录下，所有以m开头的文件，并且忽略大小写。 ","date":"2020-12-12","objectID":"/cnetos7-shell-search/:2:0","tags":["CentOS7","Operation","Search"],"title":"CentOS7 查询的几种方式","uri":"/cnetos7-shell-search/"},{"categories":["CentOS7","Operation"],"content":"3. whereis 　Java代码 　whereis命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。同locate一样，查询数据库（/var/lib/locatedb）文件 　whereis命令的使用实例： $ whereis grep ","date":"2020-12-12","objectID":"/cnetos7-shell-search/:3:0","tags":["CentOS7","Operation","Search"],"title":"CentOS7 查询的几种方式","uri":"/cnetos7-shell-search/"},{"categories":["CentOS7","Operation"],"content":"4. which 　Java代码 　which命令的作用是，在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。 　which命令的使用实例： $ which grep ","date":"2020-12-12","objectID":"/cnetos7-shell-search/:4:0","tags":["CentOS7","Operation","Search"],"title":"CentOS7 查询的几种方式","uri":"/cnetos7-shell-search/"},{"categories":["CentOS7","Operation"],"content":"5. type 　Java代码 　type命令其实不能算查找命令，它是用来区分某个命令到底是由shell自带的，还是由shell外部的独立二进制文件提供的。如果一个命令是外部命令，那么使用-p参数，会显示该命令的路径，相当于which命令。 　type命令的使用实例： $ type cd 　系统会提示，cd是shell的自带命令（build-in）。 $ type grep 　系统会提示，grep是一个外部命令，并显示该命令的路径。 $ type -p grep 　加上-p参数后，就相当于which命令 ","date":"2020-12-12","objectID":"/cnetos7-shell-search/:5:0","tags":["CentOS7","Operation","Search"],"title":"CentOS7 查询的几种方式","uri":"/cnetos7-shell-search/"},{"categories":["CentOS7","Operation"],"content":"Linux的CentOS7 中对文件权限管理的指令笔记","date":"2020-11-27","objectID":"/centos7-file-auth/","tags":["CentOS7","File","Operation","Authorities"],"title":"CentOS7 文件权限管理","uri":"/centos7-file-auth/"},{"categories":["CentOS7","Operation"],"content":"CentOS7 文件权限管理 ","date":"2020-11-27","objectID":"/centos7-file-auth/:0:0","tags":["CentOS7","File","Operation","Authorities"],"title":"CentOS7 文件权限管理","uri":"/centos7-file-auth/"},{"categories":["CentOS7","Operation"],"content":"修改文件权限和群组 sudo chmod -R 777 etc(文件名|文件夹名) # -R 要大写，代表递归作用，文件夹下所有子目录权限一致 修改组群的命令使chgrp，即change group，那么修改文件拥有者的命令自然就是chown，即change owner。chown功能很多，不仅仅能更改文件拥有者，还可以修改文件所属组群。如果需要将某一目录下的所有文件都改变其拥有者，可以使用-R参数。 语法如下： chown [-R]** #**账号名称** **文件****/****目录 chown [-R]** # **账号名称**:**组群** **文件****/****目录** ","date":"2020-11-27","objectID":"/centos7-file-auth/:1:0","tags":["CentOS7","File","Operation","Authorities"],"title":"CentOS7 文件权限管理","uri":"/centos7-file-auth/"},{"categories":["Git"],"content":"在Linux和Windows环境中为Git配置生成公私密钥","date":"2020-11-02","objectID":"/git-ssh-key/","tags":["Git","SSH","Key"],"title":"Git生成公私密钥","uri":"/git-ssh-key/"},{"categories":["Git"],"content":"Git生成公私密钥 ","date":"2020-11-02","objectID":"/git-ssh-key/:0:0","tags":["Git","SSH","Key"],"title":"Git生成公私密钥","uri":"/git-ssh-key/"},{"categories":["Git"],"content":"Windows 在Windows下查看**[c盘-\u003e用户-\u003e自己的用户名-\u003e.ssh]**下是否有*“id_rsa、id_rsa.pub”*文件，如果没有需要从第一步开始手动生成,有的话直接跳到第二步。 ","date":"2020-11-02","objectID":"/git-ssh-key/:1:0","tags":["Git","SSH","Key"],"title":"Git生成公私密钥","uri":"/git-ssh-key/"},{"categories":["Git"],"content":"第1步：创建SSH Key 打开Git Bash，在控制台中输入以下命令: $ ssh-keygen -t rsa -C “youremail@example.com” 密钥类型可以用 -t 选项指定。如果没有指定则默认生成用于SSH-2的RSA密钥。这里使用的是rsa。 同时在密钥中有一个注释字段，用-C来指定所指定的注释，可以方便用户标识这个密钥，指出密钥的用途或其他有用的信息。所以在这里输入自己的邮箱或者其他都行,当然，如果不想要这些可以直接输入： $ ssh-keygen 我一般就是这么做的。 输入完毕后按回车，程序会要求输入一个密码，输入完密码后按回车会要求再确认一次密码，如果不想要密码可以在要求输入密码的时候按两次回车，表示密码为空，并且确认密码为空，此时**[c盘\u003e用户\u003e自己的用户名\u003e.ssh]**目录下已经生成好了。 ","date":"2020-11-02","objectID":"/git-ssh-key/:1:1","tags":["Git","SSH","Key"],"title":"Git生成公私密钥","uri":"/git-ssh-key/"},{"categories":["Git"],"content":"第2步：将SSH添加到版本管理仓库 不同的版本管理代码仓库都大同小异，这里以Github举例，登录Github。打开setting-\u003eSSH keys，点击右上角 New SSH key，把**[c盘-\u003e用户-\u003e自己的用户名-\u003e.ssh]**目录下生成好的公钥*“id_rsa.pub”*文件以文本打开复制放进 key输入框中，再为当前的key起一个title来区分每个key ","date":"2020-11-02","objectID":"/git-ssh-key/:1:2","tags":["Git","SSH","Key"],"title":"Git生成公私密钥","uri":"/git-ssh-key/"},{"categories":["Operation"],"content":"记录CentOS7 防火墙操作指令笔记","date":"2020-10-10","objectID":"/cnetos7-firewall/","tags":["Operation","Linux","CentOS7","Firewall"],"title":"CentOS7 防火墙操作指令","uri":"/cnetos7-firewall/"},{"categories":["Operation"],"content":"CentOS7 防火墙操作指令 #防火墙端口列表 firewall-cmd --list-port #添加规则 firewall-cmd --zone=public --add-port=80/tcp --permanent #重启防火墙 systemctl restart firewalld.service #移除端口: firewall-cmd --zone=public --remove-port=80/tcp --permanent #多个端口: firewall-cmd --zone=public --add-port=80-90/tcp --permanent #多个端口: firewall-cmd --zone=public --add-port=80-90/tcp --permanent #删除 firewall-cmd --zone=public --remove-port=80/tcp --permanent #centos7启动防火墙 systemctl start firewalld.service #centos7停止防火墙/关闭防火墙 systemctl stop firewalld.service #centos7重启防火墙 systemctl restart firewalld.service #设置开机启用防火墙 systemctl enable firewalld.service #设置开机不启动防火墙 systemctl disable firewalld.service # 开启端口 firewall-cmd --zone=public --add-port=80/tcp --permanent # 命令含义： # --zone #作用域 # --add-port=80/tcp #添加端口，格式为：端口/通讯协议 # --permanent #永久生效，没有此参数重启后失效 # 重启防火墙 firewall-cmd --reload #常用命令介绍 firewall-cmd --state ##查看防火墙状态，是否是running firewall-cmd --reload ##重新载入配置，比如添加规则之后，需要执行此命令 firewall-cmd --get-zones ##列出支持的zone firewall-cmd --get-services ##列出支持的服务，在列表中的服务是放行的 firewall-cmd --query-service ftp ##查看ftp服务是否支持，返回yes或者no firewall-cmd --add-service=ftp ##临时开放ftp服务 firewall-cmd --add-service=ftp --permanent ##永久开放ftp服务 firewall-cmd --remove-service=ftp --permanent ##永久移除ftp服务 firewall-cmd --add-port=80/tcp --permanent ##永久添加80端口 iptables -L -n ##查看规则，这个命令是和iptables的相同的 man firewall-cmd ##查看帮助 # 更多命令，使用 firewall-cmd --help # 查看帮助文件 #\u003e\u003e\u003eCentOS 7默认使用的是firewall作为防火墙，使用iptables必须重新设置下 #直接关闭防火墙 systemctl stop firewalld.service #停止firewall systemctl disable firewalld.service #禁止firewall开机启动 # 设置 iptables service yum -y install iptables-services # 如果要修改防火墙配置，如增加防火墙端口3306 vi /etc/sysconfig/iptables # 增加规则 # -A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT # 保存退出后 systemctl restart iptables.service #重启防火墙使配置生效 systemctl enable iptables.service #设置防火墙开机启动 # 最后重启系统使设置生效即可。 # 查询端口号80 是否开启： firewall-cmd --query-port=80/tcp ","date":"2020-10-10","objectID":"/cnetos7-firewall/:0:0","tags":["Operation","Linux","CentOS7","Firewall"],"title":"CentOS7 防火墙操作指令","uri":"/cnetos7-firewall/"},{"categories":["note","CentOS7","Operation"],"content":"记录CentOS7 端口管理指令的笔记","date":"2020-10-02","objectID":"/centos-port/","tags":["note","CentOS7","Operation","Port"],"title":"CentOS7 端口管理指令","uri":"/centos-port/"},{"categories":["note","CentOS7","Operation"],"content":"CentOS7 端口管理指令 lsof -i tcp:80 # 查看80端口占用情况 netstat -ntlp # 列出所有端口 ","date":"2020-10-02","objectID":"/centos-port/:0:0","tags":["note","CentOS7","Operation","Port"],"title":"CentOS7 端口管理指令","uri":"/centos-port/"},{"categories":["CentOS7"],"content":"解决 CentOS7下 javac:未找到命令 问题 ","date":"2020-09-12","objectID":"/centos7-javac-command-not-find/","tags":["Java","Back"],"title":"CentOS7下 javac:未找到命令","uri":"/centos7-javac-command-not-find/"},{"categories":["CentOS7"],"content":"CentOS7下 javac:未找到命令 ","date":"2020-09-12","objectID":"/centos7-javac-command-not-find/:0:0","tags":["Java","Back"],"title":"CentOS7下 javac:未找到命令","uri":"/centos7-javac-command-not-find/"},{"categories":["CentOS7"],"content":"问题描述： 在linux下编译java程序，执行javac编译生成class文件时，在centos7终端输入如，javac hello.java 会提示未找到指令，但用java -verison测试环境变量是没问题的。 ","date":"2020-09-12","objectID":"/centos7-javac-command-not-find/:1:0","tags":["Java","Back"],"title":"CentOS7下 javac:未找到命令","uri":"/centos7-javac-command-not-find/"},{"categories":["CentOS7"],"content":"尝试解决： 重新再linux配置环境变量，输入 vi /etc/profile进入，添加以下代码： export JAVA_HOME=/usr/local/jdk1.8.0_144 export PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar ","date":"2020-09-12","objectID":"/centos7-javac-command-not-find/:2:0","tags":["Java","Back"],"title":"CentOS7下 javac:未找到命令","uri":"/centos7-javac-command-not-find/"},{"categories":["CentOS7"],"content":"再测试，最后也没有成功 后来在stackoverflow上看到了这个 84 down vote accepted You installed the Java Runtime Environment (JRE) only, which does not contain javac. For javac, you have to install the OpenJDK Development Environment. You can install java-devel or java-1.6.0-openjdk-devel, which both include javac. By the way: you can find out which package provides javac with a yum search, e.g. su -c ‘yum provides javac’ Another note: using yum and openjdk is only one possibility to install the JDK. Many people prefer Sun/Oracle’s “original” SDK. See How to install Java SDK on CentOS? and links for alternatives. 大意就是我们用yum来装原生的就行了 在终端输入 yum install java-devel 执行安装，再测试就行了 补充：Vi编辑常用快捷键 复制：ctrl+insert 粘贴：shift+insert 按Esc保存退出编译，shift+zz退出 ","date":"2020-09-12","objectID":"/centos7-javac-command-not-find/:3:0","tags":["Java","Back"],"title":"CentOS7下 javac:未找到命令","uri":"/centos7-javac-command-not-find/"},{"categories":["CentOS7","note","Operation"],"content":"记录CentOS7 管理MariaDB指令的笔记","date":"2020-09-09","objectID":"/centos7-mariadb/","tags":["CentOS7","note","Operation","MariaDB","DataBase"],"title":"CentOS7 管理MariaDB指令","uri":"/centos7-mariadb/"},{"categories":["CentOS7","note","Operation"],"content":"CentOS7 管理MariaDB指令 ","date":"2020-09-09","objectID":"/centos7-mariadb/:0:0","tags":["CentOS7","note","Operation","MariaDB","DataBase"],"title":"CentOS7 管理MariaDB指令","uri":"/centos7-mariadb/"},{"categories":["CentOS7","note","Operation"],"content":"基本管理指令 systemctl start mariadb #启动MariaDB systemctl stop mariadb #停止MariaDB systemctl restart mariadb #重启MariaDB systemctl enable mariadb #设置开机启动 ","date":"2020-09-09","objectID":"/centos7-mariadb/:1:0","tags":["CentOS7","note","Operation","MariaDB","DataBase"],"title":"CentOS7 管理MariaDB指令","uri":"/centos7-mariadb/"},{"categories":["CentOS7","note","Operation"],"content":"连接数据库报错Too Many Connectionsbaocuo 重启数据库即可 ","date":"2020-09-09","objectID":"/centos7-mariadb/:2:0","tags":["CentOS7","note","Operation","MariaDB","DataBase"],"title":"CentOS7 管理MariaDB指令","uri":"/centos7-mariadb/"},{"categories":["Operation"],"content":"修改Tomcat配置文件导致Tomcat部署Jstl项目报错","date":"2020-08-30","objectID":"/tomcat-jstl-error/","tags":["Back","Operation","Jsp","Jstl","Settings"],"title":"Tomcat部署Jstl项目报错","uri":"/tomcat-jstl-error/"},{"categories":["Operation"],"content":"Tomcat部署Jstl项目报错 ","date":"2020-08-30","objectID":"/tomcat-jstl-error/:0:0","tags":["Back","Operation","Jsp","Jstl","Settings"],"title":"Tomcat部署Jstl项目报错","uri":"/tomcat-jstl-error/"},{"categories":["Operation"],"content":"问题来源 原Tomcat启动有一条警告，由于看着不爽就查了办法去掉了 办法是修改Tomcat根目录下的conf文件夹下的catalina.properties文件（我这个版本的Tomcat大概在110行） apache-tomcat-9.0.41\\conf\\catalina.properties 改成如下图的样子，报错就消失了 改的时候还很年轻，并不知道自己改了什么，觉得还不错，于是天坑就挖好了 ","date":"2020-08-30","objectID":"/tomcat-jstl-error/:1:0","tags":["Back","Operation","Jsp","Jstl","Settings"],"title":"Tomcat部署Jstl项目报错","uri":"/tomcat-jstl-error/"},{"categories":["Operation"],"content":"翻车 后面跟着老师开发jsp的时候使用了jstl，然后就死活报错 四处百度无果，向老师求助，老师怀疑是未正确导包，加上我正使用最新版idea，没有j2ee创建web项目了，只能创建普通项目，进入后在添加web模块，加深了老师怀疑导包问题。 期间曾将tld文件直接解压出来使用，被老师喊停，并劝我用maven，我于是转普通j2ee项目为Maven的Web项目，结果肯定问题没解决。 后有尝试创建普通Maven项目，再加入Web组件，依然没解决。 后由于课程时间有限，老师放弃了我。 不甘心，只能解压出tld文件直接使用，熬夜追赶任务进度 ","date":"2020-08-30","objectID":"/tomcat-jstl-error/:2:0","tags":["Back","Operation","Jsp","Jstl","Settings"],"title":"Tomcat部署Jstl项目报错","uri":"/tomcat-jstl-error/"},{"categories":["Operation"],"content":"解决 项目部署时，同学没有服务器，委托我进行部署，巧妙的发现同学的项目在我这也有问题，将我的代码发给同学，同学可以运行。同时发现部署在服务器上没有任何问题，故深刻怀疑Tomcat的问题。 经过这个思路的稍作搜索，下载了新的tomcat，发现警告，想起了我对Tomcat配置文件下手的事情，所以恢复修改 系统顺利运行！！！问题终于解决。鬼问题纠结了我许久 ","date":"2020-08-30","objectID":"/tomcat-jstl-error/:3:0","tags":["Back","Operation","Jsp","Jstl","Settings"],"title":"Tomcat部署Jstl项目报错","uri":"/tomcat-jstl-error/"},{"categories":["Operation"],"content":"云服务器安装软件（端口）连接失败解决办法,附各种常用默认端口","date":"2020-08-20","objectID":"/server-port-cant-connect/","tags":["Operation","Server","Port","Error"],"title":"云服务器安装软件（端口）连接失败","uri":"/server-port-cant-connect/"},{"categories":["Operation"],"content":"云服务器安装软件（端口）连接失败 服务器需要进行控制面板对服务器端口进行放行如3306、8080 软件 默认、常用端口 协议 HTTP协议代理服务器 80/8080/3128/8081/9080 HTTP SOCKS代理协议服务器 1080 FTP（文件传输）协议代理服务器 21 Telnet（远程登录）协议代理服务器 23 HTTP服务器，默认的端口号（木马Executor开放此端口） 80 tcp HTTPS（securely transferring web pages）服务器 443 tcp /udp Telnet（不安全的文本传送）（木马Tiny Telnet Server所开放的端口） 23 tcp FTP（木马Doly Trojan、Fore、Invisible FTP、WebEx、WinCrash和Blade Runner所开放的端口）； 21 tcp TFTP（Trivial File Transfer Protocol ） 69 udp SSH（安全登录）、SCP（文件传输）、端口重定向， 22 tcp SMTP Simple Mail Transfer Protocol (E-mail)，（木马Antigen、Email Password Sender、Haebu Coceda、Shtrilitz Stealth、WinPC、WinSpy都开放这个端口）； 25 tcp POP3 Post Office Protocol (E-mail) 110 tcp WebLogic 7001 WebSphere应用程序 9080 WebSphere管理工具 9090 JBOSS 8080 TOMCAT 8080 WIN2003远程登陆 3389 Symantec AV/Filter for MSE 8081 Mysql数据库 3306 Oracle 数据库 1521 ORACLE EMCTL 1158 Oracle XDB（ XML 数据库） 8080 Oracle XDB FTP服务 2100 MS SQL SERVER数据库server 1433 tcp /udp MS SQL*SERVER数据库monitor 1434 tcp /udp QQ 1080 udp ","date":"2020-08-20","objectID":"/server-port-cant-connect/:0:0","tags":["Operation","Server","Port","Error"],"title":"云服务器安装软件（端口）连接失败","uri":"/server-port-cant-connect/"},{"categories":["Total"],"content":"两种VScode代码行检测插件，支持多种语言","date":"2020-07-28","objectID":"/vscode-count-line/","tags":["Back","Total","Font","VScode","Code-Line","Plugin"],"title":"VScode代码行的统计插件","uri":"/vscode-count-line/"},{"categories":["Total"],"content":"VScode代码行的统计插件 ","date":"2020-07-28","objectID":"/vscode-count-line/:0:0","tags":["Back","Total","Font","VScode","Code-Line","Plugin"],"title":"VScode代码行的统计插件","uri":"/vscode-count-line/"},{"categories":["Total"],"content":"VScode Counter 搜索并安装即可 ","date":"2020-07-28","objectID":"/vscode-count-line/:1:0","tags":["Back","Total","Font","VScode","Code-Line","Plugin"],"title":"VScode代码行的统计插件","uri":"/vscode-count-line/"},{"categories":["Total"],"content":"使用 ctrl + shift +p，输入counter，即可使用 ","date":"2020-07-28","objectID":"/vscode-count-line/:1:1","tags":["Back","Total","Font","VScode","Code-Line","Plugin"],"title":"VScode代码行的统计插件","uri":"/vscode-count-line/"},{"categories":["Total"],"content":"loc 搜索并安装即可 ","date":"2020-07-28","objectID":"/vscode-count-line/:2:0","tags":["Back","Total","Font","VScode","Code-Line","Plugin"],"title":"VScode代码行的统计插件","uri":"/vscode-count-line/"},{"categories":["Total"],"content":"使用 ctrl + shift +p，输入LineCount，即可使用 ","date":"2020-07-28","objectID":"/vscode-count-line/:2:1","tags":["Back","Total","Font","VScode","Code-Line","Plugin"],"title":"VScode代码行的统计插件","uri":"/vscode-count-line/"},{"categories":["CentOS7","note"],"content":"记录CentOS7 查看系统参数指令","date":"2020-07-01","objectID":"/centos7-version/","tags":["CentOS7","note","System"],"title":"CentOS7  查看系统参数","uri":"/centos7-version/"},{"categories":["CentOS7","note"],"content":"CentOS7 查看系统参数 ","date":"2020-07-01","objectID":"/centos7-version/:0:0","tags":["CentOS7","note","System"],"title":"CentOS7  查看系统参数","uri":"/centos7-version/"},{"categories":["CentOS7","note"],"content":"CentOS7 查看系统版本 cat /etc/redhat-release ","date":"2020-07-01","objectID":"/centos7-version/:1:0","tags":["CentOS7","note","System"],"title":"CentOS7  查看系统参数","uri":"/centos7-version/"},{"categories":["Linux"],"content":"分析/bin、/usr/bin、/sbin、/usr/sbin的主要区别","date":"2020-06-15","objectID":"/linux-bin-sbin/","tags":["Linux","File","Difference"],"title":"/bin、/usr/bin、/sbin、/usr/sbin的主要区别","uri":"/linux-bin-sbin/"},{"categories":["Linux"],"content":"/bin、/usr/bin、/sbin、/usr/sbin的主要区别 /bin: bin为binary的简写主要放置一些系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar等。 /usr/bin:主 要放置一些应用软体工具的必备执行档例如c++、g++、gcc、chdrv、diff、dig、du、eject、elm、free、gnome*、 gzip、htpasswd、kfm、ktop、last、less、locale、m4、make、man、mcopy、ncftp、 newaliases、nslookup passwd、quota、smb*、wget等。 /sbin: 主 要放置一些系统管理的必备程式例如:cfdisk、dhcpcd、dump、e2fsck、fdisk、halt、ifconfig、ifup、 ifdown、init、insmod、lilo、lsmod、mke2fs、modprobe、quotacheck、reboot、rmmod、 runlevel、shutdown等。 /usr/sbin:放置一些网路管理的必备程式例如:dhcpd、httpd、imap、in.*d、inetd、lpd、named、netconfig、nmbd、samba、sendmail、squid、swap、tcpd、tcpdump等。 ","date":"2020-06-15","objectID":"/linux-bin-sbin/:0:0","tags":["Linux","File","Difference"],"title":"/bin、/usr/bin、/sbin、/usr/sbin的主要区别","uri":"/linux-bin-sbin/"},{"categories":["Git"],"content":"项目中途添加.gitignore不生效的办法","date":"2020-06-03","objectID":"/git-mid-gitignore/","tags":["Git","Operation","gitignore"],"title":"项目中途添加.gitignore不生效","uri":"/git-mid-gitignore/"},{"categories":["Git"],"content":"项目中途添加.gitignore不生效的办法 ","date":"2020-06-03","objectID":"/git-mid-gitignore/:0:0","tags":["Git","Operation","gitignore"],"title":"项目中途添加.gitignore不生效","uri":"/git-mid-gitignore/"},{"categories":["Git"],"content":"方法一 # 清除 缓存区 git rm -r --cached . # 再执行正常的提交流程即可 # 我的 gitignore **/*.md ","date":"2020-06-03","objectID":"/git-mid-gitignore/:1:0","tags":["Git","Operation","gitignore"],"title":"项目中途添加.gitignore不生效","uri":"/git-mid-gitignore/"},{"categories":["Git"],"content":"方法二 删除.git文件，重新执行 # 初始化 git init 即可 ","date":"2020-06-03","objectID":"/git-mid-gitignore/:2:0","tags":["Git","Operation","gitignore"],"title":"项目中途添加.gitignore不生效","uri":"/git-mid-gitignore/"},{"categories":["Operation"],"content":"使用管理工具宝塔面板创建部署网站","date":"2020-05-31","objectID":"/bt-site/","tags":["Operation","BT","Site"],"title":"宝塔面板建站","uri":"/bt-site/"},{"categories":["Operation"],"content":"宝塔面板建站 ","date":"2020-05-31","objectID":"/bt-site/:0:0","tags":["Operation","BT","Site"],"title":"宝塔面板建站","uri":"/bt-site/"},{"categories":["Operation"],"content":"1、请自行装好宝塔面板以及Nginx、PHP（其他项目请装对应的服务器以及应用服务器） ","date":"2020-05-31","objectID":"/bt-site/:1:0","tags":["Operation","BT","Site"],"title":"宝塔面板建站","uri":"/bt-site/"},{"categories":["Operation"],"content":"2、进入对应的宝塔面板页面点击左侧导航栏的网站（1），再点击添加站点（2）， ","date":"2020-05-31","objectID":"/bt-site/:2:0","tags":["Operation","BT","Site"],"title":"宝塔面板建站","uri":"/bt-site/"},{"categories":["Operation"],"content":"3、一下添加对应的数据，并点击提交即可 ","date":"2020-05-31","objectID":"/bt-site/:3:0","tags":["Operation","BT","Site"],"title":"宝塔面板建站","uri":"/bt-site/"},{"categories":["Operation"],"content":"在Linux的CentOS8上更换国内yum源","date":"2020-04-29","objectID":"/centos8-change-source/","tags":["Operation","CentOS8","Linux","yum"],"title":"CentOS8 更换yum源","uri":"/centos8-change-source/"},{"categories":["Operation"],"content":"CentOS8 更换yum源 cd /etc/yum.repos.d/ mv CentOS-Base.repo CentOS-Base.repo_back vi CentOS-Base.repo ","date":"2020-04-29","objectID":"/centos8-change-source/:0:0","tags":["Operation","CentOS8","Linux","yum"],"title":"CentOS8 更换yum源","uri":"/centos8-change-source/"},{"categories":["Operation"],"content":"CentOS-Base.repo # # The mirror system uses the connecting IP address of the client and the # update status of each mirror to pick mirrors that are updated to and # geographically close to the client. You should use this for CentOS updates # unless you are manually picking other mirrors. # # If the mirrorlist= does not work for you, as a fall back you can try the # remarked out baseurl= line instead. # [BaseOS] name=CentOS-$releasever - Base #mirrorlist=http://mirrorlist.centos.org/?release=$releasever\u0026arch=$basearch\u0026repo=BaseOS\u0026infra=$infra baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/BaseOS/$basearch/os/ gpgcheck=1 enabled=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial #additional packages that may be useful [extras] name=CentOS-$releasever - Extras #mirrorlist=http://mirrorlist.centos.org/?release=$releasever\u0026arch=$basearch\u0026repo=extras\u0026infra=$infra baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/extras/$basearch/os/ gpgcheck=1 enabled=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial #additional packages that extend functionality of existing packages [centosplus] name=CentOS-$releasever - Plus #mirrorlist=http://mirrorlist.centos.org/?release=$releasever\u0026arch=$basearch\u0026repo=centosplus\u0026infra=$infra baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/centosplus/$basearch/os/ gpgcheck=1 enabled=0 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial [AppStream] name=CentOS-$releasever - AppStream #mirrorlist=http://mirrorlist.centos.org/?release=$releasever\u0026arch=$basearch\u0026repo=AppStream\u0026infra=$infra baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/AppStream/$basearch/os/ gpgcheck=1 enabled=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial [PowerTools] name=CentOS-$releasever - PowerTools #mirrorlist=http://mirrorlist.centos.org/?release=$releasever\u0026arch=$basearch\u0026repo=PowerTools\u0026infra=$infra baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/PowerTools/$basearch/os/ gpgcheck=1 enabled=0 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial yum clean all yum makecache ","date":"2020-04-29","objectID":"/centos8-change-source/:1:0","tags":["Operation","CentOS8","Linux","yum"],"title":"CentOS8 更换yum源","uri":"/centos8-change-source/"},{"categories":["Operation"],"content":"在Linux的Centos7系统上安装Docker","date":"2020-03-20","objectID":"/docker-centos7/","tags":["Operation","Docker","Centos7"],"title":"CentOS7上安装Docker","uri":"/docker-centos7/"},{"categories":["Operation"],"content":"CentOS7上安装Docker Docker从1.13版本之后采用时间线的方式作为版本号，分为社区版CE和企业版EE。 社区版是免费提供给个人开发者和小型团体使用的，企业版会提供额外的收费服务，比如经过官方测试认证过的基础设施、容器、插件等。 社区版按照stable和edge两种方式发布，每个季度更新stable版本，如17.06，17.09；每个月份更新edge版本，如17.09，17.10。 ","date":"2020-03-20","objectID":"/docker-centos7/:0:0","tags":["Operation","Docker","Centos7"],"title":"CentOS7上安装Docker","uri":"/docker-centos7/"},{"categories":["Operation"],"content":"一、安装docker 1、Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。 通过 uname -r 命令查看你当前的内核版本 $ uname -r 2、使用 root 权限登录 Centos。确保 yum 包更新到最新。 $ sudo yum update 3、卸载旧版本(如果安装过旧版本的话) $ sudo yum remove docker docker-common docker-selinux docker-engine 4、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 $ sudo yum install -y yum-utils device-mapper-persistent-data lvm2 5、设置yum源 $ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 6、可以查看所有仓库中所有docker版本，并选择特定版本安装 $ yum list docker-ce --showduplicates | sort -r 7、安装docker $ sudo yum install docker-ce #由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0 $ sudo yum install \u003cFQPN\u003e # 例如：sudo yum install docker-ce-17.12.0.ce 8、启动并加入开机启动 $ sudo systemctl start docker $ sudo systemctl enable docker 9、验证安装是否成功(有client和service两部分表示docker安装启动都成功了) $ docker version ","date":"2020-03-20","objectID":"/docker-centos7/:1:0","tags":["Operation","Docker","Centos7"],"title":"CentOS7上安装Docker","uri":"/docker-centos7/"},{"categories":["Operation"],"content":"二、问题 1、因为之前已经安装过旧版本的docker，在安装的时候报错如下： Transaction check error: file /usr/bin/docker from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64 file /usr/bin/docker-containerd from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64 file /usr/bin/docker-containerd-shim from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64 file /usr/bin/dockerd from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64 2、卸载旧版本的包 $ sudo yum erase docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64 3、再次安装docker $ sudo yum install docker-ce ","date":"2020-03-20","objectID":"/docker-centos7/:2:0","tags":["Operation","Docker","Centos7"],"title":"CentOS7上安装Docker","uri":"/docker-centos7/"},{"categories":["Operation"],"content":"解决centos安装不上apache:No match for argument: httpd","date":"2020-02-01","objectID":"/apache-no-match-for-argument-httpd/","tags":["Operation","Apache","Install","CentOS7","Linux"],"title":"Apache:No match for argument: httpd","uri":"/apache-no-match-for-argument-httpd/"},{"categories":["Operation"],"content":"Apache:No match for argument: httpd ","date":"2020-02-01","objectID":"/apache-no-match-for-argument-httpd/:0:0","tags":["Operation","Apache","Install","CentOS7","Linux"],"title":"Apache:No match for argument: httpd","uri":"/apache-no-match-for-argument-httpd/"},{"categories":["Operation"],"content":"找到yum.conf [root@d78acc291c9e var]# find / -name yum.conf /etc/yum.conf ","date":"2020-02-01","objectID":"/apache-no-match-for-argument-httpd/:1:0","tags":["Operation","Apache","Install","CentOS7","Linux"],"title":"Apache:No match for argument: httpd","uri":"/apache-no-match-for-argument-httpd/"},{"categories":["Operation"],"content":"注释掉exclude那行，也可只删除httpd [main] gpgcheck=1 installonly_limit=3 clean_requirements_on_remove=True best=True #exclude=httpd nginx php mysql mairadb python-psutil python2-psutil //重新安装yum install httpd -y systemctl enable httpd systemctl start httpd systemctl status httpd 　Active: active (running) 　Status: “Started, listening on: port 80” [root@d78acc291c9e var]# httpd -v Server version: Apache/2.4.37 (centos) Server built: Dec 23 2019 20:45:34 ","date":"2020-02-01","objectID":"/apache-no-match-for-argument-httpd/:2:0","tags":["Operation","Apache","Install","CentOS7","Linux"],"title":"Apache:No match for argument: httpd","uri":"/apache-no-match-for-argument-httpd/"},{"categories":["Total"],"content":"Idea设置xml模板并创建xml文件","date":"2020-01-11","objectID":"/idea-xml/","tags":["Total","Idea","xml","Model"],"title":"Idea创建xml文件","uri":"/idea-xml/"},{"categories":["Total"],"content":"Idea创建xml文件 1、File—-\u003eSettings 2、Editor(3)—-\u003eFile And Code Templates(4) —\u003e中间选中Files(5) —–\u003e点击左边+号(6)，右边是建立子模版（7），添加模板 —–\u003e输入模板名字：Name:XML File.xml （8，name可以自定义） ——\u003e后缀名extension：xml （9）—\u003e在面板中间输入内容（10，内容请根据自己需求更改，或建立子模版）： \u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e \u003cconfig\u003e \u003cclassName\u003eclassName\u003c/className\u003e \u003c/config\u003e —–\u003e把enable live Template(激活模板)勾选上（11） ——\u003e点击Apply（12）—ok 3、选中文件夹（1）—–\u003eNew（2）——–\u003e找到XML File（3），输入名字，点击确定，就可以创建xml文件了 ","date":"2020-01-11","objectID":"/idea-xml/:0:0","tags":["Total","Idea","xml","Model"],"title":"Idea创建xml文件","uri":"/idea-xml/"},{"categories":["Docker","Operation"],"content":"Docker 容器常见故障排查及处理，将常见问题分类","date":"2019-12-30","objectID":"/docker-error-by-type/","tags":["Docker","Error","Type"],"title":"Docker 容器常见故障排查及处理","uri":"/docker-error-by-type/"},{"categories":["Docker","Operation"],"content":"Docker 容器常见故障排查及处理 ","date":"2019-12-30","objectID":"/docker-error-by-type/:0:0","tags":["Docker","Error","Type"],"title":"Docker 容器常见故障排查及处理","uri":"/docker-error-by-type/"},{"categories":["Docker","Operation"],"content":"Docker是一种相对使用较简单的容器，我们可以通过以下几种方式获取信息： 1、通过docker run执行命令，或许返回信息 2、通过docker logs 去获取日志，做有针对性的筛选 3、通过systemctl status docker查看docker服务状态 4、通过journalctl -u docker.service 查看日志 ","date":"2019-12-30","objectID":"/docker-error-by-type/:1:0","tags":["Docker","Error","Type"],"title":"Docker 容器常见故障排查及处理","uri":"/docker-error-by-type/"},{"categories":["Docker","Operation"],"content":"以下是整理的docker容器类问题故障，分为9个类 ","date":"2019-12-30","objectID":"/docker-error-by-type/:2:0","tags":["Docker","Error","Type"],"title":"Docker 容器常见故障排查及处理","uri":"/docker-error-by-type/"},{"categories":["Docker","Operation"],"content":"一、启动类故障 1、docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running? 原因：Docker未正常启动 解决方式： systemctl start docker 2、can’t create unix socket /var/run/docker.sock: is a directory 原因：docker.sock不能创建 解决方式： rm -rf /var/run/docker.sock 然后重新启动docker 3、Job for docker.service failed. Failed to start Docker Application 原因：Selinux引起 解决方式： /etc/sysconfig/selinux , 把 selinux 值改为disabled 重启docker解决 4、docker: Error response from daemon: /var/lib/docker/overlay/XXXXXXXXXXXXXXXXXXXXXXX: no such file or directory. 原因：docker没有指定目录或文件 解决方式： systemctl stop docker rm -rf /var/lib/docker/* systemctl start docker 重启run镜像启动容器 5、docker: Error response from daemon: Conflict. The container name “XXX” is already in use by container “XXX”. You have to remove (or rename) that container to be able to reuse that name. 原因：docker name重名 解决方式： 改名容器或者删除重建容器 6、Error: Connection activation failed: No suitable device found for this connection 原因：网卡配置问题 解决方式： 重启网卡 7、系统重启后docker无法启动 报错为：docker0: iptables: No chain/target/match by that name 原因：docker服务iptables问题 解决方式： 重启docker服务system restart docker 8、Error starting daemon: error initializing graphdriver: driver not supported 使用overlay2存储驱动启动docker daemon报错 原因：daemon缺少配置 解决方式： 添加配置： /etc/docker/daemon.json {“storage-driver”: “overlay2”, “storage-opts”: [“overlay2.override_kernel_check=true”]} 9、Failed to start docker.service: Unit docker.service is masked. 未知原因：docker 被mask 解决方式： systemctl unmask docker.service systemctl unmask docker.socket systemctl start docker.service 10、Failed to start docker.service: Unit is not loaded properly: Invalid argument. 未知原因：docker服务无法正常load 解决方式： 卸载docker， 删除docker.service 重新安装docker 11、docker-compose启动容器时报错： /usr/lib/python2.7/site-packages/requests/init.py:80: RequestsDependencyWarning: urllib3 (1.22) or chardet (2.2.1) doesn’t match a supported version! RequestsDependencyWarning) 未知原因：pip相应组件版本不支持 解决方式： pip uninstall urllib3 pip uninstall chardet pip install requests 12、docker容器重启故障 强杀docker进程后，重启docker。docker中的容器无法启动并报错 docker restart XXXXXXX Error response from daemon: Cannot restart container XXXXXXX: container “XXXXXXXXXXXXXXXX”: already exists 原因：旧容器未安全退出 解决方式： docker-containerd-ctr –address /run/docker/containerd/docker-containerd.sock –namespace c rm \u003c容器hash_id\u003e docker start 容器 13、docker重启错误-重启命令一直卡住 systemctl restart docker 卡住 未知原因：可能是启动的容器数量过多，或者磁盘IO问题 解决方式： systemctl start docker-cleanup.service systemctl start docker ","date":"2019-12-30","objectID":"/docker-error-by-type/:2:1","tags":["Docker","Error","Type"],"title":"Docker 容器常见故障排查及处理","uri":"/docker-error-by-type/"},{"categories":["Docker","Operation"],"content":"二、权限问题报错 14、Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock 解决方式： 查看 /var/run/docker.sock所在用户组 将用户重新加入docker组中，usermod -aG docker ${USER} 15、chown socket at step GROUP: No such process 原因：docker无法找到Group组信息，docker组有可能被误删除， 解决方式： groupadd docker 16、Post http:///var/run/docker.sock/v1.XXX /auth: dial unix /var/run/docker.sock: permission denied. Are you trying to connect to a TLS-enabled daemon without TLS? 原因：非Root用户管理Docker时，权限不足 解决方式： groupadd docker usermod -a -G docker user 17、docker commit镜像时报错 Error processing tar file(exit status 1): unexpected EOF 原因：可能是权限问题引起 解决方式： chmod +x 加一个执行权限 ","date":"2019-12-30","objectID":"/docker-error-by-type/:2:2","tags":["Docker","Error","Type"],"title":"Docker 容器常见故障排查及处理","uri":"/docker-error-by-type/"},{"categories":["Docker","Operation"],"content":"三、镜像和仓库问题报错 18、Get https://registry-1.docker.io/v2/: dial tcp: lookup registry-1.docker.io 原因：Docker仓库无法访问 解决方式： 修改Docker仓库源为国内或者自建的仓库源 修改/etc/docker/daemon.json 19、推送本地镜像报错 The push refers to a repository [XXXX] Get https://xxx/v1/_ping: http: server gave HTTP response to HTTPS client 原因：docker registry未采用https服务所致 解决方式： /etc/docker/daemon.json 文件写入： { “insecure-registries”:[\"\"] } 20、/usr/bin/docker-current: Error response from daemon: oci runtime error: container_linux.go: starting container process caused “exec: “/bin/bash”: executable file not found in $PATH”. 原因：Docker镜像自身问题或者Docker引擎版本比较低导致 解决方式： 可以升级Docker版本服务 21、构建镜像，执行chown -R非常慢 原因：Docker使用写时复制策略，所以chown命令执行时，会将上层镜像文件全部复制到当前层，然后再修改权限，再写入文件系统。 解决方式： 不应该使用chown -R 这类大批量修改文件的命令 22、docker build构建镜像的时候报错： Message from syslogd kernel:unregister_netdevice: waiting for lo to become free. Usage count = 1 原因：docker engine版本过高 解决方式： docker engine版本需要和docker内部镜像的内核版本匹配 23、docker: Error response from daemon: containerd: container did not start before the specified time-out.ERRO[0133] error getting events from daemon: context canceled 原因：修改完docker root dir，重启后，下载镜像报错 解决方式： 重启docker服务 或者重启服务器 ","date":"2019-12-30","objectID":"/docker-error-by-type/:2:3","tags":["Docker","Error","Type"],"title":"Docker 容器常见故障排查及处理","uri":"/docker-error-by-type/"},{"categories":["Docker","Operation"],"content":"四、资源问题报错 25、Docker no space left on device 原因：空间不足 解决方式：清理空间,删除未被使用的容器，镜像等资源 docker system prune -a 26、/var/lib/docker/containers 占用过大 原因：日志文件占用过大 解决方式： cat /dev/null \u003e *-json.log 或者 增加dockerd启动参数，/etc/docker/daemon.json {“log-driver”:“json-file”, “log-opts”: {“max-size”:“2G”, “max-file”:“10”} 27、max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144] 原因：系统参数默认配置过小 解决方式： 修改/etc/sysctl.conf里面的vm.max_map_count 调大 28、Got starting container process caused “process_linux.go:301:running exec setns process for init caused “exit status 40””: unknown.from time to time 原因：可能是cache问题引起 解决方式： echo 1 \u003e /proc/sys/vm/drop_caches 29、docker本机启动多台容器导致出现后续容器启动失败 原因：查看硬盘空间是否满，如果不是硬盘空间问题引起 解决方式： vim /etc/sysctl.conf 添加参数 fs.aio-max-nr = 1048576 sysctl -p 30、Docker启动异常，状态反复restarting Docker logs 容器名，查看异常日志 查看/var/log/messages 原因：内存跑满，引起OOM 解决方式： 释放内存后，再启动容器 ","date":"2019-12-30","objectID":"/docker-error-by-type/:2:4","tags":["Docker","Error","Type"],"title":"Docker 容器常见故障排查及处理","uri":"/docker-error-by-type/"},{"categories":["Docker","Operation"],"content":"五、版本不兼容报错 31、overlayfs: Can’t delete file moved from base layer to newly created dir even on ext4 原因：Centos 提供的文件系统 XFS 和 Overlay 兼容问题导致, 解决方式： 这个问题的修复在内核 4.4.6以上 32、docker: Error response from daemon: OCI runtime create failed: container_linux.go:344: starting container process caused “process_linux.go:297: getting the final child’s pid from pipe caused “read init-p: connection reset by peer””: unknown. 原因：Docker版本和操作系统版本不匹配 解决方式： 重新安装和操作系统内核支持的docker 版本 ","date":"2019-12-30","objectID":"/docker-error-by-type/:2:5","tags":["Docker","Error","Type"],"title":"Docker 容器常见故障排查及处理","uri":"/docker-error-by-type/"},{"categories":["Docker","Operation"],"content":"六、网络或端口问题报错 33、WARNING: IPv4 forwarding is disabled. Networking will not work. 原因：ipv4网络无法转发 解决方式: /usr/lib/sysctl.d/00-system.conf 在最后一行添加net.ipv4.ip_forward=1 重启network服务。删除错误的容器，再次创建新容器 34、Creating network “xxxxxxx” with the default driver 原因：docker网关冲突 启动容器、docker-compose启动容器后，断网问题 解决方式： 配置 docker-compose.yml内给启动的容器配置参数network_mode: “bridge” 35、Unable to find a node that satisfies the following conditions [port xxxx] 原因：当容器使用端口映射(docker run -p xxxx:xxxx或 compose模板中的 ports)之后 系统会在宿主机上创建一个port，通过NAT来访问容器的指定port。如果宿主机上的端口被容器或者系统进程占用，就会导致端口分配失败。 解决方式： 清除占用端口的容器或者进程，或调整容器端口映射的宿主机端口避免冲突 36、Error response from daemon: service endpoint with name xxx already 原因：端口已经被占用 解决方式： 重启docker容器 37、docker: Error response from daemon: driver failed programming external connectivity on endpoint XXXXX: Bind for 0.0.0.0:80 failed: port is already allocated 原因：容器端口冲突 解决方式： 更换宿主机绑定端口 ","date":"2019-12-30","objectID":"/docker-error-by-type/:2:6","tags":["Docker","Error","Type"],"title":"Docker 容器常见故障排查及处理","uri":"/docker-error-by-type/"},{"categories":["Docker","Operation"],"content":"七、Docker安装报错 38、安装docker报Requires: container-selinux \u003e= 2.9 原因：container-selinux版本低或者是没安装的原因 解决方式： wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo yum install epel-release yum makecache yum install container-selinux 39、安装docker-compose时报错 “ImportError: ‘module’ object has no attribute ‘check_specifier’” 原因：setuptools版本问题 解决方式： 升级setuptools到30.1.0版本以上版本 pip install –upgrade setuptools 40、安装docker-compose时报错 DEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 won’t be maintained after that date. A future version of pip will drop support for Python 2.7. 原因：python2.7提示升级 解决方式： pip install -i https://pypi.douban.com/simple docker-compose ","date":"2019-12-30","objectID":"/docker-error-by-type/:2:7","tags":["Docker","Error","Type"],"title":"Docker 容器常见故障排查及处理","uri":"/docker-error-by-type/"},{"categories":["Docker","Operation"],"content":"八、Docker删除报错 41、docker删除容器报错 Error response from daemon:Driver overlay failed to remove root filesystem xxxxx: remove/var/lib/docker/overlay2/xxxxx/merged: device or resource busy 原因：容器挂载数据卷，无法直接删除 解决方式： grep docker /proc/*/mountinfo | grep xxxxx kill进程后 再重新删除容器 42、状态dead的容器删除报错 Error response from daemon: Driver aufs failed to remove root filesystem XXXXXXXXXXXXXXXX: aufs: unmount error after retries: /var/lib/docker/aufs/mnt/xxxxxxxx: device or resource busy 原因：dead状态容器无法删除，还在占用资源 解决方式： docker rm -fv 容器id 过几分钟后会自动删除 43、docker删除镜像报错 Error response from daemon: conflict: unable to remove repository reference “XXXX” (must force) - container XXXX is using its referenced image YYYY 原因：镜像正在被某容器使用 解决方式： 需要删除相关ID容器后，才能删除镜像 44、docker删除镜像报错 Error response from daemon: conflict: unable to delete XXXXXXXXXX (must be forced) - image is referenced in multiple repositories 原因：镜像login push 了远端其他仓库 解决方式： 如果不需要此镜像， docker rmi -f 强删 45、docker删除镜像报错 Error response from daemon: conflict: unable to delete XXX (cannot be forced) - image has dependent child images 原因：存在依赖于父镜像的子镜像 解决方式： 强制删除镜像或者批量删除容器，再删除镜像 ","date":"2019-12-30","objectID":"/docker-error-by-type/:2:8","tags":["Docker","Error","Type"],"title":"Docker 容器常见故障排查及处理","uri":"/docker-error-by-type/"},{"categories":["Docker","Operation"],"content":"九、其他报错 46、docker: Error response from daemon: driver failed programming external connectivity on end-point XXXXXXX: (iptables failed: iptables –wait -t filter -A DOCKER ! -i docker0 -o docker0 -p tcp -d 172.17.0.2 –dport 8080 -j ACCEPT: iptables: No chain/target/match by that name. 原因：防火墙问题引起 解决方式： 关闭防火墙，重启docker 47、执行docker info出现如下警告 WARNING: bridge-nf-call-iptables is disabled WARNING: bridge-nf-call-ip6tables is disabled 原因：配置问题引起，需要启用bridge-nf-call-iptables 解决方式： vi /etc/sysctl.conf 添加以下内容 net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 net.bridge.bridge-nf-call-arptables = 1 48、docker数据库相关报错 使用Docker创建mysql容器闪退 Database is uninitialized and password option is not specified 解决方式： docker run -d -e MYSQL_ROOT_PASSWORD=[密码] -p 3306:3306 mysql镜像 Docker使用规范建议 尽量使用最近1-2年的新的稳定的docker版本 不要去安装今年前很老的版本，大量的bug已经被新版本更新解决掉了 尽量不要去创建非常大的镜像，比如5G10G以上的 镜像要尽量轻量化，去除不必要的软件，数据等 容器内挂载宿主机配置，使用只读 容器需要-v 宿主机的配置文件，尽量使用ro只读 数据要挂载宿主机物理硬盘或存储节点上 不要直接在容器里run，避免容器宕机引起数据丢失 应用日志一定要挂到宿主机上 不要直接打印到容器内，避免只能docker logs方式查看，避免去vulume目录里查看日志 不要只使用latest标签 Tag要有个管理标准，可以根据tag查找对应版本 不要使用容器ip，配置里更不能写死（默认172.17.0.x） 容器重启后，ip很可能会变 尽量不要在单容器内跑多进程 容器不是虚拟机，尽量做到1个容器，1个进程 跨环境镜像保持一致 不论是测试，UAT，生产环境，尽量保持同一个镜像，不要变更，环境变更只需要变更环境变量参数做区分 一定监控docker容器，即使发现问题 建议使用prometheus监控容器 一定要限制docker容器的资源， 尤其是CPU、内存、硬盘空间，甚至是网络等，避免侵占宿主机的硬件资源 ","date":"2019-12-30","objectID":"/docker-error-by-type/:2:9","tags":["Docker","Error","Type"],"title":"Docker 容器常见故障排查及处理","uri":"/docker-error-by-type/"},{"categories":["Git"],"content":"解决Git提交错误怎么办的集中办法和相关知识","date":"2019-12-05","objectID":"/git-commit-wrong/","tags":["Git","Commit","Error"],"title":"Git提交错误怎么办","uri":"/git-commit-wrong/"},{"categories":["Git"],"content":"Git提交错误怎么办 ","date":"2019-12-05","objectID":"/git-commit-wrong/:0:0","tags":["Git","Commit","Error"],"title":"Git提交错误怎么办","uri":"/git-commit-wrong/"},{"categories":["Git"],"content":"方法: git reset --hard \u003ccommit_id\u003e git push origin HEAD --force ","date":"2019-12-05","objectID":"/git-commit-wrong/:1:0","tags":["Git","Commit","Error"],"title":"Git提交错误怎么办","uri":"/git-commit-wrong/"},{"categories":["Git"],"content":"其他: #根据–soft –mixed –hard，会对working tree和index和HEAD进行重置: git reset –mixed #此为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息 git reset –soft #回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可 git reset –hard #彻底回退到某个版本，本地的源码也会变为上一个版本的内容 HEAD 最近一个提交 HEAD^ 上一次 \u003ccommit_id\u003e 每次commit的SHA1值. 可以用git log 看到,也可以在页面上commit标签页里找到. ","date":"2019-12-05","objectID":"/git-commit-wrong/:2:0","tags":["Git","Commit","Error"],"title":"Git提交错误怎么办","uri":"/git-commit-wrong/"},{"categories":["Git"],"content":"commit合并 有时commit太多，而且可能一个commit只是提交一个小bug，那么合并commit势在必行。 有两种方法： 一是在提交最后一个修改的commit使用参数，这时之前的一个commit将会合并到这个即将提交的commit中来： git commit -a --amend -m \"my message here\"如果之前有一个提交，并且信息为: git commit -a -m \"my last commit message\" 则这个commit message将不存在。但该commit的信息已经合并到\"my message here\"中了。 第二个是，如果你提交了最后的修改，这时可用： $ git reset --soft HEAD^ #或HEAD^意为取消最后commit $ git commit --amend 这将会把最后一个commit合并到前一个提交中去，例如（由上往下读）： git add b.text git commit -a -m \"my message here\" git add a.text git commit -a -m \"my last commit message\" 那么最后存在的将是\"my last commit message\"。也可后退n个，合并到前面第n+1个commit中去： $ git reset --soft HEAD~n #后退到第n，我也不清楚具体含义。 $ git commit --amend [-m \"new message\"] 我觉得最方面的是调用reflog查看操作历史，找到具体的commit id，然后直接git reset –hard [commit_id]就回到你要的版本！ ","date":"2019-12-05","objectID":"/git-commit-wrong/:3:0","tags":["Git","Commit","Error"],"title":"Git提交错误怎么办","uri":"/git-commit-wrong/"},{"categories":["Docker"],"content":"解决CentOS7运行Docker报错 \"Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\" 问题","date":"2019-11-01","objectID":"/docker-daemon-is-running/","tags":["Docker","daemon","Run"],"title":"CentOS7运行Docker报错 Cannot connect to the Docker daemon at unix:///var/run/docker.sock. ","uri":"/docker-daemon-is-running/"},{"categories":["Docker"],"content":"CentOS7运行Docker报错\"Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\" 执行命令：sudo dockerd –debug 注意此条指令不能Ctrl+C停止，否则还会出现一样的错误 之后重启docker：systemctl restart docker就可以了 在网上搜了半天，有的是去编辑 /etc/docker/daemon.json 文件，而有的是在 docker.service 如果在 /etc/docker/daemon.json 的解决办法：添加 insecure-registries 即可 sudo vim /etc/docker/daemon.json { \"registry-mirrors\": [\"https://zydiol88.mirror.aliyuncs.com\"], \"insecure-registries\": [\"161.17.60.38:85\"] } 如果是在 docker.service 解决办法：在 ExecStart 添加 –insecure-registry find / -name docker.service -type f /usr/lib/systemd/system/docker.service # 在 ExecStart 这行后面加上 -insecure-registry=Harbor登录地址 sudo vim /usr/lib/systemd/system/docker.service ExecStart=/usr/bin/dockerd --insecure-registry=161.17.60.38:85 sudo systemctl daemon-reload sudo systemctl restart docker 重启完成后重新登录即可 # 在linux总端登录Harbor： sudo docker login -u tens -p Tens123456 161.17.60.38:85 ","date":"2019-11-01","objectID":"/docker-daemon-is-running/:0:0","tags":["Docker","daemon","Run"],"title":"CentOS7运行Docker报错 Cannot connect to the Docker daemon at unix:///var/run/docker.sock. ","uri":"/docker-daemon-is-running/"},{"categories":["Back"],"content":"Idea在Maven中和手动导入Jar包中直接查看Jar包源码","date":"2019-10-03","objectID":"/idea-jar-src/","tags":["Back","Idea ","Jar","Source-COde"],"title":"Idea 查看Jar包源码","uri":"/idea-jar-src/"},{"categories":["Back"],"content":"Idea 查看Jar包源码 ","date":"2019-10-03","objectID":"/idea-jar-src/:0:0","tags":["Back","Idea ","Jar","Source-COde"],"title":"Idea 查看Jar包源码","uri":"/idea-jar-src/"},{"categories":["Back"],"content":"Maven 1、从maven相关仓库添加依赖到Pom文件 2、点击Idea中的Maven（1）下的依赖文件夹（2）下的你想找源码的包（3），右键单击download source（下载源码） 3、在Idea界面按住Ctrl+Shift+P进行全局搜索，最上面的框看可以输入你需要查找的函数名（1），（2）可以全局替换，此时用不上，再选择范围最大的Scope（3），进行搜索，在下方进行单击选择函数进行查看即可。 ","date":"2019-10-03","objectID":"/idea-jar-src/:1:0","tags":["Back","Idea ","Jar","Source-COde"],"title":"Idea 查看Jar包源码","uri":"/idea-jar-src/"},{"categories":["Back"],"content":"手动导jar包 1、自行手动导jar包到项目 2、直接使用Maven分类的全局搜索即可 Maven：3、在Idea界面按住Ctrl+Shift+P进行全局搜索，最上面的框看可以输入你需要查找的函数名（1），（2）可以全局替换，此时用不上，再选择范围最大的Scope（3），进行搜索，在下方进行单击选择函数进行查看即可。 ","date":"2019-10-03","objectID":"/idea-jar-src/:2:0","tags":["Back","Idea ","Jar","Source-COde"],"title":"Idea 查看Jar包源码","uri":"/idea-jar-src/"},{"categories":["Operation"],"content":"GitLab（私服）修改仓库成员可见属性","date":"2019-09-10","objectID":"/gitlab-change-repo-visibility/","tags":["Operation","GitLab","Repository","Settings"],"title":"GitLab（私服）修改仓库可见性","uri":"/gitlab-change-repo-visibility/"},{"categories":["Operation"],"content":"GitLab（私服）修改仓库可见性 在 UI 界面中，选择 Settings \u003e General。 在弹出的界面中，选择 Visibility, project features, permissions 后面的 Expand 按钮。 然后在弹出的界面中，将 Project Visibility 下面从 Private 选择为 Public。 你的项目就可以被 Public 访问到了。 最后，不要忘记将你的修改保存以便于生效。 ","date":"2019-09-10","objectID":"/gitlab-change-repo-visibility/:0:0","tags":["Operation","GitLab","Repository","Settings"],"title":"GitLab（私服）修改仓库可见性","uri":"/gitlab-change-repo-visibility/"},{"categories":["Vim"],"content":"记录常用的Vim笔记","date":"2019-08-31","objectID":"/vim-note/","tags":["Vim","Note"],"title":"Vim笔记","uri":"/vim-note/"},{"categories":["Vim"],"content":"Vim笔记 ","date":"2019-08-31","objectID":"/vim-note/:0:0","tags":["Vim","Note"],"title":"Vim笔记","uri":"/vim-note/"},{"categories":["Vim"],"content":"指令模式下的设置 # vim高亮搜索 /名字 或 选中后 shift+3（非小键盘） # 关闭vim搜索高亮 输入:nohlsearch 或:set nohlsearch； # vim增加页码 ：set num # 或 ：set number ","date":"2019-08-31","objectID":"/vim-note/:1:0","tags":["Vim","Note"],"title":"Vim笔记","uri":"/vim-note/"},{"categories":["CentOS7"],"content":"在Linux的CentOS7系统中使用shell指令查看Git安装的路径","date":"2019-07-01","objectID":"/centos7-git-path/","tags":["CentOS7","Git","Path"],"title":"CentOS7查看Git安装的路径","uri":"/centos7-git-path/"},{"categories":["CentOS7"],"content":"CentOS7查看Git安装的路径 command -v git ","date":"2019-07-01","objectID":"/centos7-git-path/:0:0","tags":["CentOS7","Git","Path"],"title":"CentOS7查看Git安装的路径","uri":"/centos7-git-path/"},{"categories":["Docker"],"content":"解决CentOS7 Docker启动失败（can't create unix socket /var/run/docker.sock: is a directory）报错","date":"2019-06-01","objectID":"/docker-cant-create-unix-socket/","tags":["Docker","Operation","Error"],"title":"CentOS7 Docker启动失败（can't create unix socket /var/run/docker.sock: is a directory）","uri":"/docker-cant-create-unix-socket/"},{"categories":["Docker"],"content":"CentOS7 Docker启动失败（can’t create unix socket /var/run/docker.sock: is a directory） # service docker start Redirecting to /bin/systemctl start docker.service Job for docker.service failed because the control process exited with error code. See \"systemctl status docker.service\" and \"journalctl -xe\" for details. # systemctl status docker.service ● docker.service - Docker Application Container Engine Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled) Drop-In: /usr/lib/systemd/system/docker.service.d └─flannel.conf Active: failed (Result: exit-code) since Wed 2018-08-29 04:54:57 UTC; 20s ago Docs: https://docs.docker.com Process: 10689 ExecStart=/usr/bin/dockerd (code=exited, status=1/FAILURE) Main PID: 10689 (code=exited, status=1/FAILURE) ****** systemd[1]: Starting Docker Application Container Engine... ****** dockerd[10689]: can't create unix socket /var/run/docker.sock: is a directory ****** systemd[1]: docker.service: main process exited, code=exited, status=1/FAILURE ******systemd[1]: Failed to start Docker Application Container Engine. ******systemd[1]: Unit docker.service entered failed state. ******systemd[1]: docker.service failed. ","date":"2019-06-01","objectID":"/docker-cant-create-unix-socket/:0:0","tags":["Docker","Operation","Error"],"title":"CentOS7 Docker启动失败（can't create unix socket /var/run/docker.sock: is a directory）","uri":"/docker-cant-create-unix-socket/"},{"categories":["Docker"],"content":"解决 # 删除docker.sock rm -rf /var/run/docker.sock # 重新启动即可 service docker restart ","date":"2019-06-01","objectID":"/docker-cant-create-unix-socket/:1:0","tags":["Docker","Operation","Error"],"title":"CentOS7 Docker启动失败（can't create unix socket /var/run/docker.sock: is a directory）","uri":"/docker-cant-create-unix-socket/"},{"categories":["Git"],"content":"Git-Branch分支操作的常用指令笔记","date":"2019-05-01","objectID":"/git-branch/","tags":["Git","Branch"],"title":"Git-Branch分支操作","uri":"/git-branch/"},{"categories":["Git"],"content":"Git-Branch分支操作 ","date":"2019-05-01","objectID":"/git-branch/:0:0","tags":["Git","Branch"],"title":"Git-Branch分支操作","uri":"/git-branch/"},{"categories":["Git"],"content":"创建分支 # 根据名称创建分支,并切换分支 git checkout -b {name} # 示例 git checkout -b zhangsan # 这条指令是 git checkout zhangsan # 和 git branch zhangsan # 两条指令的结合体 ","date":"2019-05-01","objectID":"/git-branch/:1:0","tags":["Git","Branch"],"title":"Git-Branch分支操作","uri":"/git-branch/"},{"categories":["Git"],"content":"查看分支 # 查看所有分支，当前分支为绿色 git branch [-a] # -a 所有分支 # 创建分支 git branch mybranch # 切换分支 git checkout mybranch ","date":"2019-05-01","objectID":"/git-branch/:2:0","tags":["Git","Branch"],"title":"Git-Branch分支操作","uri":"/git-branch/"},{"categories":["Git"],"content":"修改分支名称 # 需要将分支br_rename_old修改为br_rename_new，执行如下步骤： ## 1、切换到br_rename_old分支，如果已经在这个分支下，可以不执行此步骤 git checkout br_rename_old ## 2、将代码更新到和远程仓库一致 git pull origin br_rename_old ## 3.1、将本地仓库的br_rename_old的名称修改为br_rename_new git branch -m br_rename_old br_rename_new ## 3.2、将本地仓库的当前分支的名称修改为br_rename_new git branch -m br_rename_new ## 4、将远程分支br_rename_old删除 git push origin --delete br_rename_old ## 5、将本地分支push到远程仓库 git push --set-upstream origin br_rename_new ","date":"2019-05-01","objectID":"/git-branch/:3:0","tags":["Git","Branch"],"title":"Git-Branch分支操作","uri":"/git-branch/"},{"categories":["Git"],"content":"备份分支 根据git当前提交节点创建分支button-and-input，继承之前所有提交代码 git branch button-and-input ","date":"2019-05-01","objectID":"/git-branch/:4:0","tags":["Git","Branch"],"title":"Git-Branch分支操作","uri":"/git-branch/"},{"categories":["Git"],"content":"方法一 将本地创建的button-and-input分支提交到远程，名字为button-and-input git push origin button-and-input:button-and-input ","date":"2019-05-01","objectID":"/git-branch/:4:1","tags":["Git","Branch"],"title":"Git-Branch分支操作","uri":"/git-branch/"},{"categories":["Git"],"content":"方法二 正常提交代码流程但最后一步提交到新创建的仓库或之前做过直接可以提交至新创建的远程仓库分支 git add . git commit -m \"Message\" git push origin button-and-input 二者都能达到备份代码目的 ","date":"2019-05-01","objectID":"/git-branch/:5:0","tags":["Git","Branch"],"title":"Git-Branch分支操作","uri":"/git-branch/"},{"categories":["Git"],"content":"其他 合并分支：(merge from) $ git checkout master $ git merge mybranch (merge from mybranch) 删除本地分支： $ git branch -d mybranch 强制删除分支： $ git branch -D mybranch 列出所有分支： $ git branch ","date":"2019-05-01","objectID":"/git-branch/:6:0","tags":["Git","Branch"],"title":"Git-Branch分支操作","uri":"/git-branch/"},{"categories":["Git"],"content":"非绝对必要且明白产生其他后果时才能进行的操作 # 切换分支 在没有commit时请备份代码或者commit、push后再进行提交否则，会导致当前代码全部丢失 git checkout mybranch ","date":"2019-05-01","objectID":"/git-branch/:7:0","tags":["Git","Branch"],"title":"Git-Branch分支操作","uri":"/git-branch/"},{"categories":["Git"],"content":"修改Git文件夹名字，并不能在本地直接用操作系统的文件系统修改","date":"2019-04-30","objectID":"/git-package-rename/","tags":["Git","Repository","Package"],"title":"修改Git文件夹名字","uri":"/git-package-rename/"},{"categories":["Git"],"content":"修改Git文件夹名字 “修改Git文件夹名字，并不能在本地直接用操作系统的文件系统修改 git mv -f [file] [newfile] #示例 git mv -f Github GitHub #-f=--forse,即使目标存在，也强制重命名或移动文件 ","date":"2019-04-30","objectID":"/git-package-rename/:0:0","tags":["Git","Repository","Package"],"title":"修改Git文件夹名字","uri":"/git-package-rename/"},{"categories":["Git"],"content":"展示Git常规提交流程和部分参数之间的区别","date":"2019-03-15","objectID":"/git-push/","tags":["Git","Repository"],"title":"Git常规提交流程","uri":"/git-push/"},{"categories":["Git"],"content":"Git常规提交流程 # 1.添加当前目录下的所有文件到暂存区： git add [.][-u][-A][-all] # -u 将文件的修改、文件的删除，添加到暂存区。 # . 将文件的修改，文件的新建，添加到暂存区。 # -A/-all 将文件的修改，文件的删除，文件的新建，添加到暂存区。 # 2.提交暂存区的指定文件到仓库区 -m是添加标签（Tag）信息，不添加-m参数会弹出问价，要求填写message git commit [-m \"{message}\"] # 示例 git commit -m \"这是个标签1\" # 3.从将本地的分支版本上传到远程并合并。不添加origin master会提交到默认分支，添加后可以分开分支进行开发互不干扰 git push [origin {master}] ","date":"2019-03-15","objectID":"/git-push/:0:0","tags":["Git","Repository"],"title":"Git常规提交流程","uri":"/git-push/"},{"categories":["Git"],"content":"Git在本地初始化仓库流程","date":"2019-02-04","objectID":"/git-repo-init/","tags":["Git","Init","Repository"],"title":"Git仓库初始化","uri":"/git-repo-init/"},{"categories":["Git"],"content":"Git仓库初始化 自行在系统环境中安装Git，这里不做介绍 #Git 本地仓库初始化，生成.git的隐藏文件 git init # 配置个人信息邮箱、姓名 --global是指全局有效，无论在哪个仓库均有效 ## 姓名 git config --global user.name \"{name}\" # 示例 git config --global user.name \"zhangsan\" ## 邮箱 git config --global user.email {email.example.com} # 示例 git config --global user.name \"{zhangsan.qq.com}\" # 查看配置信息 git config --list # 修改配置信息 # 重新添加一次即可覆盖 # 或 git config --global configName configValue # 删除 git config --global --unset configName (只针对存在唯一值的情况) ","date":"2019-02-04","objectID":"/git-repo-init/:0:0","tags":["Git","Init","Repository"],"title":"Git仓库初始化","uri":"/git-repo-init/"},{"categories":["Operation"],"content":"从底层解释yum makecache的作用","date":"2019-01-24","objectID":"/yum-makecache/","tags":["Operation","Linux","Yum","CodeIt","Blog"],"title":"yum makecache的作用","uri":"/yum-makecache/"},{"categories":["Operation"],"content":"yum makecache的作用 疑问： yum makecache 的作用到底是什么呢? 查看了很多的资料，都说是会从服务器中下载一些信息，但是我做了一个测试。 [root@localhost 7]# yum clean all [root@localhost 7]# yum install createrepo -y [root@localhost 7]# yum remove createrepo -y 断网之后 [root@localhost 7]# yum install createrepo -y #安装成功 #发现还是可以安装成功，所以可以判断这时通过缓存安装的。但是为了严谨再执行以下命令。 [root@localhost 7]# yum clean all #清理缓存再安装 [root@localhost 7]# yum install createrepo -y #安装失败 根据上述实验，我们可以判断yum 安装软件包的时候就已经把该软件包缓存起来了，而不需要执行yum makecache 进行额外的缓存。 但是很多资料中都说安装好软件之后需要执行yum makecache 这个命令进行缓存。(不知道是什么原因) 总结：yum安装的时候会将安装包进行缓存，不过最好还是再执行一下yum makecache命令。 ","date":"2019-01-24","objectID":"/yum-makecache/:0:0","tags":["Operation","Linux","Yum","CodeIt","Blog"],"title":"yum makecache的作用","uri":"/yum-makecache/"},{"categories":["Windows10"],"content":"Win10鼠标出现延迟现象","date":"2018-12-31","objectID":"/windows-mouse-delay/","tags":["Windows10","HardWare"],"title":"Win10鼠标出现延迟现象","uri":"/windows-mouse-delay/"},{"categories":["Windows10"],"content":"Win10鼠标出现延迟现象 ","date":"2018-12-31","objectID":"/windows-mouse-delay/:0:0","tags":["Windows10","HardWare"],"title":"Win10鼠标出现延迟现象","uri":"/windows-mouse-delay/"},{"categories":["Windows10"],"content":"1、修改控制面板电源选项 控制面板下的电源选项 找到自己当前的电源计划，点击更改计划设置 点击更改高级电源设置 在Usb设置下的USB选择性暂停设置下的使用电池和接通电源均禁用（该操作可能耗电，情况有点好转，但鼠标还是不灵敏） ","date":"2018-12-31","objectID":"/windows-mouse-delay/:1:0","tags":["Windows10","HardWare"],"title":"Win10鼠标出现延迟现象","uri":"/windows-mouse-delay/"},{"categories":["Windows10"],"content":"2、由于连接在扩展坞上，切换至USB无此情况，怀疑扩展坞问题，更换扩展坞情况有点好转，但鼠标还是不灵敏） ","date":"2018-12-31","objectID":"/windows-mouse-delay/:2:0","tags":["Windows10","HardWare"],"title":"Win10鼠标出现延迟现象","uri":"/windows-mouse-delay/"},{"categories":["Windows10"],"content":"3、随着Win10 更新，原扩展坞和鼠标延迟现象彻底消失，最新版的Win10还是有Bug的 ","date":"2018-12-31","objectID":"/windows-mouse-delay/:3:0","tags":["Windows10","HardWare"],"title":"Win10鼠标出现延迟现象","uri":"/windows-mouse-delay/"},{"categories":["note"],"content":"部署Hugo，并使用其创建静态网站，推送到Github，配置GitHub Pages","date":"2018-11-11","objectID":"/shell-script/","tags":["Operation","Shell","Script","Note"],"title":"ShellScript（.sh）脚本语法知识","uri":"/shell-script/"},{"categories":["note"],"content":"ShellScript（.sh）脚本语法知识 ","date":"2018-11-11","objectID":"/shell-script/:0:0","tags":["Operation","Shell","Script","Note"],"title":"ShellScript（.sh）脚本语法知识","uri":"/shell-script/"},{"categories":["note"],"content":"set -e的作用 #!/bin/bash set -e ... command 1 command 2 ... exit 0 你写的每个脚本都应该在文件开头加上set -e,这句语句告诉bash如果任何语句的执行结果不是true则应该退出。 这样的好处是防止错误像滚雪球般变大导致一个致命的错误，而这些错误本应该在之前就被处理掉。如果要增加可读性，可以使用set -o errexit，它的作用与set -e相同。 ","date":"2018-11-11","objectID":"/shell-script/:1:0","tags":["Operation","Shell","Script","Note"],"title":"ShellScript（.sh）脚本语法知识","uri":"/shell-script/"},{"categories":["note"],"content":"特殊变量（$0、$1、$2、 $?、 $# 、$@、 $*） shell编程中有一些特殊的变量可以使用。这些变量在脚本中可以作为全局变量来使用。 名称 说明 $0 脚本名称 $1-9 脚本执行时的参数1到参数9 $? 脚本的返回值 $# 脚本执行时，输入的参数的个数 $@ 输入的参数的具体内容（将输入的参数作为一个多个对象，即是所有参数的一个列表） $* 输入的参数的具体内容（将输入的参数作为一个单词） $@与$*的区别： 　$@与$*都可以使用一个变量来来表示所有的参数内容，但这两个变量之间有一些不同之处。 　$@：将输入的参数作为一个列表对象 　$*：将输入的参数作为一个单词 #源代码： echo \"脚本的名字是：\"$0 n=1 echo \"使用\\$@的参数列表为：\"$@ for temstr in \"$@\" do echo \"第$n个参数是：\" $temstr let n+=1 done n=1 echo \"使用\\$*的参数列表为：\"$* for temstr in \"$*\" do echo \"第$n个参数是：\" $temstr let n+=1 done #执行结果： $ ./test.sh 1 2 3 4 脚本的名字是：./test.sh 使用$@的参数列表为：1 2 3 4 第1个参数是： 1 第2个参数是： 2 第3个参数是： 3 第4个参数是： 4 使用$*的参数列表为：1 2 3 4 第1个参数是： 1 2 3 4 在上面的例子中，使用$@与$*是，都是用双引号引起来，但当$*不使用双引号时，结果与$@的结果相同。 　原因分析： 　当都使用双引号时，我们可以看到参数列表输出都是一样的，说明确实两个变量都可以存储所有的参数内容，也就显示出来两个变量之间的对参数处理的不同，即一个将其作为列表处理，一个讲所有参数作为一个单词处理。 　当$*不适用双引号时，执行到for语句时，会首先将$*的值（1 2 3 4 ）取出来，然后循环语句就变成了　for tem in 1 2 3 4 ，最后的输出结果也就变成了列表的循环输出。 #源码： #!/bin/bash n=1 for tem in $* do echo $n is $tem let n+=1 done 执行结果： # ./test.sh 1 2 3 4 1 is 1 2 is 2 3 is 3 4 is 4 　在这里补充一下单引号、双引号以及没有引号的区别： 单引号： 　可以说是所见即所得：即将单引号内的内容原样输出，或者描述为单引号里面看见的是什么就会输出什么。 双引号： 　把双引号内的内容输出出来；如果内容中有命令，变量等，会先把变量，命令解析出结果，然后在输出最终内容来。 　双引号内命令或变量的写法为命令或变量或$（命令或变量）。 无引号： 　把内容输出出来，可能不会讲含有空格的字符串视为一个整体输出； 　如果内容中有命令、变量等，会先把变量、命令解析结果，然后在输出最终内容来； 　如果字符串中带有空格等特殊字符，则不能完整的输出，需要改加双引号，一般连续的字符串，数字，路径等可以用，不过最好用双引号替代之 ","date":"2018-11-11","objectID":"/shell-script/:2:0","tags":["Operation","Shell","Script","Note"],"title":"ShellScript（.sh）脚本语法知识","uri":"/shell-script/"},{"categories":["note"],"content":"Shell脚本IF条件判断和判断条件总结 这里有IF条件判断的语法和常用的判断条件总结,需要的朋友可以参考下 ","date":"2018-11-11","objectID":"/shell-script/:3:0","tags":["Operation","Shell","Script","Note"],"title":"ShellScript（.sh）脚本语法知识","uri":"/shell-script/"},{"categories":["note"],"content":"前言: 无论什么编程语言都离不开条件判断。SHELL也不例外。 代码如下: if list then do something here elif list then do another thing here else do something else here fi ","date":"2018-11-11","objectID":"/shell-script/:3:1","tags":["Operation","Shell","Script","Note"],"title":"ShellScript（.sh）脚本语法知识","uri":"/shell-script/"},{"categories":["note"],"content":"EX: 代码如下: \\#!/bin/sh SYSTEM=`uname -s` #获取操作系统类型，我本地是linux if [ $SYSTEM = \"Linux\" ] ; then #如果是linux的话打印linux字符串 echo \"Linux\" elif [ $SYSTEM = \"FreeBSD\" ] ; then echo \"FreeBSD\" elif [ $SYSTEM = \"Solaris\" ] ; then echo \"Solaris\" else echo \"What?\" fi #ifend 基本上和其他脚本语言一样。没有太大区别。不过值得注意的是。[]里面的条件判断。 ","date":"2018-11-11","objectID":"/shell-script/:3:2","tags":["Operation","Shell","Script","Note"],"title":"ShellScript（.sh）脚本语法知识","uri":"/shell-script/"},{"categories":["note"],"content":"1、字符串判断 条件 解释 str1 = str2 当两个串有相同内容、长度时为真 str1 != str2 当串str1和str2不等时为真 -n str1 当串的长度大于0时为真(串非空) -z str1 当串的长度为0时为真(空串) str1 当串str1为非空时为真 ","date":"2018-11-11","objectID":"/shell-script/:3:3","tags":["Operation","Shell","Script","Note"],"title":"ShellScript（.sh）脚本语法知识","uri":"/shell-script/"},{"categories":["note"],"content":"2、数字的判断 条件 解释 int1 -eq int2 两数相等为真 int1 -ne int2 两数不等为真 int1 -gt int2 int1大于int2为真 int1 -ge int2 int1大于等于int2为真 int1 -lt int2 int1小于int2为真 int1 -le int2 int1小于等于int2为真 ","date":"2018-11-11","objectID":"/shell-script/:3:4","tags":["Operation","Shell","Script","Note"],"title":"ShellScript（.sh）脚本语法知识","uri":"/shell-script/"},{"categories":["note"],"content":"3、文件的判断 参数 解释 -r file 用户可读为真 -w file 用户可写为真 -x file 用户可执行为真 -f file 文件为正规文件为真 -d file 文件为目录为真 -c file 文件为字符特殊文件为真 -b file 文件为块特殊文件为真 -s file 文件大小非0时为真 -t file 当文件描述符(默认为1)指定的设备为终端时为真 ","date":"2018-11-11","objectID":"/shell-script/:3:5","tags":["Operation","Shell","Script","Note"],"title":"ShellScript（.sh）脚本语法知识","uri":"/shell-script/"},{"categories":["note"],"content":"4、复杂逻辑判断 参数 解释 -a 与 -o 或 ! 非 ","date":"2018-11-11","objectID":"/shell-script/:3:6","tags":["Operation","Shell","Script","Note"],"title":"ShellScript（.sh）脚本语法知识","uri":"/shell-script/"},{"categories":["note"],"content":"结尾： 语法虽然简单，但是在SHELL里使用的时候，他的功能变得强大了。 ================================================================== ","date":"2018-11-11","objectID":"/shell-script/:3:7","tags":["Operation","Shell","Script","Note"],"title":"ShellScript（.sh）脚本语法知识","uri":"/shell-script/"},{"categories":["note"],"content":"附 表： 参数 解释 [ -a FILE ] 如果 FILE 存在则为真。 [ -b FILE ] 如果 FILE 存在且是一个块特殊文件则为真。 [ -c FILE ] 如果 FILE 存在且是一个字特殊文件则为真。 [ -d FILE ] 如果 FILE 存在且是一个目录则为真。 [ -e FILE ] 如果 FILE 存在则为真。 [ -f FILE ] 如果 FILE 存在且是一个普通文件则为真。 [ -g FILE ] 如果 FILE 存在且已经设置了SGID则为真。 [ -h FILE ] 如果 FILE 存在且是一个符号连接则为真。 [ -k FILE 如果 FILE 存在且已经设置了粘制位则为真。 [ -p FILE ] 如果 FILE 存在且是一个名字管道(F如果O)则为真。 [ -r FILE ] 如果 FILE 存在且是可读的则为真。 [ -s FILE ] 如果 FILE 存在且大小不为0则为真。 [ -t FD ] 如果文件描述符 FD 打开且指向一个终端则为真。 [ -u FILE ] 如果 FILE 存在且设置了SUID (set user ID)则为真。 [ -w FILE ] 如果 FILE 如果 FILE 存在且是可写的则为真。 [ -x FILE ] 如果 FILE 存在且是可执行的则为真。 [ -O FILE ] 如果 FILE 存在且属有效用户ID则为真。 [ -G FILE ] 如果 FILE 存在且属有效用户组则为真。 [ -L FILE ] 如果 FILE 存在且是一个符号连接则为真。 [ -N FILE ] 如果 FILE 存在 and has been mod如果ied since it was last read则为真。 [ -S FILE ] 如果 FILE 存在且是一个套接字则为真。 [ FILE1 -nt FILE2 ] 如果 FILE1 has been changed more recently than FILE2, or 如果 FILE1 exists and FILE2 does not则为真。 [ FILE1 -ot FILE2 ] 如果 FILE1 比 FILE2 要老, 或者 FILE2 存在且 FILE1 不存在则为真。 [ FILE1 -ef FILE2 ] 如果 FILE1 和 FILE2 指向相同的设备和节点号则为真。 [ -o OPTIONNAME ] 如果 shell选项 “OPTIONNAME” 开启则为真。 [ -z STRING ] “STRING” 的长度为零则为真。 [ -n STRING ] or [ STRING ] “STRING” 的长度为非零 non-zero则为真。 [ STRING1 == STRING2 ] 如果2个字符串相同。 “=” may be used instead of “==” for strict POSIX compliance则为真。 [ STRING1 != STRING2 ] 如果字符串不相等则为真。 [ STRING1 \u003c STRING2 ] 如果 “STRING1” sorts before “STRING2” lexicographically in the current locale则为真。 [ STRING1 \u003e STRING2 ] 如果 “STRING1” sorts after “STRING2” lexicographically in the current locale则为真。 [ ARG1 OP ARG2 ] “OP” is one of -eq, -ne, -lt, -le, -gt or -ge. These arithmetic binary operators return true if “ARG1” is equal to, not equal to, less than, less than or equal to, greater than, or greater than or equal to “ARG2”, respectively. “ARG1” and “ARG2” are integers. ","date":"2018-11-11","objectID":"/shell-script/:3:8","tags":["Operation","Shell","Script","Note"],"title":"ShellScript（.sh）脚本语法知识","uri":"/shell-script/"},{"categories":["Front"],"content":"在火狐浏览器设置禁用js","date":"2018-10-15","objectID":"/firefox-forbid-js/","tags":["Front","Brower","JavaScrip","Settings"],"title":"火狐浏览器禁用js","uri":"/firefox-forbid-js/"},{"categories":["Front"],"content":"火狐浏览器禁用js 首先打开火狐浏览器 接着再地址栏输入about:config，点击回车键 接着看到如下画面。去掉下次任显示此警告前面的方框里的钩，再点击我 保证会小心按钮 点击后看到如下画面，在搜索地址栏中输入javascript.enabled 接着就会看到如下图，原来有很多的内容变成之后两个了。 鼠标右键第一个，弹出菜单。再点击切换 当一行的中的，值由trun变成false。时候说明已经关闭了。 如下图只要打开有javascript，页面就会无法使用了。有些页面还会提示。 ","date":"2018-10-15","objectID":"/firefox-forbid-js/:0:0","tags":["Front","Brower","JavaScrip","Settings"],"title":"火狐浏览器禁用js","uri":"/firefox-forbid-js/"},{"categories":["Operation"],"content":"Win10系统更新出现请重试(Ox80070003)报错","date":"2018-09-15","objectID":"/win10-update-80070003/","tags":["Operation","Win10","Update"],"title":"Windows10更新失败","uri":"/win10-update-80070003/"},{"categories":["Operation"],"content":"Windows10更新失败 ","date":"2018-09-15","objectID":"/win10-update-80070003/:0:0","tags":["Operation","Win10","Update"],"title":"Windows10更新失败","uri":"/win10-update-80070003/"},{"categories":["Operation"],"content":"Win10系统更新出现请重试(Ox80070003)报错 关闭Windows Update服务 删除C:\\Windows\\SoftwareDistribution\\Download下的内容 启动Windows Update服务 再次更新即可 ","date":"2018-09-15","objectID":"/win10-update-80070003/:1:0","tags":["Operation","Win10","Update"],"title":"Windows10更新失败","uri":"/win10-update-80070003/"},{"categories":["documentation"],"content":"探索 Hugo - CodeIT 主题的全部内容和背后的核心概念.","date":"2020-03-06","objectID":"/theme-documentation-basics/","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"探索 Hugo - CodeIT 主题的全部内容和背后的核心概念. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:0:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"1 准备 由于 Hugo 提供的便利性, Hugo 本身是这个主题唯一的依赖. 直接安装满足你操作系统 (Windows, Linux, macOS) 的最新版本  Hugo (\u003e 0.78.1). 推荐使用 Hugo extended 版本 由于这个主题的一些特性需要将  SCSS 转换为  CSS, 推荐使用 Hugo extended 版本来获得更好的使用体验. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:1:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2 安装 以下步骤可帮助你初始化新网站. 如果你根本不了解 Hugo, 我们强烈建议你按照此 快速入门文档 进一步了解它. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.1 创建你的项目 Hugo 提供了一个 new 命令来创建一个新的网站: hugo new site my_website cd my_website ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.2 安装主题 CodeIT 主题的仓库是: https://github.com/sunt-programator/CodeIT. 你可以下载主题的 最新版本  .zip 文件 并且解压放到 themes 目录. 另外, 也可以直接把这个主题克隆到 themes 目录: git clone https://github.com/sunt-programator/CodeIT.git themes/CodeIT 或者, 初始化你的项目目录为 git 仓库, 并且把主题仓库作为你的网站目录的子模块: git init git submodule add https://github.com/sunt-programator/CodeIT.git themes/CodeIT ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.3 基础配置 以下是 CodeIT 主题的基本配置: baseURL = \"http://example.org/\" # [en, zh-cn, fr, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 网站标题 title = \"我的全新 Hugo 网站\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"CodeIT\" [params] # CodeIT 主题版本 version = \"0.2.X\" [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/sunt-programator/CodeIT/issues/158) noClasses = false 注意 在构建网站时, 你可以使用 --theme 选项设置主题. 但是, 我建议你修改配置文件 (config.toml) 将本主题设置为默认主题. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.4 创建你的第一篇文章 以下是创建第一篇文章的方法: hugo new posts/first_post.md 通过添加一些示例内容并替换文件开头的标题, 你可以随意编辑文章. 注意 默认情况下, 所有文章和页面均作为草稿创建. 如果想要渲染这些页面, 请从元数据中删除属性 draft: true, 设置属性 draft: false 或者为 hugo 命令添加 -D/--buildDrafts 参数. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:4","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.5 在本地启动网站 使用以下命令启动网站: hugo serve 去查看 http://localhost:1313. 基本配置下的预览基本配置下的预览 \" 基本配置下的预览 技巧 当你运行 hugo serve 时, 当文件内容更改时, 页面会随着更改自动刷新. 注意 由于本主题使用了 Hugo 中的 .Scratch 来实现一些特性, 非常建议你为 hugo server 命令添加 --disableFastRender 参数来实时预览你正在编辑的文章页面. hugo serve --disableFastRender ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:5","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.6 构建网站 当你准备好部署你的网站时, 运行以下命令: hugo 会生成一个 public 目录, 其中包含你网站的所有静态内容和资源. 现在可以将其部署在任何 Web 服务器上. 技巧 网站内容可以通过 Netlify 自动发布和托管 (了解有关通过 Netlify 进行 HUGO 自动化部署 的更多信息). 或者, 您可以使用 AWS Amplify, Github pages, Render 以及更多… ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:6","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3 配置 ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.1 网站配置 除了 Hugo 全局配置 和 菜单配置 之外, CodeIT 主题还允许您在网站配置中定义以下参数 (这是一个示例 config.toml, 其内容为默认值). 请打开下面的代码块查看完整的示例配置 : [params] # CodeIT 主题版本 version = \"0.2.X\" # 网站描述 description = \"这是我的全新 Hugo 网站\" # 网站关键词 keywords = [\"Theme\", \"Hugo\"] # 网站默认主题样式 (\"light\", \"dark\", \"auto\") defaultTheme = \"auto\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # (\"sha256\", \"sha384\", \"sha512\", \"md5\") fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"CodeIT\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Android 浏览器主题色 themeColor = \"#ffffff\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10磁贴颜色 tileColor = \"#da532c\" # 搜索配置 [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" # 页面头部导航栏配置 [params.header] # 桌面端导航栏模式 (\"fixed\", \"normal\", \"auto\") desktopMode = \"fixed\" # 移动端导航栏模式 (\"fixed\", \"normal\", \"auto\") mobileMode = \"auto\" # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"\" # 标题名称 name = \"\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # 是否为标题显示打字机动画 typeit = false # 页面底部信息配置 [params.footer] enable = true # 自定义内容 (支持 HTML 格式) custom = '' # 是否显示 Hugo 和主题信息 hugo = true # 是否显示版权信息 copyright = true # 是否显示作者 author = true # 网站创立年份 since = 2019 # ICP 备案信息，仅在中国使用 (支持 HTML 格式) icp = \"\" # 许可协议信息 (支持 HTML 格式) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (所有文章) 页面配置 [params.section] # section 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # List (目录或标签) 页面配置 [params.list] # list 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # 主页配置 [params.home] # RSS 文章数目 rss = 10 # 主页个人信息 [params.home.profile] enable = true # Gravatar 邮箱，用于优先在主页显示的头像 gravatarEmail = \"\" # 主页显示头像的 URL avatarURL = \"/images/avatar.png\" # 主页显示的网站标题 (支持 HTML 格式) title = \"\" # 主页显示的网站副标题 subtitle = \"这是我的全新 Hugo 网站\" # (HTML format is supported) # 是否为副标题显示打字机动画 typeit = true # 是否显示社交账号 social = true # 免责声明 (支持 HTML 格式) disclaimer = \"\" # 主页文章列表 [params.home.posts] enable = true # 主页每页显示文章数量 paginate = 6 # 被 params.page 中的 hiddenFromHomePage 替代 # 当你没有在文章前置参数中设置 \"hiddenFromHomePage\" 时的默认行为 defaultHiddenFromHomePage = false # 作者的社交信息设置 [params.social] GitHub = \"xxxx\" Linkedin = \"\" Twitter = \"xxxx\" Instagram = \"xxxx\" Facebook = \"xxxx\" Telegram = \"xxxx\" Medium = \"\" Gitlab = \"\" Youtubelegacy = \"\" Youtubecustom = \"\" Youtubechannel = \"\" Tumblr = \"\" Quora = \"\" Keybase = \"\" Pinterest = \"\" Reddit = \"\" Codepen = \"\" FreeCodeCamp = \"\" Bitbucket = \"\" Stackoverflow = \"\" Weibo = \"\" Odnoklassniki = \"\" VK = \"\" Flickr = \"\" Xing = \"\" Snapchat = \"\" Soundcloud = \"\" Spotify = \"\" Bandcamp = \"\" Paypal = \"\" Fivehundredpx = \"\" Mix = \"\" Goodreads = \"\" Lastfm = \"\" Foursquare = \"\" Hackernews = \"\" Kickstarter = \"\" Patreon = \"\" Steam = \"\" Twitch = \"\" Strava = \"\" Skype = \"\" Whatsapp = \"\" Zhihu = \"\" Douban = \"\" Angellist = \"\" Slidershare = \"\" Jsfiddle = \"\" Deviantart = \"\" Behance = \"\" Dribbble = \"\" Wordpress = \"\" Vine = \"\" Googlescholar = \"\" Researchgate = \"\" Mastodon = \"\" Thingiverse = \"\" Devto = \"\" Gitea = \"\" XMPP = \"\" Matrix = \"\" Bilibili = \"\" Email = \"xxxx@xxxx.com\" RSS = true # # 文章页面配置 [params.page] # 是否在主页隐藏一篇文章 hiddenFromHomePage = false # 是否在搜索结果中隐藏一篇文章 hiddenFromSearch = false # 是否使用 twemoji twemoji = false # 是否使用 lightgallery lightgallery = false # 是否使用 ruby 扩展语法 ruby = true # 是否使用 fraction 扩展语法 fraction = true # 是否使用 fontawesome 扩展语法 fontawesome = true # 是否在文章页面显示原始 Markdown 文档链接 linkToMarkdown = true # 是","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.2 网站图标, 浏览器配置, 网站清单 强烈建议你把: apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) 放在 /static 目录. 利用 https://realfavicongenerator.net/ 可以很容易地生成这些文件. 可以自定义 browserconfig.xml 和 site.webmanifest 文件来设置 theme-color 和 background-color. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.3 自定义样式 注意 Hugo extended 版本对于自定义样式是必需的. 通过定义自定义 .scss 样式文件, CodeIT 主题支持可配置的样式. 包含自定义 .scss 样式文件的目录相对于 你的项目根目录 的路径为 assets/css. 在 assets/css/_override.scss 中, 你可以覆盖 themes/CodeIT/assets/css/_variables.scss 中的变量以自定义样式. 这是一个例子: @import url(\"https://fonts.googleapis.com/css?family=Fira+Mono:400,700\u0026display=swap\u0026subset=latin-ext\"); $code-font-family: Fira Mono, Source Code Pro, Menlo, Consolas, Monaco, monospace; 在 assets/css/_custom.scss 中, 你可以添加一些 CSS 样式代码以自定义样式. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4 多语言和 i18n CodeIT 主题完全兼容 Hugo 的多语言模式, 并且支持在网页上切换语言. 语言切换语言切换 \" 语言切换 ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.1 兼容性 语言 Hugo 代码 HTML lang 属性 主题文档 Lunr.js 支持 英语 en en 简体中文 zh-cn zh-CN 法语 fr fr 波兰语 pl pl 巴西葡萄牙语 pt-br pt-BR 意大利语 it it 西班牙语 es es 德语 de de 塞尔维亚语 pl pl 俄语 ru ru 罗马尼亚语 ro ro 越南语 vi vi ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.2 基本配置 学习了 Hugo 如何处理多语言网站 之后, 请在 站点配置 中定义你的网站语言. 例如, 一个支持英语, 中文和法语的网站配置: # [en, zh-cn, fr, pl, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" [languages] [languages.en] weight = 1 title = \"My New Hugo Site\" languageCode = \"en\" languageName = \"English\" [[languages.en.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" weight = 1 [[languages.en.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" weight = 2 [[languages.en.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" weight = 3 [languages.zh-cn] weight = 2 title = \"我的全新 Hugo 网站\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true [[languages.zh-cn.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"文章\" url = \"/posts/\" title = \"\" weight = 1 [[languages.zh-cn.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[languages.zh-cn.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 [languages.fr] weight = 3 title = \"Mon nouveau site Hugo\" languageCode = \"fr\" languageName = \"Français\" [[languages.fr.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Postes\" url = \"/posts/\" title = \"\" weight = 1 [[languages.fr.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Balises\" url = \"/tags/\" title = \"\" weight = 2 [[languages.fr.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Catégories\" url = \"/categories/\" title = \"\" weight = 3 然后, 对于每个新页面, 将语言代码附加到文件名中. 单个文件 my-page.md 需要分为三个文件: 英语: my-page.en.md 中文: my-page.zh-cn.md 法语: my-page.fr.md 注意 请注意, 菜单中仅显示翻译的页面. 它不会替换为默认语言内容. 技巧 也可以使用 文章前置参数 来翻译网址. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.3 修改默认的翻译字符串 翻译字符串用于在主题中使用的常见默认值. 目前提供一些语言的翻译, 但你可能自定义其他语言或覆盖默认值. 要覆盖默认值, 请在你项目的 i18n 目录 i18n/\u003clanguageCode\u003e.toml 中创建一个新文件，并从 themes/CodeIT/i18n/en.toml 中获得提示. 另外, 由于你的翻译可能会帮助到其他人, 请花点时间通过  创建一个 PR 来贡献主题翻译, 谢谢! ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5 搜索 基于 Lunr.js 或 algolia, CodeIT 主题支持搜索功能. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.1 输出配置 为了生成搜索功能所需要的 index.json, 请在你的 网站配置 中添加 JSON 输出文件类型到 outputs 部分的 home 字段中. [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.2 搜索配置 基于 Hugo 生成的 index.json 文件, 你可以激活搜索功能. 这是你的 网站配置 中的搜索部分: [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" 怎样选择搜索引擎? 以下是两种搜索引擎的对比: lunr: 简单, 无需同步 index.json, 没有 contentLength 的限制, 但占用带宽大且性能低 (特别是中文需要一个较大的分词依赖库) algolia: 高性能并且占用带宽低, 但需要同步 index.json 且有 contentLength 的限制 文章内容被 h2 和 h3 HTML 标签切分来提高查询效果并且基本实现全文搜索. contentLength 用来限制 h2 和 h3 HTML 标签开头的内容部分的最大长度. 关于 algolia 的使用技巧 你需要上传 index.json 到 algolia 来激活搜索功能. 你可以使用浏览器来上传 index.json 文件但是一个自动化的脚本可能效果更好. Algolia Atomic 是一个不错的选择. 为了兼容 Hugo 的多语言模式, 你需要上传不同语言的 index.json 文件到对应的 algolia index, 例如 zh-cn/index.json 或 fr/index.json… ","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁.","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁. Hugo 使用 Markdown 为其简单的内容格式. 但是, Markdown 在很多方面都无法很好地支持. 你可以使用纯 HTML 来扩展可能性. 但这恰好是一个坏主意. 大家使用 Markdown, 正是因为它即使不经过渲染也可以轻松阅读. 应该尽可能避免使用 HTML 以保持内容简洁. 为了避免这种限制, Hugo 创建了 shortcodes. shortcode 是一个简单代码段, 可以生成合理的 HTML 代码, 并且符合 Markdown 的设计哲学. Hugo 附带了一组预定义的 shortcodes, 它们实现了一些非常常见的用法. 提供这些 shortcodes 是为了方便保持你的 Markdown 内容简洁. ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:0:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"1 figure figure 的文档 一个 figure 示例: {{\u003c figure src=\"/images/lighthouse.jpg\" title=\"Lighthouse (figure)\" \u003e}} 呈现的输出效果如下: Lighthouse (figure) 输出的 HTML 看起来像这样: \u003cfigure\u003e \u003cimg src=\"/images/lighthouse.jpg\" /\u003e \u003cfigcaption\u003e \u003ch4\u003eLighthouse (figure)\u003c/h4\u003e \u003c/figcaption\u003e \u003c/figure\u003e ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:1:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"2 gist gist 的文档 一个 gist 示例: {{\u003c gist spf13 7896402 \u003e}} 呈现的输出效果如下: 输出的 HTML 看起来像这样: \u003cscript type=\"application/javascript\" src=\"https://gist.github.com/spf13/7896402.js\" \u003e\u003c/script\u003e ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:2:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"3 highlight highlight 的文档 一个 highlight 示例: {{\u003c highlight html \u003e}} \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e {{\u003c /highlight \u003e}} 呈现的输出效果如下: \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:3:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"4.1 instagram(旧版) instagram 的文档 instagram官方文档（Facebook） 一个 instagram 示例: {{\u003c instagram BWNjjyYFxVx hidecaption \u003e}} 呈现的输出效果如下: 此功能被丢弃更换为新版方式获取 ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:4:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"4.2 instagram(新版) instagram 的文档（Hugo官方未更新） instagram官方文档（Fackbook） #1.在开发者官方注册 #在开发者工具中创建任务获取app-id和app-secret，填入下面的请求地址 curl -X GET \"https://graph.facebook.com/oauth/access_token ?client_id={your-app-id} \u0026client_secret={your-app-secret} \u0026grant_type=client_credentials\" # 示例 curl -X GET \"https://graph.facebook.com/oauth/access_token ?client_id=123\u0026client_secret={456} \u0026grant_type=client_credentials\" #获得token后填入下面的地址，即可获得返回的html代码 curl -X GET \\ 'https://graph.facebook.com/v10.0/instagram_oembed?url={url}\u0026access_token={access-token}\" # 示例 curl -X GET \\ 'https://graph.facebook.com/v10.0/instagram_oembed?url=https://www.instagram.com/p/fA9uwTtkSN/\u0026access_token=IGQVJ...\" 总结如下，新版无法进行直接内嵌完成，需要完成以下步骤（两种方式均可）参考前端大佬js获取的方式 Instagram oEmbed 嵌入 IG 貼文 Facebook：应用程式、ID、密钥、URL 4.2.1直接使用手机客户端应用打开，找到对应的文章，点击三点，再点击内嵌即可生成对应的访问地址 4.2.2使用代码方式步骤 到Facebook for Developers上建立一个应用程序，取得编号、密钥 要在Firebase 开启Facebook 登入功能，需要有一组Facebook 应用程式的ID、密钥。 本篇建立的应用程式是示范用，本篇上线时就会删除，因此应用程式编号、密钥都会不存在。 进到FACEBOOK for Developers的页面并登入FB帐号后，点击「建立应用程式」： 工作的部份选「更多选项」： 下一个是要填写应用程式的显示名称，就填一个我们看得懂在做什么的名称： 填完后按下「建立应用程式」，就会建立完成。 ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:5:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"应用程式编号、密钥、OAuth URL 应用程式建立完，进到应用程式，左侧选单点击「设定\u003e 基本资料」，就会看到「应用程式编号」、「应用程式密钥」，以及一些需要填写的栏位： 应用程序上新增产品：oEmbed，并把应用程序调整成「上线」 ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:5:1","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"新增产品：oEmbed 应用程式建立完成后，左侧选单点击「产品」旁边的「+」： 然后找到「oEmbed」这项，点击「设定」： 会跳一个确认框，打勾后按下「确认」，左侧的产品清单就会新增oEmbed，代表新增成功。 最后顶部那条有一个显示为「调整中」的Toggle 按钮： 我们点一下按钮，并确认要切换模式，让它变成「上线」，这个应用程式就可以对外使用了： 在Google云端硬盘上新增Google Apps Script的档案，档案中写取得Access Token的代码 ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:6:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"新增GAS 档案当后端，取得FB Access Token 为了要能够使用FB 的应用程式，必须要有一个Access Token 才能够被FB 放行，因为取Token 的过程会用到密钥，因此要写在后端，写在前端会被看光光。 最快写一支后端的方式就是用Google 云端硬碟里的Google Apps Script 档案，以下简称GAS。 进到Google 云端硬碟，点左上角的「新增\u003e 更多\u003e Google Apps Script」： 进到档案后，我们先改个档名进行存档，滑到左上角的档案名称上，点击一次就可以开始改档名 右侧预设会有一个myFunction，整个删掉后，贴上以下程式码，主要是来取得Access Token的： var appId = '从FB后台取得的「应用程式编号」' ; var secret = '从FB后台取得的「应用程式密钥」' ; var uri = 'https://graph.facebook.com/oauth/access_token?client_id=' + appId + '\u0026client_secret=' + secret + '\u0026grant_type=client_credentials' ; function doGet ( e ) { var response = UrlFetchApp . fetch ( uri ) ; return ContentService . createTextOutput ( response ) . setMimeType ( ContentService . MimeType . JSON ) ; } appId、secret这二个变数记得要修改。 doGet指的是当这个GAS预到GET时要执行哪些动作，function里面写的是向FB取得Access Token。 程式码贴上并更新好变数后，按下右上角的「部署\u003e 新增部署作业」： 点击「选取类型」右边的齿轮icon，选择「网页应用程式」： 接着右侧「谁可以存取」的地方改为所有人： 按下「部署」后，第一次部署会需要开存取权： 点击上图的「授予存取权」后，会出现一个警告视窗： 因为这个应用程式是我们自己写的，是可以相信的，点击上图左上角的「进阶」后，会展开一小行字： 点击上图左下角的「前往XXX（不安全）」，因为我们的应用程式没向Google 请求验证过，这边就会一直秀出不安全的字样。 点击了以后会要授予存取权： 按下「允许」，这个GAS 档就成功部署，并且会给一串网址： 这个网址很重要，就像API一样，GET这个网址，就会回传一组Access Token回来。 用JavaScript、Postman、浏览器等取Access Token，并用Access Token取得Instagram贴文的嵌入代码 ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:7:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"取Token、取IG 贴文 在上一步的最后我们取得了部署的网址，首先我们先用GET取得Access Token回来： const getToken = '部署完取得的网址' ; fetch ( getToken ) . then ( response =\u003e response . json ( ) ) . then ( response =\u003e { console . log ( response ) ; } ) Console 出来的response 资料会像这样： { access_token: \"405342487221016|50nqwaePxasUkpNVyIwrJpoA2H0\", token_type: \"bearer\" } 所以我们可以知道，response.access_token就是我们要的Access Token。 接下来就是拿这个Access Token 去取得IG 的贴文内容。 首先我们要先有IG 贴文的网址，在贴文上面点右上角的点点点，在点击「复制连结」，就取到贴文的网址了： 有了贴文的网址，也有了Token，我们可以用一个GET来取得贴文的资讯： const getToken = '部署完取得的网址' ; const igUri = 'IG贴文的网址' ; const hideCaption = true ; //要不要隐藏描述，true隐藏、false不隐藏 fetch ( getToken ) . then ( response =\u003e response . json ( ) ) . then ( response =\u003e response . access_token ) . then ( token =\u003e { fetch ( `https://graph.facebook.com/v9.0/instagram_oembed?url= ${ igUri }\u0026access_token= ${ token }\u0026hidecaption= ${ hideCaption }` ) . then ( response =\u003e response . json ( ) ) . then ( response =\u003e { console . log ( response ) ; } ) } ) ; 从API 的URL 上可以看到，需要的参数有：IG 贴文网址、Access Token，跟hidecaption 是否要隐藏描述。 hidecaption 没有写在新的文件里，神奇的是却有写在旧文件里，这是Augustus 看了前一篇的文章后试出来的，所以如果哪天FB 把这参数拿掉也不用意外。 另外，复制出的IG 贴文网址本身会带一个参数，像这样： https://www.instagram.com/p/CK6wSwfpuVi/?igshid=1wy9n8xgtbe89 实测后，有没有写到igshid 这个参数都没关系，都抓得到贴文资料回来。 除了上面三个参数，还有二个参数是官方文件有提供的：maxwidth、omitscript。 maxwidth 是可以指定嵌入贴文时的最大宽度。 omitscript是Boolean值，预设为false，一般来说我们在嵌入IG贴文时，IG会自动把贴文的资料载入，如果我们想要有另外执行载入贴文的需求，这边就可以写true，之后再执行：instgrm.Embeds.process()就可以把贴文载进页面中。 But！实作时，不确定是不是Augustus有写错，不论omitscript是true或false，如果没执行instgrm.Embeds.process()那贴文就会是呈现白白的样子，像这样： 而且旧的方法吐回来的html，里面会自行引用IG 的embed.js，新的看起来是跟FB 整并所以就没有了，要自行引用： \u003cscript src=\"https://www.instagram.com/embed.js\"\u003e\u003c/script\u003e console 出来的response 会长这样： 可以看到的值有： author_name html provider_name provider_url thumbnail_height thumbnail_url thumbnail_width type version width 其中html就是我们要嵌入IG贴文的程式码，整段放到我们要放的地方就行，这篇的Demo是放在\u003cdiv id=\"ig-iframe\"\u003e\u003c/div\u003e这个div中。 完整嵌入IG 贴文的程式码如下： \u003c div id =\" ig-iframe \" \u003e \u003c/ div \u003e \u003c script src =\" https://www.instagram.com/embed.js \" \u003e \u003c/ script \u003e \u003c script \u003e const getToken = '部署完取得的网址' ; const igUri = 'IG贴文的网址' ; const hideCaption = true ; //选填，要不要隐藏描述，true隐藏、false不隐藏，预设为false const maxWidth = 400 ; //选填，贴文的最大宽度是多少 fetch ( getToken ) . then ( res =\u003e res . json ( ) ) . then ( res =\u003e { const token = res . access_token ; fetch ( `https://graph.facebook.com/v9.0/instagram_oembed?url= ${ igUri }\u0026access_token= ${ token }\u0026hidecaption= ${ hideCaption }\u0026maxwidth= ${ maxWidth }` ) . then ( res =\u003e res . json ( ) ) . then ( res =\u003e { const wrap = document . getElementById ( 'ig-iframe' ) ; wrap . insertAdjacentHTML ( 'afterbegin' , res . html ) ; instgrm . Embeds . process ( ) ; } ) . catch ( err =\u003e { throw Error ( e ) } ) } ) . catch ( err =\u003e { throw Error ( e ) } ) ; \u003c/ script \u003e 完成的IG 贴文嵌入就完成啦~ 如此两种方式并不能简洁快速的嵌入instagram，需要同一般资源一样进行嵌入，Hugo官方暂时并未做出修改适配，若已经适配请联系我。 ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:8:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"5 param param 的文档 一个 param 示例: {{\u003c param description \u003e}} 呈现的输出效果如下: Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁. ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:9:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"6 ref 和 relref ref 和 relref 的文档 ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:10:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"7 tweet tweet 的文档 一个 tweet 示例: {{\u003c tweet 877500564405444608 \u003e}} 呈现的输出效果如下: ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:11:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"8 vimeo vimeo 的文档 一个 vimeo 示例: {{\u003c vimeo 146022717 \u003e}} 呈现的输出效果如下: ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:12:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"9 youtube youtube 的文档 一个 youtube 示例: {{\u003c youtube w7Ft2ymGmfc \u003e}} 呈现的输出效果如下: ","date":"2020-03-04","objectID":"/theme-documentation-built-in-shortcodes/:13:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"了解如何在 CodeIT 主题中快速, 直观地创建和组织内容.","date":"2020-03-05","objectID":"/theme-documentation-content/","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"了解如何在 CodeIT 主题中快速, 直观地创建和组织内容. ","date":"2020-03-05","objectID":"/theme-documentation-content/:0:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"1 内容组织 以下是一些方便你清晰管理和生成文章的目录结构建议: 保持博客文章存放在 content/posts 目录, 例如: content/posts/我的第一篇文章.md 保持简单的静态页面存放在 content 目录, 例如: content/about.md 本地资源组织 本地资源引用 有三种方法来引用图片和音乐等本地资源: 使用页面包中的页面资源. 你可以使用适用于 Resources.GetMatch 的值或者直接使用相对于当前页面目录的文件路径来引用页面资源. 将本地资源放在 assets 目录中, 默认路径是 /assets. 引用资源的文件路径是相对于 assets 目录的. 将本地资源放在 static 目录中, 默认路径是 /static. 引用资源的文件路径是相对于 static 目录的. 引用的优先级符合以上的顺序. 在这个主题中的很多地方可以使用上面的本地资源引用, 例如 链接, 图片, image shortcode, music shortcode 和前置参数中的部分参数. 页面资源或者 assets 目录中的图片处理会在未来的版本中得到支持. 非常酷的功能! ","date":"2020-03-05","objectID":"/theme-documentation-content/:1:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"2 前置参数 Hugo 允许你在文章内容前面添加 yaml, toml 或者 json 格式的前置参数. 注意 不是所有的以下前置参数都必须在你的每篇文章中设置. 只有在文章的参数和你的 网站设置 中的 page 部分不一致时才有必要这么做. 这是一个前置参数例子: ---title:\"我的第一篇文章\"subtitle:\"\"date:2020-03-04T15:58:26+08:00lastmod:2020-03-04T15:58:26+08:00draft:trueauthor:\"\"authorLink:\"\"description:\"\"license:\"\"images:[]tags:[]categories:[]featuredImage:\"\"featuredImagePreview:\"\"hiddenFromHomePage:falsehiddenFromSearch:falsetwemoji:falselightgallery:trueruby:truefraction:truefontawesome:truelinkToMarkdown:truerssFullText:falsetoc:enable:trueauto:truecode:copy:true# ...math:enable:true# ...mapbox:accessToken:\"\"# ...share:enable:true# ...comment:enable:true# ...library:css:# someCSS = \"some.css\"# 位于 \"assets/\"# 或者# someCSS = \"https://cdn.example.com/some.css\"js:# someJS = \"some.js\"# 位于 \"assets/\"# 或者# someJS = \"https://cdn.example.com/some.js\"seo:images:[]# ...--- title: 文章标题. subtitle: 文章副标题. date: 这篇文章创建的日期时间. 它通常是从文章的前置参数中的 date 字段获取的, 但是也可以在 网站配置 中设置. lastmod: 上次修改内容的日期时间. draft: 如果设为 true, 除非 hugo 命令使用了 --buildDrafts/-D 参数, 这篇文章不会被渲染. author: 文章作者. authorLink: 文章作者的链接. description: 文章内容的描述. license: 这篇文章特殊的许可. images: 页面图片, 用于 Open Graph 和 Twitter Cards. tags: 文章的标签. categories: 文章所属的类别. featuredImage: 文章的特色图片. featuredImagePreview: 用在主页预览的文章特色图片. hiddenFromHomePage: 如果设为 true, 这篇文章将不会显示在主页上. hiddenFromSearch: 如果设为 true, 这篇文章将不会显示在搜索结果中. twemoji: 如果设为 true, 这篇文章会使用 twemoji. lightgallery: 如果设为 true, 文章中的图片将可以按照画廊形式呈现. ruby: 如果设为 true, 这篇文章会使用 上标注释扩展语法. fraction: 如果设为 true, 这篇文章会使用 分数扩展语法. fontawesome: 如果设为 true, 这篇文章会使用 Font Awesome 扩展语法. linkToMarkdown: 如果设为 true, 内容的页脚将显示指向原始 Markdown 文件的链接. rssFullText: 如果设为 true, 在 RSS 中将会显示全文内容. toc: 和 网站配置 中的 params.page.toc 部分相同. code: 和 网站配置 中的 params.page.code 部分相同. math: 和 网站配置 中的 params.page.math 部分相同. mapbox: 和 网站配置 中的 params.page.mapbox 部分相同. share: 和 网站配置 中的 params.page.share 部分相同. comment: 和 网站配置 中的 params.page.comment 部分相同. library: 和 网站配置 中的 params.page.library 部分相同. seo: 和 网站配置 中的 params.page.seo 部分相同. 技巧 featuredImage 和 featuredImagePreview 支持本地资源引用的完整用法. 如果带有在前置参数中设置了 name: featured-image 或 name: featured-image-preview 属性的页面资源, 没有必要在设置 featuredImage 或 featuredImagePreview: resources:- name:featured-imagesrc:featured-image.jpg- name:featured-image-previewsrc:featured-image-preview.jpg ","date":"2020-03-05","objectID":"/theme-documentation-content/:2:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"3 内容摘要 CodeIT 主题使用内容摘要在主页中显示大致文章信息。Hugo 支持生成文章的摘要. 文章摘要预览文章摘要预览 \" 文章摘要预览 ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"自动摘要拆分 默认情况下, Hugo 自动将内容的前 70 个单词作为摘要. 你可以通过在 网站配置 中设置 summaryLength 来自定义摘要长度. 如果您要使用 CJK中文/日语/韩语 语言创建内容, 并且想使用 Hugo 的自动摘要拆分功能，请在 网站配置 中将 hasCJKLanguage 设置为 true. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:1","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"手动摘要拆分 另外, 你也可以添加 \u003c!--more--\u003e 摘要分割符来拆分文章生成摘要. 摘要分隔符之前的内容将用作该文章的摘要. 注意 请小心输入\u003c!--more--\u003e ; 即全部为小写且没有空格. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:2","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"前置参数摘要 你可能希望摘要不是文章开头的文字. 在这种情况下, 你可以在文章前置参数的 summary 变量中设置单独的摘要. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:3","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"使用文章描述作为摘要 你可能希望将文章前置参数中的 description 变量的内容作为摘要. 你仍然需要在文章开头添加 \u003c!--more--\u003e 摘要分割符. 将摘要分隔符之前的内容保留为空. 然后 CodeIT 主题会将你的文章描述作为摘要. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:4","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"摘要选择的优先级顺序 由于可以通过多种方式指定摘要, 因此了解顺序很有用. 如下: 如果文章中有 \u003c!--more--\u003e 摘要分隔符, 但分隔符之前没有内容, 则使用描述作为摘要. 如果文章中有 \u003c!--more--\u003e 摘要分隔符, 则将按照手动摘要拆分的方法获得摘要. 如果文章前置参数中有摘要变量, 那么将以该值作为摘要. 按照自动摘要拆分方法. 注意 不建议在摘要内容中包含富文本块元素, 这会导致渲染错误. 例如代码块, 图片, 表格等. ","date":"2020-03-05","objectID":"/theme-documentation-content/:3:5","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"4 Markdown 基本语法 这部分内容在 Markdown 基本语法页面 中介绍. ","date":"2020-03-05","objectID":"/theme-documentation-content/:4:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"5 Markdown 扩展语法 CodeIT 主题提供了一些扩展的语法便于你撰写文章. ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Emoji 支持 这部分内容在 Emoji 支持页面 中介绍. ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:1","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"数学公式 CodeIT 基于 $ \\KaTeX $ 提供数学公式的支持. 在你的 网站配置 中的 [params.math] 下面设置属性 enable = true, 并在文章的前置参数中设置属性 math: true来启用数学公式的自动渲染. 技巧 有一份 $ \\KaTeX $ 中支持的 $ \\TeX $ 函数 清单. 公式块 默认的公式块分割符是 $$/$$ 和 \\\\[/\\\\]: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\\\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\\\] 呈现的输出效果如下: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] 行内公式 默认的行内公式分割符是 $/$ 和 \\\\(/\\\\): $ c = \\pm\\sqrt{a^2 + b^2} $ 和 \\\\( f(x)=\\int\\_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\\\) 呈现的输出效果如下: $ c = \\pm\\sqrt{a^2 + b^2} $ 和 \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) 技巧 你可以在 网站配置 中自定义公式块和行内公式的分割符. Copy-tex Copy-tex 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 在选择并复制 $ \\KaTeX $ 渲染的公式时, 会将其 $ \\LaTeX $ 源代码复制到剪贴板. 在你的 网站配置 中的 [params.math] 下面设置属性 copyTex = true 来启用 Copy-tex. 选择并复制上一节中渲染的公式, 可以发现复制的内容为 LaTeX 源代码. mhchem mhchem 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 你可以在文章中轻松编写漂亮的化学方程式. 在你的 网站配置 中的 [params.math] 下面设置属性 mhchem = true 来启用 mhchem. $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ 呈现的输出效果如下: $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:2","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"字符注音或者注释 CodeIT 主题支持一种 字符注音或者注释 Markdown 扩展语法: [Hugo]^(一个开源的静态网站生成工具) 呈现的输出效果如下: Hugo一个开源的静态网站生成工具 ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:3","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"分数 CodeIT 主题支持一种 分数 Markdown 扩展语法: [浅色]/[深色] [99]/[100] 呈现的输出效果如下: 浅色/深色 90/100 ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:4","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"Font Awesome CodeIT 主题使用 Font Awesome 作为图标库. 你同样可以在文章中轻松使用这些图标. 从 Font Awesome 网站 上获取所需的图标 class. 去露营啦! :(fas fa-campground fa-fw): 很快就回来. 真开心! :(far fa-grin-tears): 呈现的输出效果如下: 去露营啦!  很快就回来. 真开心! ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:5","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"转义字符 在某些特殊情况下 (编写这个主题文档时 ), 你的文章内容会与 Markdown 的基本或者扩展语法冲突, 并且无法避免. 转义字符语法可以帮助你渲染出想要的内容: {?X} -\u003e X 例如, 两个 : 会启用 emoji 语法. 但有时候这不是你想要的结果. 可以像这样使用转义字符语法: {?:}joy: 呈现的输出效果如下: :joy: 而不是 😂 技巧 这个方法可以间接解决一个还未解决的 Hugo 的 issue. 另一个例子是: [link{?]}(#escape-character) 呈现的输出效果如下: [link](#escape-character) 而不是 link. ","date":"2020-03-05","objectID":"/theme-documentation-content/:5:6","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/theme-documentation-content/"},{"categories":["documentation"],"content":"CodeIT 主题在 Hugo 内置的 shortcode 的基础上提供多个扩展的 shortcode.","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"CodeIT 主题在 Hugo 内置的 shortcode 的基础上提供多个扩展的 shortcode. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:0:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"1 style 注意 Hugo extended 版本对于 style shortcode 是必需的. style shortcode 用来在你的文章中插入自定义样式. style shortcode 有两个位置参数. 第一个参数是自定义样式的内容. 它支持  SASS 中的嵌套语法, 并且 \u0026 指代这个父元素. 第二个参数是包裹你要更改样式的内容的 HTML 标签, 默认值是 div. 一个 style 示例: {{\u003c style \"text-align:right; strong{color:#00b1ff;}\" \u003e}} This is a **right-aligned** paragraph. {{\u003c /style \u003e}} 呈现的输出效果如下: This is a right-aligned paragraph. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:1:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"2 link link shortcode 是 Markdown 链接语法 的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{\u003c link \"https://assemble.io\" \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" \u003e}} {{\u003c link \"mailto:contact@revolunet.com\" \u003e}} 或者 {{\u003c link href=\"mailto:contact@revolunet.com\" \u003e}} {{\u003c link \"https://assemble.io\" Assemble \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" content=Assemble \u003e}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{\u003c link \"https://github.com/upstage/\" Upstage \"Visit Upstage!\" \u003e}} 或者 {{\u003c link href=\"https://github.com/upstage/\" content=Upstage title=\"Visit Upstage!\" \u003e}} 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:2:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"3 image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持本地资源引用的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{\u003c image src=\"/images/lighthouse.jpg\" caption=\"Lighthouse (`image`)\" src_s=\"/images/lighthouse-small.jpg\" src_l=\"/images/lighthouse-large.jpg\" \u003e}} 呈现的输出效果如下: Lighthouse (image)\" Lighthouse (image) ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:3:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"4 admonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意 一个 注意 横幅 摘要 一个 摘要 横幅 信息 一个 信息 横幅 技巧 一个 技巧 横幅 成功 一个 成功 横幅 问题 一个 问题 横幅 警告 一个 警告 横幅 失败 一个 失败 横幅 危险 一个 危险 横幅 Bug 一个 Bug 横幅 示例 一个 示例 横幅 引用 一个 引用 横幅 admonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 横幅内容是否默认展开, 默认值是 true. 一个 admonition 示例: {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 或者 {{\u003c admonition tip \"This is a tip\" false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 呈现的输出效果如下: This is a tip 一个 技巧 横幅 ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:4:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5 mermaid mermaid 是一个可以帮助你在文章中生成图表和流程图的库, 类似 Markdown 的语法. 只需将你的 mermaid 代码插入 mermaid shortcode 中即可. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.1 流程图 一个 流程图 mermaid 示例: {{\u003c mermaid \u003e}} graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:1","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.2 时序图 一个 时序图 mermaid 示例: {{\u003c mermaid \u003e}} sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail... John--\u003eAlice: Great! John-\u003eBob: How about you? Bob--\u003eJohn: Jolly good! {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:2","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.3 甘特图 一个 甘特图 mermaid 示例: {{\u003c mermaid \u003e}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:3","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.4 类图 一个 类图 mermaid 示例: {{\u003c mermaid \u003e}} classDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 _-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --_ C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:4","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.5 状态图 一个 状态图 mermaid 示例: {{\u003c mermaid \u003e}} stateDiagram [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:5","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.6 Git 图 一个 Git 图 mermaid 示例: {{\u003c mermaid \u003e}} gitGraph: options { \"nodeSpacing\": 100, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:6","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.7 饼图 一个 饼图 mermaid 示例: {{\u003c mermaid \u003e}} pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:5:7","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"6 echarts ECharts 是一个帮助你生成交互式数据可视化的库. ECharts 提供了常规的 折线图, 柱状图, 散点图, 饼图, K 线图, 用于统计的 盒形图, 用于地理数据可视化的 地图, 热力图, 线图, 用于关系数据可视化的 关系图, treemap, 旭日图, 多维数据可视化的 平行坐标, 还有用于 BI 的 漏斗图, 仪表盘, 并且支持图与图之间的混搭. 只需在 echarts shortcode 中以 JSON/YAML/TOML格式插入 ECharts 选项即可. 一个 JSON 格式的 echarts 示例: {{\u003c echarts \u003e}} { \"title\": { \"text\": \"折线统计图\", \"top\": \"2%\", \"left\": \"center\" }, \"tooltip\": { \"trigger\": \"axis\" }, \"legend\": { \"data\": [\"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\"], \"top\": \"10%\" }, \"grid\": { \"left\": \"5%\", \"right\": \"5%\", \"bottom\": \"5%\", \"top\": \"20%\", \"containLabel\": true }, \"toolbox\": { \"feature\": { \"saveAsImage\": { \"title\": \"保存为图片\" } } }, \"xAxis\": { \"type\": \"category\", \"boundaryGap\": false, \"data\": [\"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\"] }, \"yAxis\": { \"type\": \"value\" }, \"series\": [ { \"name\": \"邮件营销\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [120, 132, 101, 134, 90, 230, 210] }, { \"name\": \"联盟广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [220, 182, 191, 234, 290, 330, 310] }, { \"name\": \"视频广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [150, 232, 201, 154, 190, 330, 410] }, { \"name\": \"直接访问\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [320, 332, 301, 334, 390, 330, 320] }, { \"name\": \"搜索引擎\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [820, 932, 901, 934, 1290, 1330, 1320] } ] } {{\u003c /echarts \u003e}} 一个 YAML 格式的 echarts 示例: {{\u003c echarts \u003e}}title:text:折线统计图top:2%left:centertooltip:trigger:axislegend:data:- 邮件营销- 联盟广告- 视频广告- 直接访问- 搜索引擎top:10%grid:left:5%right:5%bottom:5%top:20%containLabel:truetoolbox:feature:saveAsImage:title:保存为图片xAxis:type:categoryboundaryGap:falsedata:- 周一- 周二- 周三- 周四- 周五- 周六- 周日yAxis:type:valueseries:- name:邮件营销type:linestack:总量data:- 120- 132- 101- 134- 90- 230- 210- name:联盟广告type:linestack:总量data:- 220- 182- 191- 234- 290- 330- 310- name:视频广告type:linestack:总量data:- 150- 232- 201- 154- 190- 330- 410- name:直接访问type:linestack:总量data:- 320- 332- 301- 334- 390- 330- 320- name:搜索引擎type:linestack:总量data:- 820- 932- 901- 934- 1290- 1330- 1320{{\u003c /echarts \u003e}} 一个 TOML 格式的 echarts 示例: {{\u003c echarts \u003e}} [title] text = \"折线统计图\" top = \"2%\" left = \"center\" [tooltip] trigger = \"axis\" [legend] data = [ \"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\" ] top = \"10%\" [grid] left = \"5%\" right = \"5%\" bottom = \"5%\" top = \"20%\" containLabel = true [toolbox] [toolbox.feature] [toolbox.feature.saveAsImage] title = \"保存为图片\" [xAxis] type = \"category\" boundaryGap = false data = [ \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\" ] [yAxis] type = \"value\" [[series]] name = \"邮件营销\" type = \"line\" stack = \"总量\" data = [ 120.0, 132.0, 101.0, 134.0, 90.0, 230.0, 210.0 ] [[series]] name = \"联盟广告\" type = \"line\" stack = \"总量\" data = [ 220.0, 182.0, 191.0, 234.0, 290.0, 330.0, 310.0 ] [[series]] name = \"视频广告\" type = \"line\" stack = \"总量\" data = [ 150.0, 232.0, 201.0, 154.0, 190.0, 330.0, 410.0 ] [[series]] name = \"直接访问\" type = \"line\" stack = \"总量\" data = [ 320.0, 332.0, 301.0, 334.0, 390.0, 330.0, 320.0 ] [[series]] name = \"搜索引擎\" type = \"line\" stack = \"总量\" data = [ 820.0, 932.0, 901.0, 934.0, 1290.0, 1330.0, 1320.0 ] {{\u003c /echarts \u003e}} 呈现的输出效果如下: echarts shortcode 还有以下命名参数: width [可选] (第一个位置参数) 数据可视化的宽度, 默认值是 100%. height [可选] (第二个位置参数) 数据可视化的高度, 默认值是 30rem. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:6:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"7 mapbox Mapbox GL JS 是一个 JavaScript 库，它使用 WebGL, 以 vector tiles 和 Mapbox styles 为来源, 将它们渲染成互动式地图. mapbox shortcode 有以下命名参数来使用 Mapbox GL JS: lng [必需] (第一个位置参数) 地图初始中心点的经度, 以度为单位. lat [必需] (第二个位置参数) 地图初始中心点的纬度, 以度为单位. zoom [可选] (第三个位置参数) 地图的初始缩放级别, 默认值是 10. marked [可选] (第四个位置参数) 是否在地图的初始中心点添加图钉, 默认值是 true. light-style [可选] (第五个位置参数) 浅色主题的地图样式, 默认值是前置参数或者网站配置中设置的值. dark-style [可选] (第六个位置参数) 深色主题的地图样式, 默认值是前置参数或者网站配置中设置的值. navigation [可选] 是否添加 NavigationControl, 默认值是前置参数或者网站配置中设置的值. geolocate [可选] 是否添加 GeolocateControl, 默认值是前置参数或者网站配置中设置的值. scale [可选] 是否添加 ScaleControl, 默认值是前置参数或者网站配置中设置的值. fullscreen [可选] 是否添加 FullscreenControl, 默认值是前置参数或者网站配置中设置的值. width [可选] 地图的宽度, 默认值是 100%. height [可选] 地图的高度, 默认值是 20rem. 一个简单的 mapbox 示例: {{\u003c mapbox 121.485 31.233 12 \u003e}} 或者 {{\u003c mapbox lng=121.485 lat=31.233 zoom=12 \u003e}} 呈现的输出效果如下: 一个带有自定义样式的 mapbox 示例: {{\u003c mapbox -122.252 37.453 10 false \"mapbox://styles/mapbox/streets-zh-v1\" \u003e}} 或者 {{\u003c mapbox lng=-122.252 lat=37.453 zoom=10 marked=false light-style=\"mapbox://styles/mapbox/streets-zh-v1\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:7:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8 music music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8.1 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{\u003c music url=\"/music/Wavelength.mp3\" name=Wavelength artist=oldmanyoung cover=\"/images/Wavelength.jpg\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:1","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8.2 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{\u003c music auto=\"https://music.163.com/#/playlist?id=60198\" \u003e}} 或者 {{\u003c music \"https://music.163.com/#/playlist?id=60198\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:2","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8.3 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{\u003c music server=\"netease\" type=\"song\" id=\"1868553\" \u003e}} 或者 {{\u003c music netease song 1868553 \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:3","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8.4 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:8:4","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"9 bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV id, 例如: https://www.bilibili.com/video/BV1Sx411T7QQ 一个 bilibili 示例: {{\u003c bilibili BV1Sx411T7QQ \u003e}} 或者 {{\u003c bilibili id=BV1Sx411T7QQ \u003e}} 呈现的输出效果如下: 如果视频包含多个部分, 则除了视频的 BV id 之外, 还需要 p, 默认值为 1, 例如: https://www.bilibili.com/video/BV1TJ411C7An?p=3 一个带有 p 参数的 bilibili 示例: {{\u003c bilibili BV1TJ411C7An 3 \u003e}} 或者 {{\u003c bilibili id=BV1TJ411C7An p=3 \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:9:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10 typeit typeit shortcode 基于 TypeIt 提供了打字动画. 只需将你需要打字动画的内容插入 typeit shortcode 中即可. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:10:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10.1 简单内容 允许使用 Markdown 格式的简单内容, 并且 不包含 富文本的块内容, 例如图像等等… 一个 typeit 示例: {{\u003c typeit \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 _段落_... {{\u003c /typeit \u003e}} 呈现的输出效果如下: 另外, 你也可以自定义 HTML 标签. 一个带有 h4 标签的 typeit 示例: {{\u003c typeit tag=h4 \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 _段落_... {{\u003c /typeit \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:10:1","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10.2 代码内容 代码内容也是允许的, 并且通过使用参数 code 指定语言类型可以实习语法高亮. 一个带有 code 参数的 typeit 示例: {{\u003c typeit code=java \u003e}} public class HelloWorld { public static void main(String []args) { System.out.println(\"Hello World\"); } } {{\u003c /typeit \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:10:2","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10.3 分组内容 默认情况下, 所有打字动画都是同时开始的. 但是有时你可能需要按顺序开始一组 typeit 内容的打字动画. 一组具有相同 group 参数值的 typeit 内容将按顺序开始打字动画. 一个带有 group 参数的 typeit 示例: {{\u003c typeit group=paragraph \u003e}} **首先**, 这个段落开始 {{\u003c /typeit \u003e}} {{\u003c typeit group=paragraph \u003e}} **然后**, 这个段落开始 {{\u003c /typeit \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:10:3","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"11 script script shortcode 用来在你的文章中插入  Javascript 脚本. 注意 脚本内容可以保证在所有的第三方库加载之后按顺序执行. 所以你可以自由地使用第三方库. 一个 script 示例: {{\u003c script \u003e}} console.log('Hello CodeIT!'); {{\u003c /script \u003e}} 你可以在开发者工具的控制台中看到输出. ","date":"2020-03-03","objectID":"/theme-documentation-extended-shortcodes/:11:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/theme-documentation-extended-shortcodes/"},{"categories":["Markdown"],"content":"这篇文章展示了基本的 Markdown 语法和格式.","date":"2019-12-01","objectID":"/basic-markdown-syntax/","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"这篇文章提供了可以在 Hugo 的文章中使用的基本 Markdown 语法示例. 注意 这篇文章借鉴了一篇很棒的来自 Grav 的文章. 如果你想了解 CodeIT 主题的扩展 Markdown 语法, 请阅读扩展 Markdown 语法页面. 事实上, 编写 Web 内容很麻烦. WYSIWYG所见即所得 编辑器帮助减轻了这一任务. 但通常会导致代码太糟, 或更糟糕的是, 网页也会很丑. 没有通常伴随的所有复杂和丑陋的问题, Markdown 是一种更好的生成 HTML 内容的方式. 一些主要好处是: Markdown 简单易学, 几乎没有多余的字符, 因此编写内容也更快. 用 Markdown 书写时出错的机会更少. 可以产生有效的 XHTML 输出. 将内容和视觉显示保持分开, 这样就不会打乱网站的外观. 可以在你喜欢的任何文本编辑器或 Markdown 应用程序中编写内容. Markdown 使用起来很有趣! John Gruber, Markdown 的作者如是说: Markdown 格式的首要设计目标是更具可读性. 最初的想法是 Markdown 格式的文档应当以纯文本形式发布, 而不会看起来像被标签或格式说明所标记. 虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响, 但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式. – John Gruber 话不多说, 我们来回顾一下 Markdown 的主要语法以及生成的 HTML 样式! 技巧  将此页保存为书签，以备将来参考! ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:0:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"1 标题 从 h2 到 h6 的标题在每个级别上都加上一个 ＃: ## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题 输出的 HTML 看起来像这样: \u003ch2\u003eh2 标题\u003c/h2\u003e \u003ch3\u003eh3 标题\u003c/h3\u003e \u003ch4\u003eh4 标题\u003c/h4\u003e \u003ch5\u003eh5 标题\u003c/h5\u003e \u003ch6\u003eh6 标题\u003c/h6\u003e 标题 ID 要添加自定义标题 ID, 请在与标题相同的行中将自定义 ID 放在花括号中: ### 一个很棒的标题 {#custom-id} 输出的 HTML 看起来像这样: \u003ch3 id=\"custom-id\"\u003e一个很棒的标题\u003c/h3\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:1:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"2 注释 注释是和 HTML 兼容的： \u003c!-- 这是一段注释 --\u003e 不能看到以下的注释: ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:2:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"3 水平线 HTML 中的 \u003chr\u003e 标签是用来在段落元素之间创建一个 “专题间隔” 的. 使用 Markdown, 你可以用以下方式创建一个 \u003chr\u003e 标签: ___: 三个连续的下划线 ---: 三个连续的破折号 ***: 三个连续的星号 呈现的输出效果如下: ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:3:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"4 段落 按照纯文本的方式书写段落, 纯文本在呈现的 HTML 中将用 \u003cp\u003e/\u003c/p\u003e 标签包裹. 如下段落: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. 输出的 HTML 看起来像这样: \u003cp\u003e Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. \u003c/p\u003e 可以使用一个空白行进行换行. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:4:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"5 内联 HTML 元素 如果你需要某个 HTML 标签 (带有一个类), 则可以简单地像这样使用: Markdown 格式的段落. \u003cdiv class=\"class\"\u003e这是 \u003cb\u003eHTML\u003c/b\u003e\u003c/div\u003e Markdown 格式的段落. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:5:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"6 强调 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"加粗 用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. **渲染为粗体** **渲染为粗体** 输出的 HTML 看起来像这样: \u003cstrong\u003e渲染为粗体\u003c/strong\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"斜体 用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. _渲染为斜体_ _渲染为斜体_ 输出的 HTML 看起来像这样: \u003cem\u003e渲染为斜体\u003c/em\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"删除线 按照 GFMGitHub flavored Markdown 你可以使用删除线. ~~这段文本带有删除线.~~ 呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: \u003cdel\u003e这段文本带有删除线.\u003c/del\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"组合 加粗, 斜体, 和删除线可以 组合使用. **_加粗和斜体_** ~~**删除线和加粗**~~ ~~_删除线和斜体_~~ ~~**_加粗, 斜体和删除线_**~~ 呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: \u003cem\u003e\u003cstrong\u003e加粗和斜体\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003e删除线和加粗\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e删除线和斜体\u003c/em\u003e\u003c/del\u003e \u003cdel \u003e\u003cem\u003e\u003cstrong\u003e加粗, 斜体和删除线\u003c/strong\u003e\u003c/em\u003e\u003c/del \u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"7 引用 用于在文档中引用其他来源的内容块. 在要引用的任何文本之前添加 \u003e: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 呈现的输出效果如下: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 输出的 HTML 看起来像这样: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e 引用也可以嵌套: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. \u003e Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e \u003e \u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor \u003e \u003e odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. 呈现的输出效果如下: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:7:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"8 列表 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"无序列表 一系列项的列表, 其中项的顺序没有明显关系. 你可以使用以下任何符号来表示无序列表中的项: - 一项内容 * 一项内容 - 一项内容 例如: - Lorem ipsum dolor sit amet - Consectetur adipiscing elit - Integer molestie lorem at massa - Facilisis in pretium nisl aliquet - Nulla volutpat aliquam velit - Phasellus iaculis neque - Purus sodales ultricies - Vestibulum laoreet porttitor sem - Ac tristique libero volutpat at - Faucibus porta lacus fringilla vel - Aenean sit amet erat nunc - Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003e Nulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"有序列表 一系列项的列表, 其中项的顺序确实很重要. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e 技巧 如果你对每一项使用 1., Markdown 将自动为每一项编号. 例如: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"任务列表 任务列表使你可以创建带有复选框的列表. 要创建任务列表, 请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ]). 要选择一个复选框，请在方括号之间添加 x ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media 呈现的输出效果如下: Write the press release Update the website Contact the media ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"9 代码 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"行内代码 用 ` 包装行内代码段. 在这个例子中, `\u003csection\u003e\u003c/section\u003e` 会被包裹成 **代码**. 呈现的输出效果如下: 在这个例子中, \u003csection\u003e\u003c/section\u003e 会被包裹成 代码. 输出的 HTML 看起来像这样: \u003cp\u003e 在这个例子中, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e 会被包裹成 \u003cstrong\u003e代码\u003c/strong\u003e. \u003c/p\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"缩进代码 将几行代码缩进至少四个空格，例如: // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下: // Some comments line 1 of code line 2 of code line 3 of code 输出的 HTML 看起来像这样: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"围栏代码块 使用 “围栏” ``` 来生成一段带有语言属性的代码块. ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"语法高亮 GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它，只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意 Hugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息, 包括语法高亮的 shortcode. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"10 表格 通过在每个单元格之间添加竖线作为分隔线, 并在标题下添加一行破折号 (也由竖线分隔) 来创建表格. 注意, 竖线不需要垂直对齐. | Option | Description | | ------ | ------------------------------------------------------------------------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 输出的 HTML 看起来像这样: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003e path to data files to supply the data that will be passed into templates. \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003e engine to be used for processing templates. Handlebars is the default. \u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e 文本右对齐或居中对齐 在任何标题下方的破折号右侧添加冒号将使该列的文本右对齐. 在任何标题下方的破折号两边添加冒号将使该列的对齐文本居中. | Option | Description | | :----: | ------------------------------------------------------------------------: | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:10:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"11 链接 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"基本链接 \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) 呈现的输出效果如下 (将鼠标悬停在链接上，没有提示): https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"添加一个标题 [Upstage](https://github.com/upstage/ \"Visit Upstage!\") 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage 输出的 HTML 看起来像这样: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"定位标记 定位标记使你可以跳至同一页面上的指定锚点. 例如, 每个章节: ## Table of Contents - [Chapter 1](#chapter-1) - [Chapter 2](#chapter-2) - [Chapter 3](#chapter-3) 将跳转到这些部分: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. 注意 定位标记的位置几乎是任意的. 因为它们并不引人注目, 所以它们通常被放在同一行了. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"12 脚注 脚注使你可以添加注释和参考, 而不会使文档正文混乱. 当你创建脚注时, 会在添加脚注引用的位置出现带有链接的上标编号. 读者可以单击链接以跳至页面底部的脚注内容. 要创建脚注引用, 请在方括号中添加插入符号和标识符 ([^1]). 标识符可以是数字或单词, 但不能包含空格或制表符. 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中, 脚注按顺序编号. 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注). 你不一定要在文档末尾添加脚注. 可以将它们放在除列表, 引用和表格等元素之外的任何位置. 这是一个数字脚注[^1]. 这是一个带标签的脚注[^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注 这是一个数字脚注1. 这是一个带标签的脚注2 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:12:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"13 图片 图片的语法与链接相似, 但包含一个在前面的感叹号. ![Minion](https://octodex.github.com/images/minion.png) 或者: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The StormtroopocatAlt text \" The Stormtroopocat 像链接一样, 图片也具有脚注样式的语法: ![Alt text][id] The DojocatAlt text \" The Dojocat 稍后在文档中提供参考内容, 用来定义 URL 的位置: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" 技巧 CodeIT 主题提供了一个包含更多功能的 图片的 shortcode. 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:13:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Hugo 和 CodeIT 中的 Emoji 的用法指南.","date":"2019-10-01","objectID":"/emoji-support/","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Emoji 可以通过多种方式在 Hugo 项目中启用. emojify 方法可以直接在模板中调用, 或者使用行内 Shortcodes. 要全局使用 emoji, 需要在你的网站配置中设置 enableEmoji 为 true, 然后你就可以直接在文章中输入 emoji 的代码. 它们以冒号开头和结尾，并且包含 emoji 的 代码: 去露营啦! :tent: 很快就回来. 真开心! :joy: 呈现的输出效果如下: 去露营啦! ⛺ 很快就回来. 真开心! 😂 以下符号清单是 emoji 代码的非常有用的参考. ","date":"2019-10-01","objectID":"/emoji-support/:0:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"表情与情感 ","date":"2019-10-01","objectID":"/emoji-support/:1:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"笑脸表情 图标 代码 图标 代码 😀 grinning 😃 smiley 😄 smile 😁 grin 😆 laughing satisfied 😅 sweat_smile 🤣 rofl 😂 joy 🙂 slightly_smiling_face 🙃 upside_down_face 😉 wink 😊 blush 😇 innocent ","date":"2019-10-01","objectID":"/emoji-support/:1:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"爱意表情 图标 代码 图标 代码 😍 heart_eyes 😘 kissing_heart 😗 kissing ☺️ relaxed 😚 kissing_closed_eyes 😙 kissing_smiling_eyes ","date":"2019-10-01","objectID":"/emoji-support/:1:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"吐舌头表情 图标 代码 图标 代码 😋 yum 😛 stuck_out_tongue 😜 stuck_out_tongue_winking_eye 😝 stuck_out_tongue_closed_eyes 🤑 money_mouth_face ","date":"2019-10-01","objectID":"/emoji-support/:1:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"带手的表情 图标 代码 图标 代码 🤗 hugs 🤔 thinking ","date":"2019-10-01","objectID":"/emoji-support/:1:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"中性表情 图标 代码 图标 代码 🤐 zipper_mouth_face 😐 neutral_face 😑 expressionless 😶 no_mouth 😏 smirk 😒 unamused 🙄 roll_eyes 😬 grimacing 🤥 lying_face ","date":"2019-10-01","objectID":"/emoji-support/:1:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"困倦的表情 图标 代码 图标 代码 😌 relieved 😔 pensive 😪 sleepy 🤤 drooling_face 😴 sleeping ","date":"2019-10-01","objectID":"/emoji-support/:1:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"不适的表情 图标 代码 图标 代码 😷 mask 🤒 face_with_thermometer 🤕 face_with_head_bandage 🤢 nauseated_face 🤧 sneezing_face 😵 dizzy_face ","date":"2019-10-01","objectID":"/emoji-support/:1:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"戴帽子的表情 图标 代码 图标 代码 🤠 cowboy_hat_face ","date":"2019-10-01","objectID":"/emoji-support/:1:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"戴眼镜的表情 图标 代码 图标 代码 😎 sunglasses 🤓 nerd_face ","date":"2019-10-01","objectID":"/emoji-support/:1:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"担心的表情 图标 代码 图标 代码 😕 confused 😟 worried 🙁 slightly_frowning_face ☹ frowning_face 😮 open_mouth 😯 hushed 😲 astonished 😳 flushed 😦 frowning 😧 anguished 😨 fearful 😰 cold_sweat 😥 disappointed_relieved 😢 cry 😭 sob 😱 scream 😖 confounded 😣 persevere 😞 disappointed 😓 sweat 😩 weary 😫 tired_face ","date":"2019-10-01","objectID":"/emoji-support/:1:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"否定的表情 图标 代码 图标 代码 😤 triumph 😡 pout rage 😠 angry 😈 smiling_imp 👿 imp 💀 skull ☠️ skull_and_crossbones ","date":"2019-10-01","objectID":"/emoji-support/:1:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"特殊打扮的表情 图标 代码 图标 代码 💩 hankey poop shit 🤡 clown_face 👹 japanese_ogre 👺 japanese_goblin 👻 ghost 👽 alien 👾 space_invader 🤖 robot ","date":"2019-10-01","objectID":"/emoji-support/:1:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"猫脸表情 图标 代码 图标 代码 😺 smiley_cat 😸 smile_cat 😹 joy_cat 😻 heart_eyes_cat 😼 smirk_cat 😽 kissing_cat 🙀 scream_cat 😿 crying_cat_face 😾 pouting_cat ","date":"2019-10-01","objectID":"/emoji-support/:1:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"猴脸表情 图标 代码 图标 代码 🙈 see_no_evil 🙉 hear_no_evil 🙊 speak_no_evil ","date":"2019-10-01","objectID":"/emoji-support/:1:14","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"情感 图标 代码 图标 代码 💋 kiss 💌 love_letter 💘 cupid 💝 gift_heart 💖 sparkling_heart 💗 heartpulse 💓 heartbeat 💞 revolving_hearts 💕 two_hearts 💟 heart_decoration ❣️ heavy_heart_exclamation 💔 broken_heart ❤️ heart 💛 yellow_heart 💚 green_heart 💙 blue_heart 💜 purple_heart 🖤 black_heart 💯 100 💢 anger 💥 boom collision 💫 dizzy 💦 sweat_drops 💨 dash 🕳️ hole 💣 bomb 💬 speech_balloon 👁️‍🗨️ eye_speech_bubble 🗯️ right_anger_bubble 💭 thought_balloon 💤 zzz ","date":"2019-10-01","objectID":"/emoji-support/:1:15","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人与身体 ","date":"2019-10-01","objectID":"/emoji-support/:2:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"张开手掌的手势 图标 代码 图标 代码 👋 wave 🤚 raised_back_of_hand 🖐️ raised_hand_with_fingers_splayed ✋ hand raised_hand 🖖 vulcan_salute ","date":"2019-10-01","objectID":"/emoji-support/:2:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"部分手指的手势 图标 代码 图标 代码 👌 ok_hand ✌️ v 🤞 crossed_fingers 🤘 metal 🤙 call_me_hand ","date":"2019-10-01","objectID":"/emoji-support/:2:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"一根手指的手势 图标 代码 图标 代码 👈 point_left 👉 point_right 👆 point_up_2 🖕 fu middle_finger 👇 point_down ☝️ point_up ","date":"2019-10-01","objectID":"/emoji-support/:2:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"握紧的手势 图标 代码 图标 代码 👍 +1 thumbsup 👎 -1 thumbsdown ✊ fist fist_raised 👊 facepunch fist_oncoming punch 🤛 fist_left 🤜 fist_right ","date":"2019-10-01","objectID":"/emoji-support/:2:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"两只手 图标 代码 图标 代码 👏 clap 🙌 raised_hands 👐 open_hands 🤝 handshake 🙏 pray ","date":"2019-10-01","objectID":"/emoji-support/:2:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"握住东西的手势 图标 代码 图标 代码 ✍️ writing_hand 💅 nail_care 🤳 selfie ","date":"2019-10-01","objectID":"/emoji-support/:2:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"身体部位 图标 代码 图标 代码 💪 muscle 👂 ear 👃 nose 👀 eyes 👁️ eye 👅 tongue 👄 lips ","date":"2019-10-01","objectID":"/emoji-support/:2:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人 图标 代码 图标 代码 👶 baby 👦 boy 👧 girl :blonde_man: blonde_man person_with_blond_hair 👨 man 👩 woman 👱‍♀️ blonde_woman 👴 older_man 👵 older_woman ","date":"2019-10-01","objectID":"/emoji-support/:2:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"身体动作 图标 代码 图标 代码 🙍‍♀️ frowning_woman person_frowning 🙍‍♂️ frowning_man 🙎‍♀️ person_with_pouting_face pouting_woman 🙎‍♂️ pouting_man 🙅‍♀️ ng_woman no_good no_good_woman 🙅‍♂️ ng_man no_good_man 🙆‍♀️ ok_woman 🙆‍♂️ ok_man 💁‍♀️ information_desk_person sassy_woman tipping_hand_woman 💁‍♂️ sassy_man tipping_hand_man 🙋‍♀️ raising_hand raising_hand_woman 🙋‍♂️ raising_hand_man 🙇‍♂️ bow bowing_man 🙇‍♀️ bowing_woman 🤦‍♂️ man_facepalming 🤦‍♀️ woman_facepalming 🤷‍♂️ man_shrugging 🤷‍♀️ woman_shrugging ","date":"2019-10-01","objectID":"/emoji-support/:2:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人物角色 图标 代码 图标 代码 👨‍⚕️ man_health_worker 👩‍⚕️ woman_health_worker 👨‍🎓 man_student 👩‍🎓 woman_student 👨‍🏫 man_teacher 👩‍🏫 woman_teacher 👨‍⚖️ man_judge 👩‍⚖️ woman_judge 👨‍🌾 man_farmer 👩‍🌾 woman_farmer 👨‍🍳 man_cook 👩‍🍳 woman_cook 👨‍🔧 man_mechanic 👩‍🔧 woman_mechanic 👨‍🏭 man_factory_worker 👩‍🏭 woman_factory_worker 👨‍💼 man_office_worker 👩‍💼 woman_office_worker 👨‍🔬 man_scientist 👩‍🔬 woman_scientist 👨‍💻 man_technologist 👩‍💻 woman_technologist 👨‍🎤 man_singer 👩‍🎤 woman_singer 👨‍🎨 man_artist 👩‍🎨 woman_artist 👨‍✈️ man_pilot 👩‍✈️ woman_pilot 👨‍🚀 man_astronaut 👩‍🚀 woman_astronaut 👨‍🚒 man_firefighter 👩‍🚒 woman_firefighter 👮‍♂️ cop policeman 👮‍♀️ policewoman 🕵 detective male_detective 🕵️‍♀️ female_detective 💂‍♂️ guardsman 💂‍♀️ guardswoman 👷‍♂️ construction_worker construction_worker_man 👷‍♀️ construction_worker_woman 🤴 prince 👸 princess 👳‍♂️ man_with_turban 👳‍♀️ woman_with_turban 👲 man_with_gua_pi_mao 🤵‍♂️ man_in_tuxedo 👰 bride_with_veil 🤰 pregnant_woman ","date":"2019-10-01","objectID":"/emoji-support/:2:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"幻想的人物 图标 代码 图标 代码 👼 angel 🎅 santa 🤶 mrs_claus ","date":"2019-10-01","objectID":"/emoji-support/:2:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人物活动 图标 代码 图标 代码 💆‍♀️ massage massage_woman 💆‍♂️ massage_man 💇‍♀️ haircut haircut_woman 💇‍♂️ haircut_man 🚶‍♂️ walking walking_man 🚶‍♀️ walking_woman 🏃‍♂️ runner running running_man 🏃‍♀️ running_woman 💃 dancer 🕺 man_dancing 🕴️ business_suit_levitating 👯‍♀️ dancers dancing_women 👯‍♂️ dancing_men ","date":"2019-10-01","objectID":"/emoji-support/:2:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"体育 图标 代码 图标 代码 🤺 person_fencing 🏇 horse_racing ⛷️ skier 🏂 snowboarder 🏌️‍♂️ golfing_man 🏌️‍♀️ golfing_woman 🏄‍♂️ surfer surfing_man 🏄‍♀️ surfing_woman 🚣‍♂️ rowboat rowing_man 🚣‍♀️ rowing_woman 🏊‍♂️ swimmer swimming_man 🏊‍♀️ swimming_woman ⛹️‍♂️ basketball_man ⛹️‍♀️ basketball_woman 🏋️‍♂️ weight_lifting_man 🏋️‍♀️ weight_lifting_woman 🚴‍♂️ bicyclist biking_man 🚴‍♀️ biking_woman 🚵‍♂️ mountain_bicyclist mountain_biking_man 🚵‍♀️ mountain_biking_woman 🤸‍♂️ man_cartwheeling 🤸‍♀️ woman_cartwheeling 🤼‍♂️ men_wrestling 🤼‍♀️ women_wrestling 🤽‍♂️ man_playing_water_polo 🤽‍♀️ woman_playing_water_polo 🤾‍♂️ man_playing_handball 🤾‍♀️ woman_playing_handball 🤹‍♂️ man_juggling 🤹‍♀️ woman_juggling ","date":"2019-10-01","objectID":"/emoji-support/:2:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"休息 图标 代码 图标 代码 🛀 bath 🛌 sleeping_bed ","date":"2019-10-01","objectID":"/emoji-support/:2:14","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"家庭 图标 代码 图标 代码 👭 two_women_holding_hands 👫 couple 👬 two_men_holding_hands 👩‍❤️‍💋‍👨 couplekiss_man_woman 👨‍❤️‍💋‍👨 couplekiss_man_man 👩‍❤️‍💋‍👩 couplekiss_woman_woman 👩‍❤️‍👨 couple_with_heart couple_with_heart_woman_man 👨‍❤️‍👨 couple_with_heart_man_man 👩‍❤️‍👩 couple_with_heart_woman_woman 👨‍👩‍👦 family family_man_woman_boy 👨‍👩‍👧 family_man_woman_girl 👨‍👩‍👧‍👦 family_man_woman_girl_boy 👨‍👩‍👦‍👦 family_man_woman_boy_boy 👨‍👩‍👧‍👧 family_man_woman_girl_girl 👨‍👨‍👦 family_man_man_boy 👨‍👨‍👧 family_man_man_girl 👨‍👨‍👧‍👦 family_man_man_girl_boy 👨‍👨‍👦‍👦 family_man_man_boy_boy 👨‍👨‍👧‍👧 family_man_man_girl_girl 👩‍👩‍👦 family_woman_woman_boy 👩‍👩‍👧 family_woman_woman_girl 👩‍👩‍👧‍👦 family_woman_woman_girl_boy 👩‍👩‍👦‍👦 family_woman_woman_boy_boy 👩‍👩‍👧‍👧 family_woman_woman_girl_girl 👨‍👦 family_man_boy 👨‍👦‍👦 family_man_boy_boy 👨‍👧 family_man_girl 👨‍👧‍👦 family_man_girl_boy 👨‍👧‍👧 family_man_girl_girl 👩‍👦 family_woman_boy 👩‍👦‍👦 family_woman_boy_boy 👩‍👧 family_woman_girl 👩‍👧‍👦 family_woman_girl_boy 👩‍👧‍👧 family_woman_girl_girl ","date":"2019-10-01","objectID":"/emoji-support/:2:15","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人物符号 图标 代码 图标 代码 🗣 speaking_head 👤 bust_in_silhouette 👥 busts_in_silhouette 👣 footprints ","date":"2019-10-01","objectID":"/emoji-support/:2:16","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"动物与自然 ","date":"2019-10-01","objectID":"/emoji-support/:3:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"哺乳动物 图标 代码 图标 代码 🐵 monkey_face 🐒 monkey 🦍 gorilla 🐶 dog 🐕 dog2 🐩 poodle 🐺 wolf 🦊 fox_face 🐱 cat 🐈 cat2 🦁 lion 🐯 tiger 🐅 tiger2 🐆 leopard 🐴 horse 🐎 racehorse 🦄 unicorn 🦌 deer 🐮 cow 🐂 ox 🐃 water_buffalo 🐄 cow2 🐷 pig 🐖 pig2 🐗 boar 🐽 pig_nose 🐏 ram 🐑 sheep 🐐 goat 🐪 dromedary_camel 🐫 camel 🐘 elephant 🦏 rhinoceros 🐭 mouse 🐁 mouse2 🐀 rat 🐹 hamster 🐰 rabbit 🐇 rabbit2 🐿️ chipmunk 🦇 bat 🐻 bear 🐨 koala 🐼 panda_face 🐾 feet paw_prints ","date":"2019-10-01","objectID":"/emoji-support/:3:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"鸟类 图标 代码 图标 代码 🦃 turkey 🐔 chicken 🐓 rooster 🐣 hatching_chick 🐤 baby_chick 🐥 hatched_chick 🐦 bird 🐧 penguin 🕊 dove 🦅 eagle 🦆 duck 🦉 owl ","date":"2019-10-01","objectID":"/emoji-support/:3:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"两栖动物 icon code icon code 🐸 frog ","date":"2019-10-01","objectID":"/emoji-support/:3:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"爬虫类 图标 代码 图标 代码 🐊 crocodile 🐢 turtle 🦎 lizard 🐍 snake 🐲 dragon_face 🐉 dragon ","date":"2019-10-01","objectID":"/emoji-support/:3:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"海洋动物 图标 代码 图标 代码 🐳 whale 🐋 whale2 🐬 dolphin flipper 🐟 fish 🐠 tropical_fish 🐡 blowfish 🦈 shark 🐙 octopus 🐚 shell ","date":"2019-10-01","objectID":"/emoji-support/:3:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"虫类 图标 代码 图标 代码 🐌 snail 🦋 butterfly 🐛 bug 🐜 ant 🐝 bee honeybee 🪲 beetle 🕷️ spider 🕸️ spider_web 🦂 scorpion ","date":"2019-10-01","objectID":"/emoji-support/:3:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"花类植物 图标 代码 图标 代码 💐 bouquet 🌸 cherry_blossom 💮 white_flower 🏵️ rosette 🌹 rose 🥀 wilted_flower 🌺 hibiscus 🌻 sunflower 🌼 blossom 🌷 tulip ","date":"2019-10-01","objectID":"/emoji-support/:3:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"其它植物 图标 代码 图标 代码 🌱 seedling 🌲 evergreen_tree 🌳 deciduous_tree 🌴 palm_tree 🌵 cactus 🌾 ear_of_rice 🌿 herb ☘️ shamrock 🍀 four_leaf_clover 🍁 maple_leaf 🍂 fallen_leaf 🍃 leaves ","date":"2019-10-01","objectID":"/emoji-support/:3:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"食物与饮料 ","date":"2019-10-01","objectID":"/emoji-support/:4:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"水果 图标 代码 图标 代码 🍇 grapes 🍈 melon 🍉 watermelon 🍊 mandarin orange tangerine 🍋 lemon 🍌 banana 🍍 pineapple 🍎 apple 🍏 green_apple 🍐 pear 🍑 peach 🍒 cherries 🍓 strawberry 🥝 kiwi_fruit 🍅 tomato ","date":"2019-10-01","objectID":"/emoji-support/:4:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"蔬菜 图标 代码 图标 代码 🥑 avocado 🍆 eggplant 🥔 potato 🥕 carrot 🌽 corn 🌶️ hot_pepper 🥒 cucumber 🍄 mushroom 🥜 peanuts 🌰 chestnut ","date":"2019-10-01","objectID":"/emoji-support/:4:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"快餐 图标 代码 图标 代码 🍞 bread 🥐 croissant 🥖 baguette_bread 🥞 pancakes 🧀 cheese 🍖 meat_on_bone 🍗 poultry_leg 🥓 bacon 🍔 hamburger 🍟 fries 🍕 pizza 🌭 hotdog 🌮 taco 🌯 burrito 🥙 stuffed_flatbread 🥚 egg 🍳 fried_egg 🥘 shallow_pan_of_food 🍲 stew 🥗 green_salad 🍿 popcorn ","date":"2019-10-01","objectID":"/emoji-support/:4:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"亚洲食物 图标 代码 图标 代码 🍱 bento 🍘 rice_cracker 🍙 rice_ball 🍚 rice 🍛 curry 🍜 ramen 🍝 spaghetti 🍠 sweet_potato 🍢 oden 🍣 sushi 🍤 fried_shrimp 🍥 fish_cake 🍡 dango ","date":"2019-10-01","objectID":"/emoji-support/:4:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"海鲜 图标 代码 图标 代码 🦀 crab 🦐 shrimp 🦑 squid ","date":"2019-10-01","objectID":"/emoji-support/:4:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"甜点 图标 代码 图标 代码 🍦 icecream 🍧 shaved_ice 🍨 ice_cream 🍩 doughnut 🍪 cookie 🎂 birthday 🍰 cake 🍫 chocolate_bar 🍬 candy 🍭 lollipop 🍮 custard 🍯 honey_pot ","date":"2019-10-01","objectID":"/emoji-support/:4:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"饮料 图标 代码 图标 代码 🍼 baby_bottle 🥛 milk_glass ☕ coffee 🍵 tea 🍶 sake 🍾 champagne 🍷 wine_glass 🍸 cocktail 🍹 tropical_drink 🍺 beer 🍻 beers 🥂 clinking_glasses 🥃 tumbler_glass ","date":"2019-10-01","objectID":"/emoji-support/:4:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"餐具 图标 代码 图标 代码 🍽️ plate_with_cutlery 🍴 fork_and_knife 🥄 spoon 🔪 hocho knife 🏺 amphora ","date":"2019-10-01","objectID":"/emoji-support/:4:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"旅游与地理 ","date":"2019-10-01","objectID":"/emoji-support/:5:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"地图 图标 代码 图标 代码 🌍 earth_africa 🌎 earth_americas 🌏 earth_asia 🌐 globe_with_meridians 🗺️ world_map 🗾 japan ","date":"2019-10-01","objectID":"/emoji-support/:5:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"地理现象 图标 代码 图标 代码 🏔 mountain_snow ⛰️ mountain 🌋 volcano 🗻 mount_fuji 🏕️ camping ⛱ beach_umbrella 🏜️ desert 🏝️ desert_island 🏞️ national_park ","date":"2019-10-01","objectID":"/emoji-support/:5:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"建筑物 图标 代码 图标 代码 🏟️ stadium 🏛️ classical_building 🏗️ building_construction 🏘 houses 🏚 derelict_house 🏠 house 🏡 house_with_garden 🏢 office 🏣 post_office 🏤 european_post_office 🏥 hospital 🏦 bank 🏨 hotel 🏩 love_hotel 🏪 convenience_store 🏫 school 🏬 department_store 🏭 factory 🏯 japanese_castle 🏰 european_castle 💒 wedding 🗼 tokyo_tower 🗽 statue_of_liberty ","date":"2019-10-01","objectID":"/emoji-support/:5:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"宗教建筑 图标 代码 图标 代码 ⛪ church 🕌 mosque 🕍 synagogue ⛩️ shinto_shrine 🕋 kaaba ","date":"2019-10-01","objectID":"/emoji-support/:5:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"其它地点 图标 代码 图标 代码 ⛲ fountain ⛺ tent 🌁 foggy 🌃 night_with_stars 🏙️ cityscape 🌄 sunrise_over_mountains 🌅 sunrise 🌆 city_sunset 🌇 city_sunrise 🌉 bridge_at_night ♨️ hotsprings 🎠 carousel_horse 🎡 ferris_wheel 🎢 roller_coaster 💈 barber 🎪 circus_tent ","date":"2019-10-01","objectID":"/emoji-support/:5:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"陆路运输 图标 代码 图标 代码 🚂 steam_locomotive 🚃 railway_car 🚄 bullettrain_side 🚅 bullettrain_front 🚆 train2 🚇 metro 🚈 light_rail 🚉 station 🚊 tram 🚝 monorail 🚞 mountain_railway 🚋 train 🚌 bus 🚍 oncoming_bus 🚎 trolleybus 🚐 minibus 🚑 ambulance 🚒 fire_engine 🚓 police_car 🚔 oncoming_police_car 🚕 taxi 🚖 oncoming_taxi 🚗 car red_car 🚘 oncoming_automobile 🚙 blue_car 🚚 truck 🚛 articulated_lorry 🚜 tractor 🏎️ racing_car 🏍 motorcycle 🛵 motor_scooter 🚲 bike 🛴 kick_scooter 🚏 busstop 🛣️ motorway 🛤️ railway_track 🛢️ oil_drum ⛽ fuelpump 🚨 rotating_light 🚥 traffic_light 🚦 vertical_traffic_light 🛑 stop_sign 🚧 construction ","date":"2019-10-01","objectID":"/emoji-support/:5:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"水路运输 图标 代码 图标 代码 ⚓ anchor ⛵ boat sailboat 🛶 canoe 🚤 speedboat 🛳️ passenger_ship ⛴️ ferry 🛥️ motor_boat 🚢 ship ","date":"2019-10-01","objectID":"/emoji-support/:5:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"空中运输 图标 代码 图标 代码 ✈️ airplane 🛩️ small_airplane 🛫 flight_departure 🛬 flight_arrival 💺 seat 🚁 helicopter 🚟 suspension_railway 🚠 mountain_cableway 🚡 aerial_tramway 🛰️ artificial_satellite 🚀 rocket ","date":"2019-10-01","objectID":"/emoji-support/:5:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"旅馆 icon code icon code 🛎️ bellhop_bell ","date":"2019-10-01","objectID":"/emoji-support/:5:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"时间 图标 代码 图标 代码 ⌛ hourglass ⏳ hourglass_flowing_sand ⌚ watch ⏰ alarm_clock ⏱️ stopwatch ⏲️ timer_clock 🕰️ mantelpiece_clock 🕛 clock12 🕧 clock1230 🕐 clock1 🕜 clock130 🕑 clock2 🕝 clock230 🕒 clock3 🕞 clock330 🕓 clock4 🕟 clock430 🕔 clock5 🕠 clock530 🕕 clock6 🕡 clock630 🕖 clock7 🕢 clock730 🕗 clock8 🕣 clock830 🕘 clock9 🕤 clock930 🕙 clock10 🕥 clock1030 🕚 clock11 🕦 clock1130 ","date":"2019-10-01","objectID":"/emoji-support/:5:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"天空与天气 图标 代码 图标 代码 🌑 new_moon 🌒 waxing_crescent_moon 🌓 first_quarter_moon 🌔 moon waxing_gibbous_moon 🌕 full_moon 🌖 waning_gibbous_moon 🌗 last_quarter_moon 🌘 waning_crescent_moon 🌙 crescent_moon 🌚 new_moon_with_face 🌛 first_quarter_moon_with_face 🌜 last_quarter_moon_with_face 🌡️ thermometer ☀️ sunny 🌝 full_moon_with_face 🌞 sun_with_face ⭐ star 🌟 star2 🌠 stars 🌌 milky_way ☁️ cloud ⛅ partly_sunny ⛈ cloud_with_lightning_and_rain 🌤 sun_behind_small_cloud 🌥 sun_behind_large_cloud 🌦 sun_behind_rain_cloud 🌧 cloud_with_rain 🌨 cloud_with_snow 🌩 cloud_with_lightning 🌪️ tornado 🌫️ fog 🌬 wind_face 🌀 cyclone 🌈 rainbow 🌂 closed_umbrella ☂️ open_umbrella ☂️ umbrella ⛱️ parasol_on_ground ⚡ zap ❄️ snowflake ☃️ snowman_with_snow ☃️ snowman ☄️ comet 🔥 fire 💧 droplet 🌊 ocean ","date":"2019-10-01","objectID":"/emoji-support/:5:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"活动 ","date":"2019-10-01","objectID":"/emoji-support/:6:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"事件 图标 代码 图标 代码 🎃 jack_o_lantern 🎄 christmas_tree 🎆 fireworks 🎇 sparkler ✨ sparkles 🎈 balloon 🎉 tada 🎊 confetti_ball 🎋 tanabata_tree 🎍 bamboo 🎎 dolls 🎏 flags 🎐 wind_chime 🎑 rice_scene 🎀 ribbon 🎁 gift 🎗️ reminder_ribbon 🎟 tickets 🎫 ticket ","date":"2019-10-01","objectID":"/emoji-support/:6:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"奖杯与奖牌 图标 代码 图标 代码 🎖️ medal_military 🏆 trophy 🏅 medal_sports 🥇 1st_place_medal 🥈 2nd_place_medal 🥉 3rd_place_medal ","date":"2019-10-01","objectID":"/emoji-support/:6:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"体育运动 图标 代码 图标 代码 ⚽ soccer ⚾ baseball 🏀 basketball 🏐 volleyball 🏈 football 🏉 rugby_football 🎾 tennis 🎳 bowling 🦗 cricket 🏑 field_hockey 🏒 ice_hockey 🏓 ping_pong 🏸 badminton 🥊 boxing_glove 🥋 martial_arts_uniform 🥅 goal_net ⛳ golf ⛸️ ice_skate 🎣 fishing_pole_and_fish 🎽 running_shirt_with_sash 🎿 ski ","date":"2019-10-01","objectID":"/emoji-support/:6:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"游戏 图标 代码 图标 代码 🎯 dart 🎱 8ball 🔮 crystal_ball 🎮 video_game 🕹️ joystick 🎰 slot_machine 🎲 game_die ♠️ spades ♥️ hearts ♦️ diamonds ♣️ clubs 🃏 black_joker 🀄 mahjong 🎴 flower_playing_cards ","date":"2019-10-01","objectID":"/emoji-support/:6:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"艺术与工艺 图标 代码 图标 代码 🎭 performing_arts 🖼 framed_picture 🎨 art ","date":"2019-10-01","objectID":"/emoji-support/:6:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"物品 ","date":"2019-10-01","objectID":"/emoji-support/:7:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"服装 图标 代码 图标 代码 👓 eyeglasses 🕶️ dark_sunglasses 👔 necktie 👕 shirt tshirt 👖 jeans 👗 dress 👘 kimono 👙 bikini 👚 womans_clothes 👛 purse 👜 handbag 👝 pouch 🛍️ shopping 🎒 school_satchel 👞 mans_shoe shoe 👟 athletic_shoe 👠 high_heel 👡 sandal 👢 boot 👑 crown 👒 womans_hat 🎩 tophat 🎓 mortar_board ⛑️ rescue_worker_helmet 📿 prayer_beads 💄 lipstick 💍 ring 💎 gem ","date":"2019-10-01","objectID":"/emoji-support/:7:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"声音 图标 代码 图标 代码 🔇 mute 🔈 speaker 🔉 sound 🔊 loud_sound 📢 loudspeaker 📣 mega 📯 postal_horn 🔔 bell 🔕 no_bell ","date":"2019-10-01","objectID":"/emoji-support/:7:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"音乐 图标 代码 图标 代码 🎼 musical_score 🎵 musical_note 🎶 notes 🎙️ studio_microphone 🎚️ level_slider 🎛️ control_knobs 🎤 microphone 🎧 headphones 📻 radio ","date":"2019-10-01","objectID":"/emoji-support/:7:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"乐器 图标 代码 图标 代码 🎷 saxophone 🎸 guitar 🎹 musical_keyboard 🎺 trumpet 🎻 violin 🥁 drum ","date":"2019-10-01","objectID":"/emoji-support/:7:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"电话 图标 代码 图标 代码 📱 iphone 📲 calling ☎️ phone telephone 📞 telephone_receiver 📟 pager 📠 fax ","date":"2019-10-01","objectID":"/emoji-support/:7:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"电脑 图标 代码 图标 代码 🔋 battery 🔌 electric_plug 💻 computer 🖥️ desktop_computer 🖨️ printer ⌨️ keyboard 🖱 computer_mouse 🖲️ trackball 💽 minidisc 💾 floppy_disk 💿 cd 📀 dvd ","date":"2019-10-01","objectID":"/emoji-support/:7:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"灯光与影像 图标 代码 图标 代码 🎥 movie_camera 🎞️ film_strip 📽️ film_projector 🎬 clapper 📺 tv 📷 camera 📸 camera_flash 📹 video_camera 📼 vhs 🔍 mag 🔎 mag_right 🕯️ candle 💡 bulb 🔦 flashlight 🏮 izakaya_lantern lantern ","date":"2019-10-01","objectID":"/emoji-support/:7:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"书与纸张 图标 代码 图标 代码 📔 notebook_with_decorative_cover 📕 closed_book 📖 book open_book 📗 green_book 📘 blue_book 📙 orange_book 📚 books 📓 notebook 📒 ledger 📃 page_with_curl 📜 scroll 📄 page_facing_up 📰 newspaper 🗞️ newspaper_roll 📑 bookmark_tabs 🔖 bookmark 🏷️ label ","date":"2019-10-01","objectID":"/emoji-support/:7:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"钱 图标 代码 图标 代码 💰 moneybag 💴 yen 💵 dollar 💶 euro 💷 pound 💸 money_with_wings 💳 credit_card 💹 chart ","date":"2019-10-01","objectID":"/emoji-support/:7:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"邮件 图标 代码 图标 代码 ✉️ email envelope 📧 📧 📨 incoming_envelope 📩 envelope_with_arrow 📤 outbox_tray 📥 inbox_tray 📦 package 📫 mailbox 📪 mailbox_closed 📬 mailbox_with_mail 📭 mailbox_with_no_mail 📮 postbox 🗳 ballot_box ","date":"2019-10-01","objectID":"/emoji-support/:7:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"书写 图标 代码 图标 代码 ✏️ pencil2 ✒️ black_nib 🖋 fountain_pen 🖊 pen 🖌 paintbrush 🖍 crayon 📝 memo pencil ","date":"2019-10-01","objectID":"/emoji-support/:7:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"办公 图标 代码 图标 代码 💼 briefcase 📁 file_folder 📂 open_file_folder 🗂️ card_index_dividers 📅 date 📆 calendar 🗒 spiral_notepad 🗓 spiral_calendar 📇 card_index 📈 chart_with_upwards_trend 📉 chart_with_downwards_trend 📊 bar_chart 📋 clipboard 📌 pushpin 📍 round_pushpin 📎 paperclip 🖇 paperclips 📏 straight_ruler 📐 triangular_ruler ✂️ scissors 🗃️ card_file_box 🗄️ file_cabinet 🗑️ wastebasket ","date":"2019-10-01","objectID":"/emoji-support/:7:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"锁 图标 代码 图标 代码 🔒 lock 🔓 unlock 🔏 lock_with_ink_pen 🔐 closed_lock_with_key 🔑 key 🗝️ old_key ","date":"2019-10-01","objectID":"/emoji-support/:7:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"工具 图标 代码 图标 代码 🔨 hammer ⛏️ pick ⚒️ hammer_and_pick 🛠️ hammer_and_wrench 🗡 dagger ⚔️ crossed_swords 🔫 gun 🏹 bow_and_arrow 🛡️ shield 🔧 wrench 🔩 nut_and_bolt ⚙️ gear 🗜 clamp ⚖ balance_scale 🔗 link ⛓️ chains ","date":"2019-10-01","objectID":"/emoji-support/:7:14","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"科学 图标 代码 图标 代码 ⚗️ alembic 🔬 microscope 🔭 telescope 🛰️ satellite ","date":"2019-10-01","objectID":"/emoji-support/:7:15","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"医疗 图标 代码 图标 代码 💉 syringe 💊 pill ","date":"2019-10-01","objectID":"/emoji-support/:7:16","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"生活用品 图标 代码 图标 代码 🚪 door 🛏️ bed 🛋️ couch_and_lamp 🚽 toilet 🚿 shower 🛁 bathtub 🛒 shopping_cart ","date":"2019-10-01","objectID":"/emoji-support/:7:17","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"其它物品 图标 代码 图标 代码 🚬 smoking ⚰️ coffin ⚱️ funeral_urn 🗿 moyai ","date":"2019-10-01","objectID":"/emoji-support/:7:18","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"符号 ","date":"2019-10-01","objectID":"/emoji-support/:8:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"交通标识 图标 代码 图标 代码 🏧 atm 🚮 put_litter_in_its_place 🚰 potable_water ♿ wheelchair 🚹 mens 🚺 womens 🚻 restroom 🚼 baby_symbol 🚾 wc 🛂 passport_control 🛃 customs 🛄 baggage_claim 🛅 left_luggage ","date":"2019-10-01","objectID":"/emoji-support/:8:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"警告 图标 代码 图标 代码 ⚠️ warning 🚸 children_crossing ⛔ no_entry 🚫 no_entry_sign 🚳 no_bicycles 🚭 no_smoking 🚯 do_not_litter 🚱 🚱 🚷 no_pedestrians 📵 no_mobile_phones 🔞 underage ☢ radioactive ☣ biohazard ","date":"2019-10-01","objectID":"/emoji-support/:8:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"箭头 图标 代码 图标 代码 ⬆️ arrow_up ↗️ arrow_upper_right ➡️ arrow_right ↘️ arrow_lower_right ⬇️ arrow_down ↙️ arrow_lower_left ⬅️ arrow_left ↖️ arrow_upper_left ↕️ arrow_up_down ↔️ left_right_arrow ↩️ leftwards_arrow_with_hook ↪️ arrow_right_hook ⤴️ arrow_heading_up ⤵️ arrow_heading_down 🔃 arrows_clockwise 🔄 arrows_counterclockwise 🔙 back 🔚 end 🔛 on 🔜 soon 🔝 top ","date":"2019-10-01","objectID":"/emoji-support/:8:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"宗教 图标 代码 图标 代码 🛐 place_of_worship ⚛️ atom_symbol 🕉 om ✡️ star_of_david ☸️ wheel_of_dharma ☯️ yin_yang ✝️ latin_cross ☦️ orthodox_cross ☪️ star_and_crescent ☮️ peace_symbol 🕎 menorah 🔯 six_pointed_star ","date":"2019-10-01","objectID":"/emoji-support/:8:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"生肖 图标 代码 图标 代码 ♈ aries ♉ taurus ♊ gemini ♋ cancer ♌ leo ♍ virgo ♎ libra ♏ scorpius ♐ sagittarius ♑ capricorn ♒ aquarius ♓ pisces ⛎ ophiuchus ","date":"2019-10-01","objectID":"/emoji-support/:8:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"影像符号 图标 代码 图标 代码 🔀 twisted_rightwards_arrows 🔁 repeat 🔂 repeat_one ▶️ arrow_forward ⏩ fast_forward ⏭ next_track_button ⏯ play_or_pause_button ◀️ arrow_backward ⏪ rewind ⏮️ previous_track_button 🔼 arrow_up_small ⏫ arrow_double_up 🔽 arrow_down_small ⏬ arrow_double_down ⏸ pause_button ⏹ stop_button ⏺ record_button 🎦 cinema 🔅 low_brightness 🔆 high_brightness 📶 signal_strength 📳 vibration_mode 📴 mobile_phone_off ","date":"2019-10-01","objectID":"/emoji-support/:8:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"数学 图标 代码 图标 代码 ✖️ heavy_multiplication_x ➕ heavy_plus_sign ➖ heavy_minus_sign ➗ heavy_division_sign ","date":"2019-10-01","objectID":"/emoji-support/:8:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"标点符号 图标 代码 图标 代码 ‼️ bangbang ⁉️ interrobang ❓ question ❔ grey_question ❕ grey_exclamation ❗ exclamation heavy_exclamation_mark 〰️ wavy_dash ","date":"2019-10-01","objectID":"/emoji-support/:8:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"货币 图标 代码 图标 代码 💱 currency_exchange 💲 heavy_dollar_sign ","date":"2019-10-01","objectID":"/emoji-support/:8:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"按键符号 图标 代码 图标 代码 #️⃣ hash *️⃣ asterisk 0️⃣ zero 1️⃣ one 2️⃣ two 3️⃣ three 4️⃣ four 5️⃣ five 6️⃣ six 7️⃣ seven 8️⃣ eight 9️⃣ nine 🔟 keycap_ten ","date":"2019-10-01","objectID":"/emoji-support/:8:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"字母符号 图标 代码 图标 代码 🔠 capital_abcd 🔡 abcd 🔢 1234 🔣 symbols 🔤 abc 🅰️ a 🆎 ab 🅱️ b 🆑 cl 🆒 cool 🆓 free ℹ️ information_source 🆔 id ⓜ️ m 🆕 new 🆖 ng 🅾️ o2 🆗 ok 🅿️ parking 🆘 sos 🆙 up 🆚 vs 🈁 koko 🈂️ sa 🈷️ u6708 🈶 u6709 🈯 u6307 🉐 ideograph_advantage 🈹 u5272 🈚 u7121 🈲 u7981 🉑 accept 🈸 u7533 🈴 u5408 🈳 u7a7a ㊗️ congratulations ㊙️ secret 🈺 u55b6 🈵 u6e80 ","date":"2019-10-01","objectID":"/emoji-support/:8:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"几何符号 图标 代码 图标 代码 🔴 red_circle 🔵 large_blue_circle ⚫ black_circle ⚪ white_circle ⬛ black_large_square ⬜ white_large_square ◼️ black_medium_square ◻️ white_medium_square ◾ black_medium_small_square ◽ white_medium_small_square ▪️ black_small_square ▫️ white_small_square 🔶 large_orange_diamond 🔷 large_blue_diamond 🔸 small_orange_diamond 🔹 small_blue_diamond 🔺 small_red_triangle 🔻 small_red_triangle_down 💠 diamond_shape_with_a_dot_inside 🔘 radio_button 🔳 white_square_button 🔲 black_square_button ","date":"2019-10-01","objectID":"/emoji-support/:8:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"其它符合 图标 代码 图标 代码 ♻️ recycle ⚜️ fleur_de_lis 🔱 trident 📛 name_badge 🔰 beginner ⭕ o ✅ white_check_mark ☑️ ballot_box_with_check ✔️ heavy_check_mark ❌ x ❎ negative_squared_cross_mark ➰ curly_loop ➿ loop 〽️ part_alternation_mark ✳️ eight_spoked_asterisk ✴️ eight_pointed_black_star ❇️ sparkle ©️ copyright ®️ registered ™️ tm ","date":"2019-10-01","objectID":"/emoji-support/:8:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"旗帜 ","date":"2019-10-01","objectID":"/emoji-support/:9:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"常用旗帜 图标 代码 图标 代码 🏁 checkered_flag 🚩 triangular_flag_on_post 🎌 crossed_flags 🏴 black_flag 🏳 white_flag 🏳️‍🌈 rainbow_flag ","date":"2019-10-01","objectID":"/emoji-support/:9:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"国家和地区旗帜 图标 代码 图标 代码 🇦🇩 andorra 🇦🇪 united_arab_emirates 🇦🇫 afghanistan 🇦🇬 antigua_barbuda 🇦🇮 anguilla 🇦🇱 albania 🇦🇲 armenia 🇦🇴 angola 🇦🇶 antarctica 🇦🇷 argentina 🇦🇸 american_samoa 🇦🇹 austria 🇦🇺 australia 🇦🇼 aruba 🇦🇽 aland_islands 🇦🇿 azerbaijan 🇧🇦 bosnia_herzegovina 🇧🇧 barbados 🇧🇩 bangladesh 🇧🇪 belgium 🇧🇫 burkina_faso 🇧🇬 bulgaria 🇧🇭 bahrain 🇧🇮 burundi 🇧🇯 benin 🇧🇱 st_barthelemy 🇧🇲 bermuda 🇧🇳 brunei 🇧🇴 bolivia 🇧🇶 caribbean_netherlands 🇧🇷 brazil 🇧🇸 bahamas 🇧🇹 bhutan 🇧🇼 botswana 🇧🇾 belarus 🇧🇿 belize 🇨🇦 canada 🇨🇨 cocos_islands 🇨🇩 congo_kinshasa 🇨🇫 central_african_republic 🇨🇬 congo_brazzaville 🇨🇭 switzerland 🇨🇮 cote_divoire 🇨🇰 cook_islands 🇨🇱 chile 🇨🇲 cameroon 🇨🇳 cn 🇨🇴 colombia 🇨🇷 costa_rica 🇨🇺 cuba 🇨🇻 cape_verde 🇨🇼 curacao 🇨🇽 christmas_island 🇨🇾 cyprus 🇨🇿 czech_republic 🇩🇪 de 🇩🇯 djibouti 🇩🇰 denmark 🇩🇲 dominica 🇩🇴 dominican_republic 🇩🇿 algeria 🇪🇨 ecuador 🇪🇪 estonia 🇪🇬 egypt 🇪🇭 western_sahara 🇪🇷 eritrea 🇪🇸 es 🇪🇹 ethiopia 🇪🇺 eu european_union 🇫🇮 finland 🇫🇯 fiji 🇫🇰 falkland_islands 🇫🇲 micronesia 🇫🇴 faroe_islands 🇫🇷 fr 🇬🇦 gabon 🇬🇧 gb uk 🇬🇩 grenada 🇬🇪 georgia 🇬🇫 french_guiana 🇬🇬 guernsey 🇬🇭 ghana 🇬🇮 gibraltar 🇬🇱 greenland 🇬🇲 gambia 🇬🇳 guinea 🇬🇵 guadeloupe 🇬🇶 equatorial_guinea 🇬🇷 greece 🇬🇸 south_georgia_south_sandwich_islands 🇬🇹 guatemala 🇬🇺 guam 🇬🇼 guinea_bissau 🇬🇾 guyana 🇭🇰 hong_kong 🇭🇳 honduras 🇭🇷 croatia 🇭🇹 haiti 🇭🇺 hungary 🇮🇨 canary_islands 🇮🇩 indonesia 🇮🇪 ireland 🇮🇱 israel 🇮🇲 isle_of_man 🇮🇳 india 🇮🇴 british_indian_ocean_territory 🇮🇶 iraq 🇮🇷 iran 🇮🇸 iceland 🇮🇹 it 🇯🇪 jersey 🇯🇲 jamaica 🇯🇴 jordan 🇯🇵 jp 🇰🇪 kenya 🇰🇬 kyrgyzstan 🇰🇭 cambodia 🇰🇮 kiribati 🇰🇲 comoros 🇰🇳 st_kitts_nevis 🇰🇵 north_korea 🇰🇷 kr 🇰🇼 kuwait 🇰🇾 cayman_islands 🇰🇿 kazakhstan 🇱🇦 laos 🇱🇧 lebanon 🇱🇨 st_lucia 🇱🇮 liechtenstein 🇱🇰 sri_lanka 🇱🇷 liberia 🇱🇸 lesotho 🇱🇹 lithuania 🇱🇺 luxembourg 🇱🇻 latvia 🇱🇾 libya 🇲🇦 morocco 🇲🇨 monaco 🇲🇩 moldova 🇲🇪 montenegro 🇲🇬 madagascar 🇲🇭 marshall_islands 🇲🇰 macedonia 🇲🇱 mali 🇲🇲 myanmar 🇲🇳 mongolia 🇲🇴 macau 🇲🇵 northern_mariana_islands 🇲🇶 martinique 🇲🇷 mauritania 🇲🇸 montserrat 🇲🇹 malta 🇲🇺 mauritius 🇲🇻 maldives 🇲🇼 malawi 🇲🇽 mexico 🇲🇾 malaysia 🇲🇿 mozambique 🇳🇦 namibia 🇳🇨 new_caledonia 🇳🇪 niger 🇳🇫 norfolk_island 🇳🇬 nigeria 🇳🇮 nicaragua 🇳🇱 netherlands 🇳🇴 norway 🇳🇵 nepal 🇳🇷 nauru 🇳🇺 niue 🇳🇿 new_zealand 🇴🇲 oman 🇵🇦 panama 🇵🇪 peru 🇵🇫 french_polynesia 🇵🇬 papua_new_guinea 🇵🇭 philippines 🇵🇰 pakistan 🇵🇱 poland 🇵🇲 st_pierre_miquelon 🇵🇳 pitcairn_islands 🇵🇷 puerto_rico 🇵🇸 palestinian_territories 🇵🇹 portugal 🇵🇼 palau 🇵🇾 paraguay 🇶🇦 qatar 🇷🇪 reunion 🇷🇴 romania 🇷🇸 serbia 🇷🇺 ru 🇷🇼 rwanda 🇸🇦 saudi_arabia 🇸🇧 solomon_islands 🇸🇨 seychelles 🇸🇩 sudan 🇸🇪 sweden 🇸🇬 singapore 🇸🇭 st_helena 🇸🇮 slovenia 🇸🇰 slovakia 🇸🇱 sierra_leone 🇸🇲 san_marino 🇸🇳 senegal 🇸🇴 somalia 🇸🇷 suriname 🇸🇸 south_sudan 🇸🇹 sao_tome_principe 🇸🇻 el_salvador 🇸🇽 sint_maarten 🇸🇾 syria 🇸🇿 swaziland 🇹🇨 turks_caicos_islands 🇹🇩 chad 🇹🇫 french_southern_territories 🇹🇬 togo 🇹🇭 thailand 🇹🇯 tajikistan 🇹🇰 tokelau 🇹🇱 timor_leste 🇹🇲 turkmenistan 🇹🇳 tunisia 🇹🇴 tonga 🇹🇷 tr 🇹🇹 trinidad_tobago 🇹🇻 tuvalu 🇹🇼 taiwan 🇹🇿 tanzania 🇺🇦 ukraine 🇺🇬 uganda 🇺🇸 us 🇺🇾 uruguay 🇺🇿 uzbekistan 🇻🇦 vatican_city 🇻🇨 st_vincent_grenadines 🇻🇪 venezuela 🇻🇬 british_virgin_islands 🇻🇮 us_virgin_islands 🇻🇳 vietnam 🇻🇺 vanuatu 🇼🇫 wallis_futuna 🇼🇸 samoa 🇽🇰 kosovo 🇾🇪 yemen 🇾🇹 mayotte 🇿🇦 south_africa 🇿🇲 zambia 🇿🇼 zimbabwe ","date":"2019-10-01","objectID":"/emoji-support/:9:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":null,"content":" 警告 Sorry, this article has not been completely translated into French. Welcome to take the time to propose a translation by  making a PR to the theme!  CodeIT is a clean, elegant but advanced blog theme for Hugo. It is based on the original LoveIt Theme, LeaveIt Theme, and KeepIt Theme. Hugo Theme CodeITHugo Theme CodeIT \" Hugo Theme CodeIT ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"关于 CodeIT","uri":"/about/"},{"categories":null,"content":"特性 性能和 SEO  性能优化：在 Google PageSpeed Insights 中， 99/100 的移动设备得分和 100/100 的桌面设备得分  使用基于 JSON-LD 格式 的 SEO SCHEMA 文件进行 SEO 优化  支持 Google Analytics  支持 Fathom Analytics  支持 Plausible Analytics  支持搜索引擎的网站验证 (Google, Bind, Yandex and Baidu)  支持所有第三方库的 CDN  基于 lazysizes 自动转换图片为懒加载 外观和布局 / 响应式布局 / 浅色/深色 主题模式  全局一致的设计语言  支持分页  易用和自动展开的文章目录  支持多语言和国际化  美观的 CSS 动画 社交和评论系统  支持 Gravatar 头像  支持本地头像  支持多达 64 种社交链接  支持多达 28 种网站分享  支持 Disqus 评论系统  支持 Gitalk 评论系统  支持 Valine 评论系统  支持 Facebook 评论系统  支持 Telegram comments 评论系统  支持 Commento 评论系统  支持 Utterances 评论系统 扩展功能  支持基于 Lunr.js 或 algolia 的搜索  支持 Twemoji  支持代码高亮  一键复制代码到剪贴板  支持基于 lightgallery.js 的图片画廊  支持 Font Awesome 图标的扩展 Markdown 语法  支持上标注释的扩展 Markdown 语法  支持分数的扩展 Markdown 语法  支持基于 $ \\KaTeX $ 的数学公式  支持基于 mermaid 的图表 shortcode  支持基于 ECharts 的交互式数据可视化 shortcode  支持基于 Mapbox GL JS 的 Mapbox shortcode  支持基于 APlayer 和 MetingJS 的音乐播放器 shortcode  支持 Bilibili 视频 shortcode  支持多种注释的 shortcode  支持自定义样式的 shortcode  支持自定义脚本的 shortcode  支持基于 TypeIt 的打字动画 shortcode  支持基于 Smooth Scroll 的滚动动画  支持基于 cookieconsent 的 Cookie 许可横幅 … ","date":"2019-08-02","objectID":"/about/:0:1","tags":null,"title":"关于 CodeIT","uri":"/about/"},{"categories":null,"content":"许可协议 CodeIT 根据 MIT 许可协议授权。 更多信息请查看 LICENSE 文件。 CodeIT 主题中用到了以下项目，感谢它们的作者： normalize.css Font Awesome Simple Icons Animate.css Smooth Scroll autocomplete.js Lunr.js algoliasearch lazysizes object-fit-images Twemoji lightgallery.js clipboard.js Sharer.js TypeIt $ \\KaTeX $ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine cookieconsent ","date":"2019-08-02","objectID":"/about/:0:2","tags":null,"title":"关于 CodeIT","uri":"/about/"}]